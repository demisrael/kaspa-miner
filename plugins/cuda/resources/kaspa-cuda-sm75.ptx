//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-30672275
// Cuda compilation tools, release 11.5, V11.5.119
// Based on NVVM 7.0.1
//

.version 7.5
.target sm_75
.address_size 64

	// .globl	heavy_hash
.global .align 1 .b8 rho[24] = {1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44};
.global .align 1 .b8 pi[24] = {10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20, 14, 22, 9, 6, 1};
.global .align 8 .b8 RC[192] = {1, 0, 0, 0, 0, 0, 0, 0, 130, 128, 0, 0, 0, 0, 0, 0, 138, 128, 0, 0, 0, 0, 0, 128, 0, 128, 0, 128, 0, 0, 0, 128, 139, 128, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, 0, 0, 0, 0, 129, 128, 0, 128, 0, 0, 0, 128, 9, 128, 0, 0, 0, 0, 0, 128, 138, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 9, 128, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 0, 0, 0, 0, 139, 128, 0, 128, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 128, 137, 128, 0, 0, 0, 0, 0, 128, 3, 128, 0, 0, 0, 0, 0, 128, 2, 128, 0, 0, 0, 0, 0, 128, 128, 0, 0, 0, 0, 0, 0, 128, 10, 128, 0, 0, 0, 0, 0, 0, 10, 0, 0, 128, 0, 0, 0, 128, 129, 128, 0, 128, 0, 0, 0, 128, 128, 128, 0, 0, 0, 0, 0, 128, 1, 0, 0, 128, 0, 0, 0, 0, 8, 128, 0, 128, 0, 0, 0, 128};
.global .align 8 .b8 _ZZ15xoshiro256_jumpP10ulonglong4E4JUMP[32] = {186, 10, 253, 60, 211, 198, 14, 24, 44, 57, 201, 240, 102, 18, 166, 213, 170, 201, 63, 224, 24, 38, 88, 169, 28, 102, 177, 41, 69, 220, 171, 57};
.global .align 8 .b8 _ZZ20xoshiro256_long_jumpP10ulonglong4E9LONG_JUMP[32] = {191, 203, 253, 254, 62, 93, 225, 118, 179, 47, 82, 28, 68, 78, 0, 197, 65, 226, 78, 133, 105, 0, 113, 119, 53, 230, 203, 42, 176, 155, 16, 57};
.const .align 4 .b8 matrix[4096];
.const .align 8 .b8 hash_header[72];
.const .align 8 .b8 target[32];
.const .align 1 .b8 powP[200] = {61, 216, 246, 161, 13, 255, 60, 17, 60, 126, 2, 183, 85, 136, 191, 41, 210, 68, 251, 14, 114, 46, 95, 30, 160, 105, 152, 245, 163, 164, 165, 27, 101, 45, 94, 135, 202, 175, 47, 123, 70, 226, 220, 41, 214, 97, 239, 74, 16, 91, 65, 173, 30, 152, 58, 24, 156, 194, 155, 120, 12, 246, 107, 119, 64, 49, 102, 136, 51, 241, 235, 248, 240, 95, 40, 67, 60, 28, 101, 46, 10, 74, 241, 64, 5, 7, 150, 15, 82, 145, 41, 91, 135, 103, 227, 68, 21, 55, 177, 37, 164, 241, 112, 236, 137, 218, 233, 130, 143, 93, 200, 230, 35, 178, 180, 133, 31, 96, 26, 178, 70, 106, 163, 100, 144, 84, 133, 52, 26, 133, 47, 122, 28, 221, 6, 15, 66, 177, 59, 86, 29, 2, 162, 193, 228, 104, 22, 69, 228, 229, 29, 186, 141, 95, 9, 5, 65, 87, 2, 209, 74, 207, 206, 155, 132, 78, 202, 137, 219, 46, 116, 168, 39, 148, 176, 72, 114, 82, 139, 231, 156, 206, 252, 177, 188, 165, 175, 130, 207, 41, 17, 93, 131, 67, 130, 111, 120, 124, 185, 2};
.const .align 1 .b8 heavyP[200] = {9, 133, 36, 178, 82, 76, 215, 58, 22, 66, 159, 47, 14, 155, 98, 121, 238, 248, 199, 22, 72, 255, 20, 122, 152, 100, 5, 128, 76, 95, 167, 17, 218, 206, 238, 68, 223, 224, 32, 231, 105, 64, 243, 20, 46, 216, 199, 114, 186, 53, 137, 147, 42, 255, 0, 193, 98, 196, 15, 37, 64, 144, 33, 94, 72, 106, 207, 13, 166, 249, 57, 128, 12, 61, 42, 121, 159, 170, 188, 160, 38, 162, 169, 208, 93, 192, 49, 244, 63, 140, 193, 84, 195, 76, 31, 211, 61, 204, 105, 167, 1, 125, 107, 108, 228, 147, 36, 86, 211, 91, 198, 46, 68, 176, 205, 153, 58, 75, 247, 78, 176, 242, 52, 84, 131, 134, 76, 119, 22, 148, 188, 54, 176, 97, 233, 7, 7, 204, 101, 119, 177, 29, 143, 126, 57, 109, 196, 186, 128, 219, 143, 234, 88, 202, 52, 123, 211, 242, 146, 185, 87, 185, 129, 132, 4, 197, 118, 199, 46, 194, 18, 81, 103, 159, 195, 71, 10, 12, 41, 181, 157, 57, 187, 146, 21, 198, 159, 47, 49, 224, 154, 84, 53, 218, 185, 16, 125, 50, 25, 22};

.visible .entry heavy_hash(
	.param .u64 heavy_hash_param_0,
	.param .u64 heavy_hash_param_1,
	.param .u64 heavy_hash_param_2
)
{
	.reg .pred 	%p<15>;
	.reg .b16 	%rs<13>;
	.reg .b32 	%r<5802>;
	.reg .b64 	%rd<2264>;


	ld.param.u64 	%rd126, [heavy_hash_param_0];
	ld.param.u64 	%rd125, [heavy_hash_param_1];
	ld.param.u64 	%rd127, [heavy_hash_param_2];
	cvta.to.global.u64 	%rd1, %rd127;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r8, %r6, %r5, %r7;
	cvt.s64.s32 	%rd2, %r8;
	setp.ge.u64 	%p6, %rd2, %rd126;
	@%p6 bra 	$L__BB0_16;

	cvt.u32.u64 	%r9, %rd2;
	setp.ne.s32 	%p7, %r9, 0;
	@%p7 bra 	$L__BB0_3;

	mov.u64 	%rd128, 0;
	st.global.u64 	[%rd1], %rd128;

$L__BB0_3:
	cvta.to.global.u64 	%rd145, %rd125;
	shl.b64 	%rd146, %rd2, 5;
	add.s64 	%rd147, %rd145, %rd146;
	ld.global.v2.u64 	{%rd148, %rd149}, [%rd147];
	mov.u32 	%r5800, 0;
	mul.lo.s64 	%rd152, %rd149, 5;
	{
	.reg .b64 %lhs;
	.reg .b64 %rhs;
	shl.b64 	%lhs, %rd152, 7;
	shr.b64 	%rhs, %rd152, 57;
	add.u64 	%rd153, %lhs, %rhs;
	}
	mul.lo.s64 	%rd3, %rd153, 9;
	shl.b64 	%rd154, %rd149, 17;
	ld.global.v2.u64 	{%rd155, %rd156}, [%rd147+16];
	xor.b64  	%rd159, %rd155, %rd148;
	xor.b64  	%rd160, %rd156, %rd149;
	xor.b64  	%rd161, %rd149, %rd159;
	xor.b64  	%rd162, %rd148, %rd160;
	st.global.v2.u64 	[%rd147], {%rd162, %rd161};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r11,%dummy}, %rd160;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r12}, %rd160;
	}
	shf.r.wrap.b32 	%r13, %r12, %r11, 19;
	shf.r.wrap.b32 	%r14, %r11, %r12, 19;
	mov.b64 	%rd163, {%r14, %r13};
	xor.b64  	%rd164, %rd159, %rd154;
	st.global.v2.u64 	[%rd147+16], {%rd164, %rd163};
	ld.const.u64 	%rd165, [hash_header];
	xor.b64  	%rd2237, %rd165, 1242148031264380989;
	ld.const.u64 	%rd166, [hash_header+8];
	xor.b64  	%rd2232, %rd166, 3008272977830772284;
	ld.const.u64 	%rd167, [hash_header+16];
	xor.b64  	%rd2227, %rd167, 2188519011337848018;
	ld.const.u64 	%rd168, [hash_header+24];
	xor.b64  	%rd2222, %rd168, 1992179434288343456;
	ld.const.u64 	%rd169, [hash_header+32];
	xor.b64  	%rd2217, %rd169, 8876506674959887717;
	ld.const.u64 	%rd170, [hash_header+40];
	xor.b64  	%rd2236, %rd170, 5399642050693751366;
	ld.const.u64 	%rd171, [hash_header+48];
	xor.b64  	%rd2231, %rd171, 1745875063082670864;
	ld.const.u64 	%rd172, [hash_header+56];
	xor.b64  	%rd2226, %rd172, 8605242046444978844;
	ld.const.u64 	%rd173, [hash_header+64];
	xor.b64  	%rd2221, %rd173, -510048929142394560;
	xor.b64  	%rd2216, %rd3, 3343109343542796272;
	mov.u64 	%rd2235, 1123092876221303306;
	mov.u64 	%rd2234, 3784524041015224902;
	mov.u64 	%rd2233, -8517909413761200310;
	mov.u64 	%rd2230, 4963925045340115282;
	mov.u64 	%rd2229, 1082795874807940378;
	mov.u64 	%rd2228, 5237849264682708699;
	mov.u64 	%rd2225, -1409360996057663723;
	mov.u64 	%rd2224, -4494027153138273982;
	mov.u64 	%rd2223, -5621391061570334094;
	mov.u64 	%rd2220, -1817099578685924727;
	mov.u64 	%rd2219, -5035616039755945756;
	mov.u64 	%rd2218, 6706187291358897596;
	mov.u64 	%rd2215, -5613068297060437469;
	mov.u64 	%rd2214, -3386048033060200563;
	mov.u64 	%rd2213, 196324915476054915;
	mov.u64 	%rd2212, RC;

$L__BB0_4:
	.pragma "nounroll";
	xor.b64  	%rd174, %rd2236, %rd2237;
	xor.b64  	%rd175, %rd174, %rd2235;
	xor.b64  	%rd176, %rd175, %rd2234;
	xor.b64  	%rd177, %rd176, %rd2233;
	xor.b64  	%rd178, %rd2231, %rd2232;
	xor.b64  	%rd179, %rd178, %rd2230;
	xor.b64  	%rd180, %rd179, %rd2229;
	xor.b64  	%rd181, %rd180, %rd2228;
	xor.b64  	%rd182, %rd2226, %rd2227;
	xor.b64  	%rd183, %rd182, %rd2225;
	xor.b64  	%rd184, %rd183, %rd2224;
	xor.b64  	%rd185, %rd184, %rd2223;
	xor.b64  	%rd186, %rd2221, %rd2222;
	xor.b64  	%rd187, %rd186, %rd2220;
	xor.b64  	%rd188, %rd187, %rd2219;
	xor.b64  	%rd189, %rd188, %rd2218;
	xor.b64  	%rd190, %rd2216, %rd2217;
	xor.b64  	%rd191, %rd190, %rd2215;
	xor.b64  	%rd192, %rd191, %rd2214;
	xor.b64  	%rd193, %rd192, %rd2213;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r15}, %rd181;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r16,%dummy}, %rd181;
	}
	shf.l.wrap.b32 	%r17, %r16, %r15, 1;
	shf.l.wrap.b32 	%r18, %r15, %r16, 1;
	mov.b64 	%rd194, {%r18, %r17};
	xor.b64  	%rd195, %rd193, %rd194;
	xor.b64  	%rd196, %rd195, %rd2237;
	xor.b64  	%rd197, %rd2236, %rd195;
	xor.b64  	%rd198, %rd2235, %rd195;
	xor.b64  	%rd199, %rd2234, %rd195;
	xor.b64  	%rd200, %rd2233, %rd195;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r19}, %rd185;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r20,%dummy}, %rd185;
	}
	shf.l.wrap.b32 	%r21, %r20, %r19, 1;
	shf.l.wrap.b32 	%r22, %r19, %r20, 1;
	mov.b64 	%rd201, {%r22, %r21};
	xor.b64  	%rd202, %rd201, %rd177;
	xor.b64  	%rd203, %rd2232, %rd202;
	xor.b64  	%rd204, %rd2231, %rd202;
	xor.b64  	%rd205, %rd2230, %rd202;
	xor.b64  	%rd206, %rd2229, %rd202;
	xor.b64  	%rd207, %rd2228, %rd202;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r23}, %rd189;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r24,%dummy}, %rd189;
	}
	shf.l.wrap.b32 	%r25, %r24, %r23, 1;
	shf.l.wrap.b32 	%r26, %r23, %r24, 1;
	mov.b64 	%rd208, {%r26, %r25};
	xor.b64  	%rd209, %rd208, %rd181;
	xor.b64  	%rd210, %rd2227, %rd209;
	xor.b64  	%rd211, %rd2226, %rd209;
	xor.b64  	%rd212, %rd2225, %rd209;
	xor.b64  	%rd213, %rd2224, %rd209;
	xor.b64  	%rd214, %rd2223, %rd209;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r27}, %rd193;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r28,%dummy}, %rd193;
	}
	shf.l.wrap.b32 	%r29, %r28, %r27, 1;
	shf.l.wrap.b32 	%r30, %r27, %r28, 1;
	mov.b64 	%rd215, {%r30, %r29};
	xor.b64  	%rd216, %rd215, %rd185;
	xor.b64  	%rd217, %rd2222, %rd216;
	xor.b64  	%rd218, %rd2221, %rd216;
	xor.b64  	%rd219, %rd2220, %rd216;
	xor.b64  	%rd220, %rd2219, %rd216;
	xor.b64  	%rd221, %rd2218, %rd216;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r31}, %rd177;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r32,%dummy}, %rd177;
	}
	shf.l.wrap.b32 	%r33, %r32, %r31, 1;
	shf.l.wrap.b32 	%r34, %r31, %r32, 1;
	mov.b64 	%rd222, {%r34, %r33};
	xor.b64  	%rd223, %rd189, %rd222;
	xor.b64  	%rd224, %rd2217, %rd223;
	xor.b64  	%rd225, %rd2216, %rd223;
	xor.b64  	%rd226, %rd2215, %rd223;
	xor.b64  	%rd227, %rd2214, %rd223;
	xor.b64  	%rd228, %rd2213, %rd223;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r35}, %rd203;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r36,%dummy}, %rd203;
	}
	shf.l.wrap.b32 	%r37, %r36, %r35, 1;
	shf.l.wrap.b32 	%r38, %r35, %r36, 1;
	mov.b64 	%rd229, {%r38, %r37};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r39}, %rd198;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r40,%dummy}, %rd198;
	}
	shf.l.wrap.b32 	%r41, %r40, %r39, 3;
	shf.l.wrap.b32 	%r42, %r39, %r40, 3;
	mov.b64 	%rd230, {%r42, %r41};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r43}, %rd211;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r44,%dummy}, %rd211;
	}
	shf.l.wrap.b32 	%r45, %r44, %r43, 6;
	shf.l.wrap.b32 	%r46, %r43, %r44, 6;
	mov.b64 	%rd231, {%r46, %r45};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r47}, %rd205;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r48,%dummy}, %rd205;
	}
	shf.l.wrap.b32 	%r49, %r48, %r47, 10;
	shf.l.wrap.b32 	%r50, %r47, %r48, 10;
	mov.b64 	%rd232, {%r50, %r49};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r51}, %rd213;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r52,%dummy}, %rd213;
	}
	shf.l.wrap.b32 	%r53, %r52, %r51, 15;
	shf.l.wrap.b32 	%r54, %r51, %r52, 15;
	mov.b64 	%rd233, {%r54, %r53};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r55}, %rd220;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r56,%dummy}, %rd220;
	}
	shf.l.wrap.b32 	%r57, %r56, %r55, 21;
	shf.l.wrap.b32 	%r58, %r55, %r56, 21;
	mov.b64 	%rd234, {%r58, %r57};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r59}, %rd217;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r60,%dummy}, %rd217;
	}
	shf.l.wrap.b32 	%r61, %r60, %r59, 28;
	shf.l.wrap.b32 	%r62, %r59, %r60, 28;
	mov.b64 	%rd235, {%r62, %r61};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r63,%dummy}, %rd197;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r64}, %rd197;
	}
	shf.r.wrap.b32 	%r65, %r64, %r63, 28;
	shf.r.wrap.b32 	%r66, %r63, %r64, 28;
	mov.b64 	%rd236, {%r66, %r65};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r67,%dummy}, %rd206;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r68}, %rd206;
	}
	shf.r.wrap.b32 	%r69, %r68, %r67, 19;
	shf.r.wrap.b32 	%r70, %r67, %r68, 19;
	mov.b64 	%rd237, {%r70, %r69};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r71,%dummy}, %rd218;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r72}, %rd218;
	}
	shf.r.wrap.b32 	%r73, %r72, %r71, 9;
	shf.r.wrap.b32 	%r74, %r71, %r72, 9;
	mov.b64 	%rd238, {%r74, %r73};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r75}, %rd207;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r76,%dummy}, %rd207;
	}
	shf.l.wrap.b32 	%r77, %r76, %r75, 2;
	shf.l.wrap.b32 	%r78, %r75, %r76, 2;
	mov.b64 	%rd239, {%r78, %r77};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r79}, %rd228;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r80,%dummy}, %rd228;
	}
	shf.l.wrap.b32 	%r81, %r80, %r79, 14;
	shf.l.wrap.b32 	%r82, %r79, %r80, 14;
	mov.b64 	%rd240, {%r82, %r81};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r83}, %rd224;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r84,%dummy}, %rd224;
	}
	shf.l.wrap.b32 	%r85, %r84, %r83, 27;
	shf.l.wrap.b32 	%r86, %r83, %r84, 27;
	mov.b64 	%rd241, {%r86, %r85};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r87,%dummy}, %rd199;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r88}, %rd199;
	}
	shf.r.wrap.b32 	%r89, %r88, %r87, 23;
	shf.r.wrap.b32 	%r90, %r87, %r88, 23;
	mov.b64 	%rd242, {%r90, %r89};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r91,%dummy}, %rd221;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r92}, %rd221;
	}
	shf.r.wrap.b32 	%r93, %r92, %r91, 8;
	shf.r.wrap.b32 	%r94, %r91, %r92, 8;
	mov.b64 	%rd243, {%r94, %r93};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r95}, %rd227;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r96,%dummy}, %rd227;
	}
	shf.l.wrap.b32 	%r97, %r96, %r95, 8;
	shf.l.wrap.b32 	%r98, %r95, %r96, 8;
	mov.b64 	%rd244, {%r98, %r97};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r99}, %rd219;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r100,%dummy}, %rd219;
	}
	shf.l.wrap.b32 	%r101, %r100, %r99, 25;
	shf.l.wrap.b32 	%r102, %r99, %r100, 25;
	mov.b64 	%rd245, {%r102, %r101};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r103,%dummy}, %rd212;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r104}, %rd212;
	}
	shf.r.wrap.b32 	%r105, %r104, %r103, 21;
	shf.r.wrap.b32 	%r106, %r103, %r104, 21;
	mov.b64 	%rd246, {%r106, %r105};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r107,%dummy}, %rd210;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r108}, %rd210;
	}
	shf.r.wrap.b32 	%r109, %r108, %r107, 2;
	shf.r.wrap.b32 	%r110, %r107, %r108, 2;
	mov.b64 	%rd247, {%r110, %r109};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r111}, %rd200;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r112,%dummy}, %rd200;
	}
	shf.l.wrap.b32 	%r113, %r112, %r111, 18;
	shf.l.wrap.b32 	%r114, %r111, %r112, 18;
	mov.b64 	%rd248, {%r114, %r113};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r115,%dummy}, %rd226;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r116}, %rd226;
	}
	shf.r.wrap.b32 	%r117, %r116, %r115, 25;
	shf.r.wrap.b32 	%r118, %r115, %r116, 25;
	mov.b64 	%rd249, {%r118, %r117};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r119,%dummy}, %rd214;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r120}, %rd214;
	}
	shf.r.wrap.b32 	%r121, %r120, %r119, 3;
	shf.r.wrap.b32 	%r122, %r119, %r120, 3;
	mov.b64 	%rd250, {%r122, %r121};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r123}, %rd225;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r124,%dummy}, %rd225;
	}
	shf.l.wrap.b32 	%r125, %r124, %r123, 20;
	shf.l.wrap.b32 	%r126, %r123, %r124, 20;
	mov.b64 	%rd251, {%r126, %r125};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r127,%dummy}, %rd204;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r128}, %rd204;
	}
	shf.r.wrap.b32 	%r129, %r128, %r127, 20;
	shf.r.wrap.b32 	%r130, %r127, %r128, 20;
	mov.b64 	%rd252, {%r130, %r129};
	not.b64 	%rd253, %rd252;
	and.b64  	%rd254, %rd246, %rd253;
	xor.b64  	%rd255, %rd254, %rd196;
	not.b64 	%rd256, %rd246;
	and.b64  	%rd257, %rd234, %rd256;
	xor.b64  	%rd258, %rd257, %rd252;
	not.b64 	%rd259, %rd234;
	and.b64  	%rd260, %rd240, %rd259;
	xor.b64  	%rd261, %rd260, %rd246;
	not.b64 	%rd262, %rd240;
	and.b64  	%rd263, %rd196, %rd262;
	xor.b64  	%rd264, %rd263, %rd234;
	not.b64 	%rd265, %rd196;
	and.b64  	%rd266, %rd252, %rd265;
	xor.b64  	%rd267, %rd240, %rd266;
	not.b64 	%rd268, %rd251;
	and.b64  	%rd269, %rd230, %rd268;
	xor.b64  	%rd270, %rd269, %rd235;
	not.b64 	%rd271, %rd230;
	and.b64  	%rd272, %rd237, %rd271;
	xor.b64  	%rd273, %rd272, %rd251;
	not.b64 	%rd274, %rd237;
	and.b64  	%rd275, %rd250, %rd274;
	xor.b64  	%rd276, %rd275, %rd230;
	not.b64 	%rd277, %rd250;
	and.b64  	%rd278, %rd235, %rd277;
	xor.b64  	%rd279, %rd278, %rd237;
	not.b64 	%rd280, %rd235;
	and.b64  	%rd281, %rd251, %rd280;
	xor.b64  	%rd282, %rd250, %rd281;
	not.b64 	%rd283, %rd231;
	and.b64  	%rd284, %rd245, %rd283;
	xor.b64  	%rd285, %rd284, %rd229;
	not.b64 	%rd286, %rd245;
	and.b64  	%rd287, %rd244, %rd286;
	xor.b64  	%rd288, %rd287, %rd231;
	not.b64 	%rd289, %rd244;
	and.b64  	%rd290, %rd248, %rd289;
	xor.b64  	%rd291, %rd290, %rd245;
	not.b64 	%rd292, %rd248;
	and.b64  	%rd293, %rd229, %rd292;
	xor.b64  	%rd294, %rd293, %rd244;
	not.b64 	%rd295, %rd229;
	and.b64  	%rd296, %rd231, %rd295;
	xor.b64  	%rd297, %rd248, %rd296;
	not.b64 	%rd298, %rd236;
	and.b64  	%rd299, %rd232, %rd298;
	xor.b64  	%rd300, %rd299, %rd241;
	not.b64 	%rd301, %rd232;
	and.b64  	%rd302, %rd233, %rd301;
	xor.b64  	%rd303, %rd302, %rd236;
	not.b64 	%rd304, %rd233;
	and.b64  	%rd305, %rd243, %rd304;
	xor.b64  	%rd306, %rd305, %rd232;
	not.b64 	%rd307, %rd243;
	and.b64  	%rd308, %rd241, %rd307;
	xor.b64  	%rd309, %rd308, %rd233;
	not.b64 	%rd310, %rd241;
	and.b64  	%rd311, %rd236, %rd310;
	xor.b64  	%rd312, %rd243, %rd311;
	not.b64 	%rd313, %rd238;
	and.b64  	%rd314, %rd249, %rd313;
	xor.b64  	%rd315, %rd314, %rd247;
	not.b64 	%rd316, %rd249;
	and.b64  	%rd317, %rd242, %rd316;
	xor.b64  	%rd318, %rd317, %rd238;
	not.b64 	%rd319, %rd242;
	and.b64  	%rd320, %rd239, %rd319;
	xor.b64  	%rd321, %rd320, %rd249;
	not.b64 	%rd322, %rd239;
	and.b64  	%rd323, %rd247, %rd322;
	xor.b64  	%rd324, %rd323, %rd242;
	not.b64 	%rd325, %rd247;
	and.b64  	%rd326, %rd238, %rd325;
	xor.b64  	%rd327, %rd239, %rd326;
	ld.global.nc.u64 	%rd328, [%rd2212];
	xor.b64  	%rd329, %rd255, %rd328;
	xor.b64  	%rd330, %rd270, %rd329;
	xor.b64  	%rd331, %rd330, %rd285;
	xor.b64  	%rd332, %rd331, %rd300;
	xor.b64  	%rd333, %rd332, %rd315;
	xor.b64  	%rd334, %rd273, %rd258;
	xor.b64  	%rd335, %rd334, %rd288;
	xor.b64  	%rd336, %rd335, %rd303;
	xor.b64  	%rd337, %rd336, %rd318;
	xor.b64  	%rd338, %rd276, %rd261;
	xor.b64  	%rd339, %rd338, %rd291;
	xor.b64  	%rd340, %rd339, %rd306;
	xor.b64  	%rd341, %rd340, %rd321;
	xor.b64  	%rd342, %rd279, %rd264;
	xor.b64  	%rd343, %rd342, %rd294;
	xor.b64  	%rd344, %rd343, %rd309;
	xor.b64  	%rd345, %rd344, %rd324;
	xor.b64  	%rd346, %rd282, %rd267;
	xor.b64  	%rd347, %rd346, %rd297;
	xor.b64  	%rd348, %rd347, %rd312;
	xor.b64  	%rd349, %rd348, %rd327;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r131}, %rd337;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r132,%dummy}, %rd337;
	}
	shf.l.wrap.b32 	%r133, %r132, %r131, 1;
	shf.l.wrap.b32 	%r134, %r131, %r132, 1;
	mov.b64 	%rd350, {%r134, %r133};
	xor.b64  	%rd351, %rd349, %rd350;
	xor.b64  	%rd352, %rd351, %rd329;
	xor.b64  	%rd353, %rd270, %rd351;
	xor.b64  	%rd354, %rd285, %rd351;
	xor.b64  	%rd355, %rd300, %rd351;
	xor.b64  	%rd356, %rd315, %rd351;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r135}, %rd341;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r136,%dummy}, %rd341;
	}
	shf.l.wrap.b32 	%r137, %r136, %r135, 1;
	shf.l.wrap.b32 	%r138, %r135, %r136, 1;
	mov.b64 	%rd357, {%r138, %r137};
	xor.b64  	%rd358, %rd357, %rd333;
	xor.b64  	%rd359, %rd258, %rd358;
	xor.b64  	%rd360, %rd273, %rd358;
	xor.b64  	%rd361, %rd288, %rd358;
	xor.b64  	%rd362, %rd303, %rd358;
	xor.b64  	%rd363, %rd318, %rd358;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r139}, %rd345;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r140,%dummy}, %rd345;
	}
	shf.l.wrap.b32 	%r141, %r140, %r139, 1;
	shf.l.wrap.b32 	%r142, %r139, %r140, 1;
	mov.b64 	%rd364, {%r142, %r141};
	xor.b64  	%rd365, %rd364, %rd337;
	xor.b64  	%rd366, %rd261, %rd365;
	xor.b64  	%rd367, %rd276, %rd365;
	xor.b64  	%rd368, %rd291, %rd365;
	xor.b64  	%rd369, %rd306, %rd365;
	xor.b64  	%rd370, %rd321, %rd365;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r143}, %rd349;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r144,%dummy}, %rd349;
	}
	shf.l.wrap.b32 	%r145, %r144, %r143, 1;
	shf.l.wrap.b32 	%r146, %r143, %r144, 1;
	mov.b64 	%rd371, {%r146, %r145};
	xor.b64  	%rd372, %rd371, %rd341;
	xor.b64  	%rd373, %rd264, %rd372;
	xor.b64  	%rd374, %rd279, %rd372;
	xor.b64  	%rd375, %rd294, %rd372;
	xor.b64  	%rd376, %rd309, %rd372;
	xor.b64  	%rd377, %rd324, %rd372;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r147}, %rd333;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r148,%dummy}, %rd333;
	}
	shf.l.wrap.b32 	%r149, %r148, %r147, 1;
	shf.l.wrap.b32 	%r150, %r147, %r148, 1;
	mov.b64 	%rd378, {%r150, %r149};
	xor.b64  	%rd379, %rd345, %rd378;
	xor.b64  	%rd380, %rd267, %rd379;
	xor.b64  	%rd381, %rd282, %rd379;
	xor.b64  	%rd382, %rd297, %rd379;
	xor.b64  	%rd383, %rd312, %rd379;
	xor.b64  	%rd384, %rd327, %rd379;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r151}, %rd359;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r152,%dummy}, %rd359;
	}
	shf.l.wrap.b32 	%r153, %r152, %r151, 1;
	shf.l.wrap.b32 	%r154, %r151, %r152, 1;
	mov.b64 	%rd385, {%r154, %r153};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r155}, %rd354;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r156,%dummy}, %rd354;
	}
	shf.l.wrap.b32 	%r157, %r156, %r155, 3;
	shf.l.wrap.b32 	%r158, %r155, %r156, 3;
	mov.b64 	%rd386, {%r158, %r157};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r159}, %rd367;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r160,%dummy}, %rd367;
	}
	shf.l.wrap.b32 	%r161, %r160, %r159, 6;
	shf.l.wrap.b32 	%r162, %r159, %r160, 6;
	mov.b64 	%rd387, {%r162, %r161};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r163}, %rd361;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r164,%dummy}, %rd361;
	}
	shf.l.wrap.b32 	%r165, %r164, %r163, 10;
	shf.l.wrap.b32 	%r166, %r163, %r164, 10;
	mov.b64 	%rd388, {%r166, %r165};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r167}, %rd369;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r168,%dummy}, %rd369;
	}
	shf.l.wrap.b32 	%r169, %r168, %r167, 15;
	shf.l.wrap.b32 	%r170, %r167, %r168, 15;
	mov.b64 	%rd389, {%r170, %r169};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r171}, %rd376;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r172,%dummy}, %rd376;
	}
	shf.l.wrap.b32 	%r173, %r172, %r171, 21;
	shf.l.wrap.b32 	%r174, %r171, %r172, 21;
	mov.b64 	%rd390, {%r174, %r173};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r175}, %rd373;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r176,%dummy}, %rd373;
	}
	shf.l.wrap.b32 	%r177, %r176, %r175, 28;
	shf.l.wrap.b32 	%r178, %r175, %r176, 28;
	mov.b64 	%rd391, {%r178, %r177};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r179,%dummy}, %rd353;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r180}, %rd353;
	}
	shf.r.wrap.b32 	%r181, %r180, %r179, 28;
	shf.r.wrap.b32 	%r182, %r179, %r180, 28;
	mov.b64 	%rd392, {%r182, %r181};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r183,%dummy}, %rd362;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r184}, %rd362;
	}
	shf.r.wrap.b32 	%r185, %r184, %r183, 19;
	shf.r.wrap.b32 	%r186, %r183, %r184, 19;
	mov.b64 	%rd393, {%r186, %r185};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r187,%dummy}, %rd374;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r188}, %rd374;
	}
	shf.r.wrap.b32 	%r189, %r188, %r187, 9;
	shf.r.wrap.b32 	%r190, %r187, %r188, 9;
	mov.b64 	%rd394, {%r190, %r189};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r191}, %rd363;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r192,%dummy}, %rd363;
	}
	shf.l.wrap.b32 	%r193, %r192, %r191, 2;
	shf.l.wrap.b32 	%r194, %r191, %r192, 2;
	mov.b64 	%rd395, {%r194, %r193};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r195}, %rd384;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r196,%dummy}, %rd384;
	}
	shf.l.wrap.b32 	%r197, %r196, %r195, 14;
	shf.l.wrap.b32 	%r198, %r195, %r196, 14;
	mov.b64 	%rd396, {%r198, %r197};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r199}, %rd380;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r200,%dummy}, %rd380;
	}
	shf.l.wrap.b32 	%r201, %r200, %r199, 27;
	shf.l.wrap.b32 	%r202, %r199, %r200, 27;
	mov.b64 	%rd397, {%r202, %r201};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r203,%dummy}, %rd355;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r204}, %rd355;
	}
	shf.r.wrap.b32 	%r205, %r204, %r203, 23;
	shf.r.wrap.b32 	%r206, %r203, %r204, 23;
	mov.b64 	%rd398, {%r206, %r205};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r207,%dummy}, %rd377;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r208}, %rd377;
	}
	shf.r.wrap.b32 	%r209, %r208, %r207, 8;
	shf.r.wrap.b32 	%r210, %r207, %r208, 8;
	mov.b64 	%rd399, {%r210, %r209};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r211}, %rd383;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r212,%dummy}, %rd383;
	}
	shf.l.wrap.b32 	%r213, %r212, %r211, 8;
	shf.l.wrap.b32 	%r214, %r211, %r212, 8;
	mov.b64 	%rd400, {%r214, %r213};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r215}, %rd375;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r216,%dummy}, %rd375;
	}
	shf.l.wrap.b32 	%r217, %r216, %r215, 25;
	shf.l.wrap.b32 	%r218, %r215, %r216, 25;
	mov.b64 	%rd401, {%r218, %r217};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r219,%dummy}, %rd368;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r220}, %rd368;
	}
	shf.r.wrap.b32 	%r221, %r220, %r219, 21;
	shf.r.wrap.b32 	%r222, %r219, %r220, 21;
	mov.b64 	%rd402, {%r222, %r221};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r223,%dummy}, %rd366;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r224}, %rd366;
	}
	shf.r.wrap.b32 	%r225, %r224, %r223, 2;
	shf.r.wrap.b32 	%r226, %r223, %r224, 2;
	mov.b64 	%rd403, {%r226, %r225};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r227}, %rd356;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r228,%dummy}, %rd356;
	}
	shf.l.wrap.b32 	%r229, %r228, %r227, 18;
	shf.l.wrap.b32 	%r230, %r227, %r228, 18;
	mov.b64 	%rd404, {%r230, %r229};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r231,%dummy}, %rd382;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r232}, %rd382;
	}
	shf.r.wrap.b32 	%r233, %r232, %r231, 25;
	shf.r.wrap.b32 	%r234, %r231, %r232, 25;
	mov.b64 	%rd405, {%r234, %r233};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r235,%dummy}, %rd370;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r236}, %rd370;
	}
	shf.r.wrap.b32 	%r237, %r236, %r235, 3;
	shf.r.wrap.b32 	%r238, %r235, %r236, 3;
	mov.b64 	%rd406, {%r238, %r237};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r239}, %rd381;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r240,%dummy}, %rd381;
	}
	shf.l.wrap.b32 	%r241, %r240, %r239, 20;
	shf.l.wrap.b32 	%r242, %r239, %r240, 20;
	mov.b64 	%rd407, {%r242, %r241};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r243,%dummy}, %rd360;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r244}, %rd360;
	}
	shf.r.wrap.b32 	%r245, %r244, %r243, 20;
	shf.r.wrap.b32 	%r246, %r243, %r244, 20;
	mov.b64 	%rd408, {%r246, %r245};
	not.b64 	%rd409, %rd408;
	and.b64  	%rd410, %rd402, %rd409;
	xor.b64  	%rd411, %rd410, %rd352;
	not.b64 	%rd412, %rd402;
	and.b64  	%rd413, %rd390, %rd412;
	xor.b64  	%rd414, %rd413, %rd408;
	not.b64 	%rd415, %rd390;
	and.b64  	%rd416, %rd396, %rd415;
	xor.b64  	%rd417, %rd416, %rd402;
	not.b64 	%rd418, %rd396;
	and.b64  	%rd419, %rd352, %rd418;
	xor.b64  	%rd420, %rd419, %rd390;
	not.b64 	%rd421, %rd352;
	and.b64  	%rd422, %rd408, %rd421;
	xor.b64  	%rd423, %rd396, %rd422;
	not.b64 	%rd424, %rd407;
	and.b64  	%rd425, %rd386, %rd424;
	xor.b64  	%rd426, %rd425, %rd391;
	not.b64 	%rd427, %rd386;
	and.b64  	%rd428, %rd393, %rd427;
	xor.b64  	%rd429, %rd428, %rd407;
	not.b64 	%rd430, %rd393;
	and.b64  	%rd431, %rd406, %rd430;
	xor.b64  	%rd432, %rd431, %rd386;
	not.b64 	%rd433, %rd406;
	and.b64  	%rd434, %rd391, %rd433;
	xor.b64  	%rd435, %rd434, %rd393;
	not.b64 	%rd436, %rd391;
	and.b64  	%rd437, %rd407, %rd436;
	xor.b64  	%rd438, %rd406, %rd437;
	not.b64 	%rd439, %rd387;
	and.b64  	%rd440, %rd401, %rd439;
	xor.b64  	%rd441, %rd440, %rd385;
	not.b64 	%rd442, %rd401;
	and.b64  	%rd443, %rd400, %rd442;
	xor.b64  	%rd444, %rd443, %rd387;
	not.b64 	%rd445, %rd400;
	and.b64  	%rd446, %rd404, %rd445;
	xor.b64  	%rd447, %rd446, %rd401;
	not.b64 	%rd448, %rd404;
	and.b64  	%rd449, %rd385, %rd448;
	xor.b64  	%rd450, %rd449, %rd400;
	not.b64 	%rd451, %rd385;
	and.b64  	%rd452, %rd387, %rd451;
	xor.b64  	%rd453, %rd404, %rd452;
	not.b64 	%rd454, %rd392;
	and.b64  	%rd455, %rd388, %rd454;
	xor.b64  	%rd456, %rd455, %rd397;
	not.b64 	%rd457, %rd388;
	and.b64  	%rd458, %rd389, %rd457;
	xor.b64  	%rd459, %rd458, %rd392;
	not.b64 	%rd460, %rd389;
	and.b64  	%rd461, %rd399, %rd460;
	xor.b64  	%rd462, %rd461, %rd388;
	not.b64 	%rd463, %rd399;
	and.b64  	%rd464, %rd397, %rd463;
	xor.b64  	%rd465, %rd464, %rd389;
	not.b64 	%rd466, %rd397;
	and.b64  	%rd467, %rd392, %rd466;
	xor.b64  	%rd468, %rd399, %rd467;
	not.b64 	%rd469, %rd394;
	and.b64  	%rd470, %rd405, %rd469;
	xor.b64  	%rd471, %rd470, %rd403;
	not.b64 	%rd472, %rd405;
	and.b64  	%rd473, %rd398, %rd472;
	xor.b64  	%rd474, %rd473, %rd394;
	not.b64 	%rd475, %rd398;
	and.b64  	%rd476, %rd395, %rd475;
	xor.b64  	%rd477, %rd476, %rd405;
	not.b64 	%rd478, %rd395;
	and.b64  	%rd479, %rd403, %rd478;
	xor.b64  	%rd480, %rd479, %rd398;
	not.b64 	%rd481, %rd403;
	and.b64  	%rd482, %rd394, %rd481;
	xor.b64  	%rd483, %rd395, %rd482;
	ld.global.nc.u64 	%rd484, [%rd2212+8];
	xor.b64  	%rd485, %rd411, %rd484;
	xor.b64  	%rd486, %rd426, %rd485;
	xor.b64  	%rd487, %rd486, %rd441;
	xor.b64  	%rd488, %rd487, %rd456;
	xor.b64  	%rd489, %rd488, %rd471;
	xor.b64  	%rd490, %rd429, %rd414;
	xor.b64  	%rd491, %rd490, %rd444;
	xor.b64  	%rd492, %rd491, %rd459;
	xor.b64  	%rd493, %rd492, %rd474;
	xor.b64  	%rd494, %rd432, %rd417;
	xor.b64  	%rd495, %rd494, %rd447;
	xor.b64  	%rd496, %rd495, %rd462;
	xor.b64  	%rd497, %rd496, %rd477;
	xor.b64  	%rd498, %rd435, %rd420;
	xor.b64  	%rd499, %rd498, %rd450;
	xor.b64  	%rd500, %rd499, %rd465;
	xor.b64  	%rd501, %rd500, %rd480;
	xor.b64  	%rd502, %rd438, %rd423;
	xor.b64  	%rd503, %rd502, %rd453;
	xor.b64  	%rd504, %rd503, %rd468;
	xor.b64  	%rd505, %rd504, %rd483;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r247}, %rd493;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r248,%dummy}, %rd493;
	}
	shf.l.wrap.b32 	%r249, %r248, %r247, 1;
	shf.l.wrap.b32 	%r250, %r247, %r248, 1;
	mov.b64 	%rd506, {%r250, %r249};
	xor.b64  	%rd507, %rd505, %rd506;
	xor.b64  	%rd508, %rd507, %rd485;
	xor.b64  	%rd509, %rd426, %rd507;
	xor.b64  	%rd510, %rd441, %rd507;
	xor.b64  	%rd511, %rd456, %rd507;
	xor.b64  	%rd512, %rd471, %rd507;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r251}, %rd497;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r252,%dummy}, %rd497;
	}
	shf.l.wrap.b32 	%r253, %r252, %r251, 1;
	shf.l.wrap.b32 	%r254, %r251, %r252, 1;
	mov.b64 	%rd513, {%r254, %r253};
	xor.b64  	%rd514, %rd513, %rd489;
	xor.b64  	%rd515, %rd414, %rd514;
	xor.b64  	%rd516, %rd429, %rd514;
	xor.b64  	%rd517, %rd444, %rd514;
	xor.b64  	%rd518, %rd459, %rd514;
	xor.b64  	%rd519, %rd474, %rd514;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r255}, %rd501;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r256,%dummy}, %rd501;
	}
	shf.l.wrap.b32 	%r257, %r256, %r255, 1;
	shf.l.wrap.b32 	%r258, %r255, %r256, 1;
	mov.b64 	%rd520, {%r258, %r257};
	xor.b64  	%rd521, %rd520, %rd493;
	xor.b64  	%rd522, %rd417, %rd521;
	xor.b64  	%rd523, %rd432, %rd521;
	xor.b64  	%rd524, %rd447, %rd521;
	xor.b64  	%rd525, %rd462, %rd521;
	xor.b64  	%rd526, %rd477, %rd521;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r259}, %rd505;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r260,%dummy}, %rd505;
	}
	shf.l.wrap.b32 	%r261, %r260, %r259, 1;
	shf.l.wrap.b32 	%r262, %r259, %r260, 1;
	mov.b64 	%rd527, {%r262, %r261};
	xor.b64  	%rd528, %rd527, %rd497;
	xor.b64  	%rd529, %rd420, %rd528;
	xor.b64  	%rd530, %rd435, %rd528;
	xor.b64  	%rd531, %rd450, %rd528;
	xor.b64  	%rd532, %rd465, %rd528;
	xor.b64  	%rd533, %rd480, %rd528;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r263}, %rd489;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r264,%dummy}, %rd489;
	}
	shf.l.wrap.b32 	%r265, %r264, %r263, 1;
	shf.l.wrap.b32 	%r266, %r263, %r264, 1;
	mov.b64 	%rd534, {%r266, %r265};
	xor.b64  	%rd535, %rd501, %rd534;
	xor.b64  	%rd536, %rd423, %rd535;
	xor.b64  	%rd537, %rd438, %rd535;
	xor.b64  	%rd538, %rd453, %rd535;
	xor.b64  	%rd539, %rd468, %rd535;
	xor.b64  	%rd540, %rd483, %rd535;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r267}, %rd515;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r268,%dummy}, %rd515;
	}
	shf.l.wrap.b32 	%r269, %r268, %r267, 1;
	shf.l.wrap.b32 	%r270, %r267, %r268, 1;
	mov.b64 	%rd541, {%r270, %r269};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r271}, %rd510;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r272,%dummy}, %rd510;
	}
	shf.l.wrap.b32 	%r273, %r272, %r271, 3;
	shf.l.wrap.b32 	%r274, %r271, %r272, 3;
	mov.b64 	%rd542, {%r274, %r273};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r275}, %rd523;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r276,%dummy}, %rd523;
	}
	shf.l.wrap.b32 	%r277, %r276, %r275, 6;
	shf.l.wrap.b32 	%r278, %r275, %r276, 6;
	mov.b64 	%rd543, {%r278, %r277};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r279}, %rd517;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r280,%dummy}, %rd517;
	}
	shf.l.wrap.b32 	%r281, %r280, %r279, 10;
	shf.l.wrap.b32 	%r282, %r279, %r280, 10;
	mov.b64 	%rd544, {%r282, %r281};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r283}, %rd525;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r284,%dummy}, %rd525;
	}
	shf.l.wrap.b32 	%r285, %r284, %r283, 15;
	shf.l.wrap.b32 	%r286, %r283, %r284, 15;
	mov.b64 	%rd545, {%r286, %r285};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r287}, %rd532;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r288,%dummy}, %rd532;
	}
	shf.l.wrap.b32 	%r289, %r288, %r287, 21;
	shf.l.wrap.b32 	%r290, %r287, %r288, 21;
	mov.b64 	%rd546, {%r290, %r289};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r291}, %rd529;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r292,%dummy}, %rd529;
	}
	shf.l.wrap.b32 	%r293, %r292, %r291, 28;
	shf.l.wrap.b32 	%r294, %r291, %r292, 28;
	mov.b64 	%rd547, {%r294, %r293};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r295,%dummy}, %rd509;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r296}, %rd509;
	}
	shf.r.wrap.b32 	%r297, %r296, %r295, 28;
	shf.r.wrap.b32 	%r298, %r295, %r296, 28;
	mov.b64 	%rd548, {%r298, %r297};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r299,%dummy}, %rd518;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r300}, %rd518;
	}
	shf.r.wrap.b32 	%r301, %r300, %r299, 19;
	shf.r.wrap.b32 	%r302, %r299, %r300, 19;
	mov.b64 	%rd549, {%r302, %r301};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r303,%dummy}, %rd530;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r304}, %rd530;
	}
	shf.r.wrap.b32 	%r305, %r304, %r303, 9;
	shf.r.wrap.b32 	%r306, %r303, %r304, 9;
	mov.b64 	%rd550, {%r306, %r305};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r307}, %rd519;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r308,%dummy}, %rd519;
	}
	shf.l.wrap.b32 	%r309, %r308, %r307, 2;
	shf.l.wrap.b32 	%r310, %r307, %r308, 2;
	mov.b64 	%rd551, {%r310, %r309};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r311}, %rd540;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r312,%dummy}, %rd540;
	}
	shf.l.wrap.b32 	%r313, %r312, %r311, 14;
	shf.l.wrap.b32 	%r314, %r311, %r312, 14;
	mov.b64 	%rd552, {%r314, %r313};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r315}, %rd536;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r316,%dummy}, %rd536;
	}
	shf.l.wrap.b32 	%r317, %r316, %r315, 27;
	shf.l.wrap.b32 	%r318, %r315, %r316, 27;
	mov.b64 	%rd553, {%r318, %r317};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r319,%dummy}, %rd511;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r320}, %rd511;
	}
	shf.r.wrap.b32 	%r321, %r320, %r319, 23;
	shf.r.wrap.b32 	%r322, %r319, %r320, 23;
	mov.b64 	%rd554, {%r322, %r321};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r323,%dummy}, %rd533;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r324}, %rd533;
	}
	shf.r.wrap.b32 	%r325, %r324, %r323, 8;
	shf.r.wrap.b32 	%r326, %r323, %r324, 8;
	mov.b64 	%rd555, {%r326, %r325};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r327}, %rd539;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r328,%dummy}, %rd539;
	}
	shf.l.wrap.b32 	%r329, %r328, %r327, 8;
	shf.l.wrap.b32 	%r330, %r327, %r328, 8;
	mov.b64 	%rd556, {%r330, %r329};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r331}, %rd531;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r332,%dummy}, %rd531;
	}
	shf.l.wrap.b32 	%r333, %r332, %r331, 25;
	shf.l.wrap.b32 	%r334, %r331, %r332, 25;
	mov.b64 	%rd557, {%r334, %r333};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r335,%dummy}, %rd524;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r336}, %rd524;
	}
	shf.r.wrap.b32 	%r337, %r336, %r335, 21;
	shf.r.wrap.b32 	%r338, %r335, %r336, 21;
	mov.b64 	%rd558, {%r338, %r337};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r339,%dummy}, %rd522;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r340}, %rd522;
	}
	shf.r.wrap.b32 	%r341, %r340, %r339, 2;
	shf.r.wrap.b32 	%r342, %r339, %r340, 2;
	mov.b64 	%rd559, {%r342, %r341};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r343}, %rd512;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r344,%dummy}, %rd512;
	}
	shf.l.wrap.b32 	%r345, %r344, %r343, 18;
	shf.l.wrap.b32 	%r346, %r343, %r344, 18;
	mov.b64 	%rd560, {%r346, %r345};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r347,%dummy}, %rd538;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r348}, %rd538;
	}
	shf.r.wrap.b32 	%r349, %r348, %r347, 25;
	shf.r.wrap.b32 	%r350, %r347, %r348, 25;
	mov.b64 	%rd561, {%r350, %r349};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r351,%dummy}, %rd526;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r352}, %rd526;
	}
	shf.r.wrap.b32 	%r353, %r352, %r351, 3;
	shf.r.wrap.b32 	%r354, %r351, %r352, 3;
	mov.b64 	%rd562, {%r354, %r353};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r355}, %rd537;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r356,%dummy}, %rd537;
	}
	shf.l.wrap.b32 	%r357, %r356, %r355, 20;
	shf.l.wrap.b32 	%r358, %r355, %r356, 20;
	mov.b64 	%rd563, {%r358, %r357};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r359,%dummy}, %rd516;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r360}, %rd516;
	}
	shf.r.wrap.b32 	%r361, %r360, %r359, 20;
	shf.r.wrap.b32 	%r362, %r359, %r360, 20;
	mov.b64 	%rd564, {%r362, %r361};
	not.b64 	%rd565, %rd564;
	and.b64  	%rd566, %rd558, %rd565;
	xor.b64  	%rd567, %rd566, %rd508;
	not.b64 	%rd568, %rd558;
	and.b64  	%rd569, %rd546, %rd568;
	xor.b64  	%rd570, %rd569, %rd564;
	not.b64 	%rd571, %rd546;
	and.b64  	%rd572, %rd552, %rd571;
	xor.b64  	%rd573, %rd572, %rd558;
	not.b64 	%rd574, %rd552;
	and.b64  	%rd575, %rd508, %rd574;
	xor.b64  	%rd576, %rd575, %rd546;
	not.b64 	%rd577, %rd508;
	and.b64  	%rd578, %rd564, %rd577;
	xor.b64  	%rd579, %rd552, %rd578;
	not.b64 	%rd580, %rd563;
	and.b64  	%rd581, %rd542, %rd580;
	xor.b64  	%rd582, %rd581, %rd547;
	not.b64 	%rd583, %rd542;
	and.b64  	%rd584, %rd549, %rd583;
	xor.b64  	%rd585, %rd584, %rd563;
	not.b64 	%rd586, %rd549;
	and.b64  	%rd587, %rd562, %rd586;
	xor.b64  	%rd588, %rd587, %rd542;
	not.b64 	%rd589, %rd562;
	and.b64  	%rd590, %rd547, %rd589;
	xor.b64  	%rd591, %rd590, %rd549;
	not.b64 	%rd592, %rd547;
	and.b64  	%rd593, %rd563, %rd592;
	xor.b64  	%rd594, %rd562, %rd593;
	not.b64 	%rd595, %rd543;
	and.b64  	%rd596, %rd557, %rd595;
	xor.b64  	%rd597, %rd596, %rd541;
	not.b64 	%rd598, %rd557;
	and.b64  	%rd599, %rd556, %rd598;
	xor.b64  	%rd600, %rd599, %rd543;
	not.b64 	%rd601, %rd556;
	and.b64  	%rd602, %rd560, %rd601;
	xor.b64  	%rd603, %rd602, %rd557;
	not.b64 	%rd604, %rd560;
	and.b64  	%rd605, %rd541, %rd604;
	xor.b64  	%rd606, %rd605, %rd556;
	not.b64 	%rd607, %rd541;
	and.b64  	%rd608, %rd543, %rd607;
	xor.b64  	%rd609, %rd560, %rd608;
	not.b64 	%rd610, %rd548;
	and.b64  	%rd611, %rd544, %rd610;
	xor.b64  	%rd612, %rd611, %rd553;
	not.b64 	%rd613, %rd544;
	and.b64  	%rd614, %rd545, %rd613;
	xor.b64  	%rd615, %rd614, %rd548;
	not.b64 	%rd616, %rd545;
	and.b64  	%rd617, %rd555, %rd616;
	xor.b64  	%rd618, %rd617, %rd544;
	not.b64 	%rd619, %rd555;
	and.b64  	%rd620, %rd553, %rd619;
	xor.b64  	%rd621, %rd620, %rd545;
	not.b64 	%rd622, %rd553;
	and.b64  	%rd623, %rd548, %rd622;
	xor.b64  	%rd624, %rd555, %rd623;
	not.b64 	%rd625, %rd550;
	and.b64  	%rd626, %rd561, %rd625;
	xor.b64  	%rd627, %rd626, %rd559;
	not.b64 	%rd628, %rd561;
	and.b64  	%rd629, %rd554, %rd628;
	xor.b64  	%rd630, %rd629, %rd550;
	not.b64 	%rd631, %rd554;
	and.b64  	%rd632, %rd551, %rd631;
	xor.b64  	%rd633, %rd632, %rd561;
	not.b64 	%rd634, %rd551;
	and.b64  	%rd635, %rd559, %rd634;
	xor.b64  	%rd636, %rd635, %rd554;
	not.b64 	%rd637, %rd559;
	and.b64  	%rd638, %rd550, %rd637;
	xor.b64  	%rd639, %rd551, %rd638;
	ld.global.nc.u64 	%rd640, [%rd2212+16];
	xor.b64  	%rd641, %rd567, %rd640;
	xor.b64  	%rd642, %rd582, %rd641;
	xor.b64  	%rd643, %rd642, %rd597;
	xor.b64  	%rd644, %rd643, %rd612;
	xor.b64  	%rd645, %rd644, %rd627;
	xor.b64  	%rd646, %rd585, %rd570;
	xor.b64  	%rd647, %rd646, %rd600;
	xor.b64  	%rd648, %rd647, %rd615;
	xor.b64  	%rd649, %rd648, %rd630;
	xor.b64  	%rd650, %rd588, %rd573;
	xor.b64  	%rd651, %rd650, %rd603;
	xor.b64  	%rd652, %rd651, %rd618;
	xor.b64  	%rd653, %rd652, %rd633;
	xor.b64  	%rd654, %rd591, %rd576;
	xor.b64  	%rd655, %rd654, %rd606;
	xor.b64  	%rd656, %rd655, %rd621;
	xor.b64  	%rd657, %rd656, %rd636;
	xor.b64  	%rd658, %rd594, %rd579;
	xor.b64  	%rd659, %rd658, %rd609;
	xor.b64  	%rd660, %rd659, %rd624;
	xor.b64  	%rd661, %rd660, %rd639;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r363}, %rd649;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r364,%dummy}, %rd649;
	}
	shf.l.wrap.b32 	%r365, %r364, %r363, 1;
	shf.l.wrap.b32 	%r366, %r363, %r364, 1;
	mov.b64 	%rd662, {%r366, %r365};
	xor.b64  	%rd663, %rd661, %rd662;
	xor.b64  	%rd664, %rd663, %rd641;
	xor.b64  	%rd665, %rd582, %rd663;
	xor.b64  	%rd666, %rd597, %rd663;
	xor.b64  	%rd667, %rd612, %rd663;
	xor.b64  	%rd668, %rd627, %rd663;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r367}, %rd653;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r368,%dummy}, %rd653;
	}
	shf.l.wrap.b32 	%r369, %r368, %r367, 1;
	shf.l.wrap.b32 	%r370, %r367, %r368, 1;
	mov.b64 	%rd669, {%r370, %r369};
	xor.b64  	%rd670, %rd669, %rd645;
	xor.b64  	%rd671, %rd570, %rd670;
	xor.b64  	%rd672, %rd585, %rd670;
	xor.b64  	%rd673, %rd600, %rd670;
	xor.b64  	%rd674, %rd615, %rd670;
	xor.b64  	%rd675, %rd630, %rd670;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r371}, %rd657;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r372,%dummy}, %rd657;
	}
	shf.l.wrap.b32 	%r373, %r372, %r371, 1;
	shf.l.wrap.b32 	%r374, %r371, %r372, 1;
	mov.b64 	%rd676, {%r374, %r373};
	xor.b64  	%rd677, %rd676, %rd649;
	xor.b64  	%rd678, %rd573, %rd677;
	xor.b64  	%rd679, %rd588, %rd677;
	xor.b64  	%rd680, %rd603, %rd677;
	xor.b64  	%rd681, %rd618, %rd677;
	xor.b64  	%rd682, %rd633, %rd677;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r375}, %rd661;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r376,%dummy}, %rd661;
	}
	shf.l.wrap.b32 	%r377, %r376, %r375, 1;
	shf.l.wrap.b32 	%r378, %r375, %r376, 1;
	mov.b64 	%rd683, {%r378, %r377};
	xor.b64  	%rd684, %rd683, %rd653;
	xor.b64  	%rd685, %rd576, %rd684;
	xor.b64  	%rd686, %rd591, %rd684;
	xor.b64  	%rd687, %rd606, %rd684;
	xor.b64  	%rd688, %rd621, %rd684;
	xor.b64  	%rd689, %rd636, %rd684;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r379}, %rd645;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r380,%dummy}, %rd645;
	}
	shf.l.wrap.b32 	%r381, %r380, %r379, 1;
	shf.l.wrap.b32 	%r382, %r379, %r380, 1;
	mov.b64 	%rd690, {%r382, %r381};
	xor.b64  	%rd691, %rd657, %rd690;
	xor.b64  	%rd692, %rd579, %rd691;
	xor.b64  	%rd693, %rd594, %rd691;
	xor.b64  	%rd694, %rd609, %rd691;
	xor.b64  	%rd695, %rd624, %rd691;
	xor.b64  	%rd696, %rd639, %rd691;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r383}, %rd671;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r384,%dummy}, %rd671;
	}
	shf.l.wrap.b32 	%r385, %r384, %r383, 1;
	shf.l.wrap.b32 	%r386, %r383, %r384, 1;
	mov.b64 	%rd697, {%r386, %r385};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r387}, %rd666;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r388,%dummy}, %rd666;
	}
	shf.l.wrap.b32 	%r389, %r388, %r387, 3;
	shf.l.wrap.b32 	%r390, %r387, %r388, 3;
	mov.b64 	%rd698, {%r390, %r389};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r391}, %rd679;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r392,%dummy}, %rd679;
	}
	shf.l.wrap.b32 	%r393, %r392, %r391, 6;
	shf.l.wrap.b32 	%r394, %r391, %r392, 6;
	mov.b64 	%rd699, {%r394, %r393};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r395}, %rd673;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r396,%dummy}, %rd673;
	}
	shf.l.wrap.b32 	%r397, %r396, %r395, 10;
	shf.l.wrap.b32 	%r398, %r395, %r396, 10;
	mov.b64 	%rd700, {%r398, %r397};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r399}, %rd681;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r400,%dummy}, %rd681;
	}
	shf.l.wrap.b32 	%r401, %r400, %r399, 15;
	shf.l.wrap.b32 	%r402, %r399, %r400, 15;
	mov.b64 	%rd701, {%r402, %r401};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r403}, %rd688;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r404,%dummy}, %rd688;
	}
	shf.l.wrap.b32 	%r405, %r404, %r403, 21;
	shf.l.wrap.b32 	%r406, %r403, %r404, 21;
	mov.b64 	%rd702, {%r406, %r405};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r407}, %rd685;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r408,%dummy}, %rd685;
	}
	shf.l.wrap.b32 	%r409, %r408, %r407, 28;
	shf.l.wrap.b32 	%r410, %r407, %r408, 28;
	mov.b64 	%rd703, {%r410, %r409};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r411,%dummy}, %rd665;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r412}, %rd665;
	}
	shf.r.wrap.b32 	%r413, %r412, %r411, 28;
	shf.r.wrap.b32 	%r414, %r411, %r412, 28;
	mov.b64 	%rd704, {%r414, %r413};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r415,%dummy}, %rd674;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r416}, %rd674;
	}
	shf.r.wrap.b32 	%r417, %r416, %r415, 19;
	shf.r.wrap.b32 	%r418, %r415, %r416, 19;
	mov.b64 	%rd705, {%r418, %r417};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r419,%dummy}, %rd686;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r420}, %rd686;
	}
	shf.r.wrap.b32 	%r421, %r420, %r419, 9;
	shf.r.wrap.b32 	%r422, %r419, %r420, 9;
	mov.b64 	%rd706, {%r422, %r421};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r423}, %rd675;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r424,%dummy}, %rd675;
	}
	shf.l.wrap.b32 	%r425, %r424, %r423, 2;
	shf.l.wrap.b32 	%r426, %r423, %r424, 2;
	mov.b64 	%rd707, {%r426, %r425};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r427}, %rd696;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r428,%dummy}, %rd696;
	}
	shf.l.wrap.b32 	%r429, %r428, %r427, 14;
	shf.l.wrap.b32 	%r430, %r427, %r428, 14;
	mov.b64 	%rd708, {%r430, %r429};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r431}, %rd692;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r432,%dummy}, %rd692;
	}
	shf.l.wrap.b32 	%r433, %r432, %r431, 27;
	shf.l.wrap.b32 	%r434, %r431, %r432, 27;
	mov.b64 	%rd709, {%r434, %r433};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r435,%dummy}, %rd667;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r436}, %rd667;
	}
	shf.r.wrap.b32 	%r437, %r436, %r435, 23;
	shf.r.wrap.b32 	%r438, %r435, %r436, 23;
	mov.b64 	%rd710, {%r438, %r437};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r439,%dummy}, %rd689;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r440}, %rd689;
	}
	shf.r.wrap.b32 	%r441, %r440, %r439, 8;
	shf.r.wrap.b32 	%r442, %r439, %r440, 8;
	mov.b64 	%rd711, {%r442, %r441};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r443}, %rd695;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r444,%dummy}, %rd695;
	}
	shf.l.wrap.b32 	%r445, %r444, %r443, 8;
	shf.l.wrap.b32 	%r446, %r443, %r444, 8;
	mov.b64 	%rd712, {%r446, %r445};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r447}, %rd687;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r448,%dummy}, %rd687;
	}
	shf.l.wrap.b32 	%r449, %r448, %r447, 25;
	shf.l.wrap.b32 	%r450, %r447, %r448, 25;
	mov.b64 	%rd713, {%r450, %r449};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r451,%dummy}, %rd680;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r452}, %rd680;
	}
	shf.r.wrap.b32 	%r453, %r452, %r451, 21;
	shf.r.wrap.b32 	%r454, %r451, %r452, 21;
	mov.b64 	%rd714, {%r454, %r453};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r455,%dummy}, %rd678;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r456}, %rd678;
	}
	shf.r.wrap.b32 	%r457, %r456, %r455, 2;
	shf.r.wrap.b32 	%r458, %r455, %r456, 2;
	mov.b64 	%rd715, {%r458, %r457};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r459}, %rd668;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r460,%dummy}, %rd668;
	}
	shf.l.wrap.b32 	%r461, %r460, %r459, 18;
	shf.l.wrap.b32 	%r462, %r459, %r460, 18;
	mov.b64 	%rd716, {%r462, %r461};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r463,%dummy}, %rd694;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r464}, %rd694;
	}
	shf.r.wrap.b32 	%r465, %r464, %r463, 25;
	shf.r.wrap.b32 	%r466, %r463, %r464, 25;
	mov.b64 	%rd717, {%r466, %r465};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r467,%dummy}, %rd682;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r468}, %rd682;
	}
	shf.r.wrap.b32 	%r469, %r468, %r467, 3;
	shf.r.wrap.b32 	%r470, %r467, %r468, 3;
	mov.b64 	%rd718, {%r470, %r469};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r471}, %rd693;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r472,%dummy}, %rd693;
	}
	shf.l.wrap.b32 	%r473, %r472, %r471, 20;
	shf.l.wrap.b32 	%r474, %r471, %r472, 20;
	mov.b64 	%rd719, {%r474, %r473};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r475,%dummy}, %rd672;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r476}, %rd672;
	}
	shf.r.wrap.b32 	%r477, %r476, %r475, 20;
	shf.r.wrap.b32 	%r478, %r475, %r476, 20;
	mov.b64 	%rd720, {%r478, %r477};
	not.b64 	%rd721, %rd720;
	and.b64  	%rd722, %rd714, %rd721;
	xor.b64  	%rd723, %rd722, %rd664;
	not.b64 	%rd724, %rd714;
	and.b64  	%rd725, %rd702, %rd724;
	xor.b64  	%rd726, %rd725, %rd720;
	not.b64 	%rd727, %rd702;
	and.b64  	%rd728, %rd708, %rd727;
	xor.b64  	%rd729, %rd728, %rd714;
	not.b64 	%rd730, %rd708;
	and.b64  	%rd731, %rd664, %rd730;
	xor.b64  	%rd732, %rd731, %rd702;
	not.b64 	%rd733, %rd664;
	and.b64  	%rd734, %rd720, %rd733;
	xor.b64  	%rd735, %rd708, %rd734;
	not.b64 	%rd736, %rd719;
	and.b64  	%rd737, %rd698, %rd736;
	xor.b64  	%rd738, %rd737, %rd703;
	not.b64 	%rd739, %rd698;
	and.b64  	%rd740, %rd705, %rd739;
	xor.b64  	%rd741, %rd740, %rd719;
	not.b64 	%rd742, %rd705;
	and.b64  	%rd743, %rd718, %rd742;
	xor.b64  	%rd744, %rd743, %rd698;
	not.b64 	%rd745, %rd718;
	and.b64  	%rd746, %rd703, %rd745;
	xor.b64  	%rd747, %rd746, %rd705;
	not.b64 	%rd748, %rd703;
	and.b64  	%rd749, %rd719, %rd748;
	xor.b64  	%rd750, %rd718, %rd749;
	not.b64 	%rd751, %rd699;
	and.b64  	%rd752, %rd713, %rd751;
	xor.b64  	%rd753, %rd752, %rd697;
	not.b64 	%rd754, %rd713;
	and.b64  	%rd755, %rd712, %rd754;
	xor.b64  	%rd756, %rd755, %rd699;
	not.b64 	%rd757, %rd712;
	and.b64  	%rd758, %rd716, %rd757;
	xor.b64  	%rd759, %rd758, %rd713;
	not.b64 	%rd760, %rd716;
	and.b64  	%rd761, %rd697, %rd760;
	xor.b64  	%rd762, %rd761, %rd712;
	not.b64 	%rd763, %rd697;
	and.b64  	%rd764, %rd699, %rd763;
	xor.b64  	%rd765, %rd716, %rd764;
	not.b64 	%rd766, %rd704;
	and.b64  	%rd767, %rd700, %rd766;
	xor.b64  	%rd768, %rd767, %rd709;
	not.b64 	%rd769, %rd700;
	and.b64  	%rd770, %rd701, %rd769;
	xor.b64  	%rd771, %rd770, %rd704;
	not.b64 	%rd772, %rd701;
	and.b64  	%rd773, %rd711, %rd772;
	xor.b64  	%rd774, %rd773, %rd700;
	not.b64 	%rd775, %rd711;
	and.b64  	%rd776, %rd709, %rd775;
	xor.b64  	%rd777, %rd776, %rd701;
	not.b64 	%rd778, %rd709;
	and.b64  	%rd779, %rd704, %rd778;
	xor.b64  	%rd780, %rd711, %rd779;
	not.b64 	%rd781, %rd706;
	and.b64  	%rd782, %rd717, %rd781;
	xor.b64  	%rd783, %rd782, %rd715;
	not.b64 	%rd784, %rd717;
	and.b64  	%rd785, %rd710, %rd784;
	xor.b64  	%rd786, %rd785, %rd706;
	not.b64 	%rd787, %rd710;
	and.b64  	%rd788, %rd707, %rd787;
	xor.b64  	%rd789, %rd788, %rd717;
	not.b64 	%rd790, %rd707;
	and.b64  	%rd791, %rd715, %rd790;
	xor.b64  	%rd792, %rd791, %rd710;
	not.b64 	%rd793, %rd715;
	and.b64  	%rd794, %rd706, %rd793;
	xor.b64  	%rd795, %rd707, %rd794;
	ld.global.nc.u64 	%rd796, [%rd2212+24];
	xor.b64  	%rd797, %rd723, %rd796;
	xor.b64  	%rd798, %rd738, %rd797;
	xor.b64  	%rd799, %rd798, %rd753;
	xor.b64  	%rd800, %rd799, %rd768;
	xor.b64  	%rd801, %rd800, %rd783;
	xor.b64  	%rd802, %rd741, %rd726;
	xor.b64  	%rd803, %rd802, %rd756;
	xor.b64  	%rd804, %rd803, %rd771;
	xor.b64  	%rd805, %rd804, %rd786;
	xor.b64  	%rd806, %rd744, %rd729;
	xor.b64  	%rd807, %rd806, %rd759;
	xor.b64  	%rd808, %rd807, %rd774;
	xor.b64  	%rd809, %rd808, %rd789;
	xor.b64  	%rd810, %rd747, %rd732;
	xor.b64  	%rd811, %rd810, %rd762;
	xor.b64  	%rd812, %rd811, %rd777;
	xor.b64  	%rd813, %rd812, %rd792;
	xor.b64  	%rd814, %rd750, %rd735;
	xor.b64  	%rd815, %rd814, %rd765;
	xor.b64  	%rd816, %rd815, %rd780;
	xor.b64  	%rd817, %rd816, %rd795;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r479}, %rd805;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r480,%dummy}, %rd805;
	}
	shf.l.wrap.b32 	%r481, %r480, %r479, 1;
	shf.l.wrap.b32 	%r482, %r479, %r480, 1;
	mov.b64 	%rd818, {%r482, %r481};
	xor.b64  	%rd819, %rd817, %rd818;
	xor.b64  	%rd820, %rd819, %rd797;
	xor.b64  	%rd821, %rd738, %rd819;
	xor.b64  	%rd822, %rd753, %rd819;
	xor.b64  	%rd823, %rd768, %rd819;
	xor.b64  	%rd824, %rd783, %rd819;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r483}, %rd809;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r484,%dummy}, %rd809;
	}
	shf.l.wrap.b32 	%r485, %r484, %r483, 1;
	shf.l.wrap.b32 	%r486, %r483, %r484, 1;
	mov.b64 	%rd825, {%r486, %r485};
	xor.b64  	%rd826, %rd825, %rd801;
	xor.b64  	%rd827, %rd726, %rd826;
	xor.b64  	%rd828, %rd741, %rd826;
	xor.b64  	%rd829, %rd756, %rd826;
	xor.b64  	%rd830, %rd771, %rd826;
	xor.b64  	%rd831, %rd786, %rd826;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r487}, %rd813;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r488,%dummy}, %rd813;
	}
	shf.l.wrap.b32 	%r489, %r488, %r487, 1;
	shf.l.wrap.b32 	%r490, %r487, %r488, 1;
	mov.b64 	%rd832, {%r490, %r489};
	xor.b64  	%rd833, %rd832, %rd805;
	xor.b64  	%rd834, %rd729, %rd833;
	xor.b64  	%rd835, %rd744, %rd833;
	xor.b64  	%rd836, %rd759, %rd833;
	xor.b64  	%rd837, %rd774, %rd833;
	xor.b64  	%rd838, %rd789, %rd833;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r491}, %rd817;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r492,%dummy}, %rd817;
	}
	shf.l.wrap.b32 	%r493, %r492, %r491, 1;
	shf.l.wrap.b32 	%r494, %r491, %r492, 1;
	mov.b64 	%rd839, {%r494, %r493};
	xor.b64  	%rd840, %rd839, %rd809;
	xor.b64  	%rd841, %rd732, %rd840;
	xor.b64  	%rd842, %rd747, %rd840;
	xor.b64  	%rd843, %rd762, %rd840;
	xor.b64  	%rd844, %rd777, %rd840;
	xor.b64  	%rd845, %rd792, %rd840;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r495}, %rd801;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r496,%dummy}, %rd801;
	}
	shf.l.wrap.b32 	%r497, %r496, %r495, 1;
	shf.l.wrap.b32 	%r498, %r495, %r496, 1;
	mov.b64 	%rd846, {%r498, %r497};
	xor.b64  	%rd847, %rd813, %rd846;
	xor.b64  	%rd848, %rd735, %rd847;
	xor.b64  	%rd849, %rd750, %rd847;
	xor.b64  	%rd850, %rd765, %rd847;
	xor.b64  	%rd851, %rd780, %rd847;
	xor.b64  	%rd852, %rd795, %rd847;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r499}, %rd827;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r500,%dummy}, %rd827;
	}
	shf.l.wrap.b32 	%r501, %r500, %r499, 1;
	shf.l.wrap.b32 	%r502, %r499, %r500, 1;
	mov.b64 	%rd853, {%r502, %r501};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r503}, %rd822;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r504,%dummy}, %rd822;
	}
	shf.l.wrap.b32 	%r505, %r504, %r503, 3;
	shf.l.wrap.b32 	%r506, %r503, %r504, 3;
	mov.b64 	%rd854, {%r506, %r505};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r507}, %rd835;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r508,%dummy}, %rd835;
	}
	shf.l.wrap.b32 	%r509, %r508, %r507, 6;
	shf.l.wrap.b32 	%r510, %r507, %r508, 6;
	mov.b64 	%rd855, {%r510, %r509};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r511}, %rd829;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r512,%dummy}, %rd829;
	}
	shf.l.wrap.b32 	%r513, %r512, %r511, 10;
	shf.l.wrap.b32 	%r514, %r511, %r512, 10;
	mov.b64 	%rd856, {%r514, %r513};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r515}, %rd837;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r516,%dummy}, %rd837;
	}
	shf.l.wrap.b32 	%r517, %r516, %r515, 15;
	shf.l.wrap.b32 	%r518, %r515, %r516, 15;
	mov.b64 	%rd857, {%r518, %r517};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r519}, %rd844;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r520,%dummy}, %rd844;
	}
	shf.l.wrap.b32 	%r521, %r520, %r519, 21;
	shf.l.wrap.b32 	%r522, %r519, %r520, 21;
	mov.b64 	%rd858, {%r522, %r521};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r523}, %rd841;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r524,%dummy}, %rd841;
	}
	shf.l.wrap.b32 	%r525, %r524, %r523, 28;
	shf.l.wrap.b32 	%r526, %r523, %r524, 28;
	mov.b64 	%rd859, {%r526, %r525};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r527,%dummy}, %rd821;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r528}, %rd821;
	}
	shf.r.wrap.b32 	%r529, %r528, %r527, 28;
	shf.r.wrap.b32 	%r530, %r527, %r528, 28;
	mov.b64 	%rd860, {%r530, %r529};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r531,%dummy}, %rd830;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r532}, %rd830;
	}
	shf.r.wrap.b32 	%r533, %r532, %r531, 19;
	shf.r.wrap.b32 	%r534, %r531, %r532, 19;
	mov.b64 	%rd861, {%r534, %r533};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r535,%dummy}, %rd842;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r536}, %rd842;
	}
	shf.r.wrap.b32 	%r537, %r536, %r535, 9;
	shf.r.wrap.b32 	%r538, %r535, %r536, 9;
	mov.b64 	%rd862, {%r538, %r537};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r539}, %rd831;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r540,%dummy}, %rd831;
	}
	shf.l.wrap.b32 	%r541, %r540, %r539, 2;
	shf.l.wrap.b32 	%r542, %r539, %r540, 2;
	mov.b64 	%rd863, {%r542, %r541};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r543}, %rd852;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r544,%dummy}, %rd852;
	}
	shf.l.wrap.b32 	%r545, %r544, %r543, 14;
	shf.l.wrap.b32 	%r546, %r543, %r544, 14;
	mov.b64 	%rd864, {%r546, %r545};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r547}, %rd848;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r548,%dummy}, %rd848;
	}
	shf.l.wrap.b32 	%r549, %r548, %r547, 27;
	shf.l.wrap.b32 	%r550, %r547, %r548, 27;
	mov.b64 	%rd865, {%r550, %r549};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r551,%dummy}, %rd823;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r552}, %rd823;
	}
	shf.r.wrap.b32 	%r553, %r552, %r551, 23;
	shf.r.wrap.b32 	%r554, %r551, %r552, 23;
	mov.b64 	%rd866, {%r554, %r553};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r555,%dummy}, %rd845;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r556}, %rd845;
	}
	shf.r.wrap.b32 	%r557, %r556, %r555, 8;
	shf.r.wrap.b32 	%r558, %r555, %r556, 8;
	mov.b64 	%rd867, {%r558, %r557};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r559}, %rd851;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r560,%dummy}, %rd851;
	}
	shf.l.wrap.b32 	%r561, %r560, %r559, 8;
	shf.l.wrap.b32 	%r562, %r559, %r560, 8;
	mov.b64 	%rd868, {%r562, %r561};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r563}, %rd843;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r564,%dummy}, %rd843;
	}
	shf.l.wrap.b32 	%r565, %r564, %r563, 25;
	shf.l.wrap.b32 	%r566, %r563, %r564, 25;
	mov.b64 	%rd869, {%r566, %r565};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r567,%dummy}, %rd836;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r568}, %rd836;
	}
	shf.r.wrap.b32 	%r569, %r568, %r567, 21;
	shf.r.wrap.b32 	%r570, %r567, %r568, 21;
	mov.b64 	%rd870, {%r570, %r569};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r571,%dummy}, %rd834;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r572}, %rd834;
	}
	shf.r.wrap.b32 	%r573, %r572, %r571, 2;
	shf.r.wrap.b32 	%r574, %r571, %r572, 2;
	mov.b64 	%rd871, {%r574, %r573};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r575}, %rd824;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r576,%dummy}, %rd824;
	}
	shf.l.wrap.b32 	%r577, %r576, %r575, 18;
	shf.l.wrap.b32 	%r578, %r575, %r576, 18;
	mov.b64 	%rd872, {%r578, %r577};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r579,%dummy}, %rd850;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r580}, %rd850;
	}
	shf.r.wrap.b32 	%r581, %r580, %r579, 25;
	shf.r.wrap.b32 	%r582, %r579, %r580, 25;
	mov.b64 	%rd873, {%r582, %r581};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r583,%dummy}, %rd838;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r584}, %rd838;
	}
	shf.r.wrap.b32 	%r585, %r584, %r583, 3;
	shf.r.wrap.b32 	%r586, %r583, %r584, 3;
	mov.b64 	%rd874, {%r586, %r585};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r587}, %rd849;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r588,%dummy}, %rd849;
	}
	shf.l.wrap.b32 	%r589, %r588, %r587, 20;
	shf.l.wrap.b32 	%r590, %r587, %r588, 20;
	mov.b64 	%rd875, {%r590, %r589};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r591,%dummy}, %rd828;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r592}, %rd828;
	}
	shf.r.wrap.b32 	%r593, %r592, %r591, 20;
	shf.r.wrap.b32 	%r594, %r591, %r592, 20;
	mov.b64 	%rd876, {%r594, %r593};
	not.b64 	%rd877, %rd876;
	and.b64  	%rd878, %rd870, %rd877;
	xor.b64  	%rd879, %rd878, %rd820;
	not.b64 	%rd880, %rd870;
	and.b64  	%rd881, %rd858, %rd880;
	xor.b64  	%rd882, %rd881, %rd876;
	not.b64 	%rd883, %rd858;
	and.b64  	%rd884, %rd864, %rd883;
	xor.b64  	%rd885, %rd884, %rd870;
	not.b64 	%rd886, %rd864;
	and.b64  	%rd887, %rd820, %rd886;
	xor.b64  	%rd888, %rd887, %rd858;
	not.b64 	%rd889, %rd820;
	and.b64  	%rd890, %rd876, %rd889;
	xor.b64  	%rd891, %rd864, %rd890;
	not.b64 	%rd892, %rd875;
	and.b64  	%rd893, %rd854, %rd892;
	xor.b64  	%rd894, %rd893, %rd859;
	not.b64 	%rd895, %rd854;
	and.b64  	%rd896, %rd861, %rd895;
	xor.b64  	%rd897, %rd896, %rd875;
	not.b64 	%rd898, %rd861;
	and.b64  	%rd899, %rd874, %rd898;
	xor.b64  	%rd900, %rd899, %rd854;
	not.b64 	%rd901, %rd874;
	and.b64  	%rd902, %rd859, %rd901;
	xor.b64  	%rd903, %rd902, %rd861;
	not.b64 	%rd904, %rd859;
	and.b64  	%rd905, %rd875, %rd904;
	xor.b64  	%rd906, %rd874, %rd905;
	not.b64 	%rd907, %rd855;
	and.b64  	%rd908, %rd869, %rd907;
	xor.b64  	%rd909, %rd908, %rd853;
	not.b64 	%rd910, %rd869;
	and.b64  	%rd911, %rd868, %rd910;
	xor.b64  	%rd912, %rd911, %rd855;
	not.b64 	%rd913, %rd868;
	and.b64  	%rd914, %rd872, %rd913;
	xor.b64  	%rd915, %rd914, %rd869;
	not.b64 	%rd916, %rd872;
	and.b64  	%rd917, %rd853, %rd916;
	xor.b64  	%rd918, %rd917, %rd868;
	not.b64 	%rd919, %rd853;
	and.b64  	%rd920, %rd855, %rd919;
	xor.b64  	%rd921, %rd872, %rd920;
	not.b64 	%rd922, %rd860;
	and.b64  	%rd923, %rd856, %rd922;
	xor.b64  	%rd924, %rd923, %rd865;
	not.b64 	%rd925, %rd856;
	and.b64  	%rd926, %rd857, %rd925;
	xor.b64  	%rd927, %rd926, %rd860;
	not.b64 	%rd928, %rd857;
	and.b64  	%rd929, %rd867, %rd928;
	xor.b64  	%rd930, %rd929, %rd856;
	not.b64 	%rd931, %rd867;
	and.b64  	%rd932, %rd865, %rd931;
	xor.b64  	%rd933, %rd932, %rd857;
	not.b64 	%rd934, %rd865;
	and.b64  	%rd935, %rd860, %rd934;
	xor.b64  	%rd936, %rd867, %rd935;
	not.b64 	%rd937, %rd862;
	and.b64  	%rd938, %rd873, %rd937;
	xor.b64  	%rd939, %rd938, %rd871;
	not.b64 	%rd940, %rd873;
	and.b64  	%rd941, %rd866, %rd940;
	xor.b64  	%rd942, %rd941, %rd862;
	not.b64 	%rd943, %rd866;
	and.b64  	%rd944, %rd863, %rd943;
	xor.b64  	%rd945, %rd944, %rd873;
	not.b64 	%rd946, %rd863;
	and.b64  	%rd947, %rd871, %rd946;
	xor.b64  	%rd948, %rd947, %rd866;
	not.b64 	%rd949, %rd871;
	and.b64  	%rd950, %rd862, %rd949;
	xor.b64  	%rd951, %rd863, %rd950;
	ld.global.nc.u64 	%rd952, [%rd2212+32];
	xor.b64  	%rd953, %rd879, %rd952;
	xor.b64  	%rd954, %rd894, %rd953;
	xor.b64  	%rd955, %rd954, %rd909;
	xor.b64  	%rd956, %rd955, %rd924;
	xor.b64  	%rd957, %rd956, %rd939;
	xor.b64  	%rd958, %rd897, %rd882;
	xor.b64  	%rd959, %rd958, %rd912;
	xor.b64  	%rd960, %rd959, %rd927;
	xor.b64  	%rd961, %rd960, %rd942;
	xor.b64  	%rd962, %rd900, %rd885;
	xor.b64  	%rd963, %rd962, %rd915;
	xor.b64  	%rd964, %rd963, %rd930;
	xor.b64  	%rd965, %rd964, %rd945;
	xor.b64  	%rd966, %rd903, %rd888;
	xor.b64  	%rd967, %rd966, %rd918;
	xor.b64  	%rd968, %rd967, %rd933;
	xor.b64  	%rd969, %rd968, %rd948;
	xor.b64  	%rd970, %rd906, %rd891;
	xor.b64  	%rd971, %rd970, %rd921;
	xor.b64  	%rd972, %rd971, %rd936;
	xor.b64  	%rd973, %rd972, %rd951;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r595}, %rd961;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r596,%dummy}, %rd961;
	}
	shf.l.wrap.b32 	%r597, %r596, %r595, 1;
	shf.l.wrap.b32 	%r598, %r595, %r596, 1;
	mov.b64 	%rd974, {%r598, %r597};
	xor.b64  	%rd975, %rd973, %rd974;
	xor.b64  	%rd976, %rd975, %rd953;
	xor.b64  	%rd977, %rd894, %rd975;
	xor.b64  	%rd978, %rd909, %rd975;
	xor.b64  	%rd979, %rd924, %rd975;
	xor.b64  	%rd980, %rd939, %rd975;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r599}, %rd965;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r600,%dummy}, %rd965;
	}
	shf.l.wrap.b32 	%r601, %r600, %r599, 1;
	shf.l.wrap.b32 	%r602, %r599, %r600, 1;
	mov.b64 	%rd981, {%r602, %r601};
	xor.b64  	%rd982, %rd981, %rd957;
	xor.b64  	%rd983, %rd882, %rd982;
	xor.b64  	%rd984, %rd897, %rd982;
	xor.b64  	%rd985, %rd912, %rd982;
	xor.b64  	%rd986, %rd927, %rd982;
	xor.b64  	%rd987, %rd942, %rd982;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r603}, %rd969;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r604,%dummy}, %rd969;
	}
	shf.l.wrap.b32 	%r605, %r604, %r603, 1;
	shf.l.wrap.b32 	%r606, %r603, %r604, 1;
	mov.b64 	%rd988, {%r606, %r605};
	xor.b64  	%rd989, %rd988, %rd961;
	xor.b64  	%rd990, %rd885, %rd989;
	xor.b64  	%rd991, %rd900, %rd989;
	xor.b64  	%rd992, %rd915, %rd989;
	xor.b64  	%rd993, %rd930, %rd989;
	xor.b64  	%rd994, %rd945, %rd989;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r607}, %rd973;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r608,%dummy}, %rd973;
	}
	shf.l.wrap.b32 	%r609, %r608, %r607, 1;
	shf.l.wrap.b32 	%r610, %r607, %r608, 1;
	mov.b64 	%rd995, {%r610, %r609};
	xor.b64  	%rd996, %rd995, %rd965;
	xor.b64  	%rd997, %rd888, %rd996;
	xor.b64  	%rd998, %rd903, %rd996;
	xor.b64  	%rd999, %rd918, %rd996;
	xor.b64  	%rd1000, %rd933, %rd996;
	xor.b64  	%rd1001, %rd948, %rd996;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r611}, %rd957;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r612,%dummy}, %rd957;
	}
	shf.l.wrap.b32 	%r613, %r612, %r611, 1;
	shf.l.wrap.b32 	%r614, %r611, %r612, 1;
	mov.b64 	%rd1002, {%r614, %r613};
	xor.b64  	%rd1003, %rd969, %rd1002;
	xor.b64  	%rd1004, %rd891, %rd1003;
	xor.b64  	%rd1005, %rd906, %rd1003;
	xor.b64  	%rd1006, %rd921, %rd1003;
	xor.b64  	%rd1007, %rd936, %rd1003;
	xor.b64  	%rd1008, %rd951, %rd1003;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r615}, %rd983;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r616,%dummy}, %rd983;
	}
	shf.l.wrap.b32 	%r617, %r616, %r615, 1;
	shf.l.wrap.b32 	%r618, %r615, %r616, 1;
	mov.b64 	%rd1009, {%r618, %r617};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r619}, %rd978;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r620,%dummy}, %rd978;
	}
	shf.l.wrap.b32 	%r621, %r620, %r619, 3;
	shf.l.wrap.b32 	%r622, %r619, %r620, 3;
	mov.b64 	%rd1010, {%r622, %r621};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r623}, %rd991;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r624,%dummy}, %rd991;
	}
	shf.l.wrap.b32 	%r625, %r624, %r623, 6;
	shf.l.wrap.b32 	%r626, %r623, %r624, 6;
	mov.b64 	%rd1011, {%r626, %r625};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r627}, %rd985;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r628,%dummy}, %rd985;
	}
	shf.l.wrap.b32 	%r629, %r628, %r627, 10;
	shf.l.wrap.b32 	%r630, %r627, %r628, 10;
	mov.b64 	%rd1012, {%r630, %r629};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r631}, %rd993;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r632,%dummy}, %rd993;
	}
	shf.l.wrap.b32 	%r633, %r632, %r631, 15;
	shf.l.wrap.b32 	%r634, %r631, %r632, 15;
	mov.b64 	%rd1013, {%r634, %r633};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r635}, %rd1000;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r636,%dummy}, %rd1000;
	}
	shf.l.wrap.b32 	%r637, %r636, %r635, 21;
	shf.l.wrap.b32 	%r638, %r635, %r636, 21;
	mov.b64 	%rd1014, {%r638, %r637};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r639}, %rd997;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r640,%dummy}, %rd997;
	}
	shf.l.wrap.b32 	%r641, %r640, %r639, 28;
	shf.l.wrap.b32 	%r642, %r639, %r640, 28;
	mov.b64 	%rd1015, {%r642, %r641};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r643,%dummy}, %rd977;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r644}, %rd977;
	}
	shf.r.wrap.b32 	%r645, %r644, %r643, 28;
	shf.r.wrap.b32 	%r646, %r643, %r644, 28;
	mov.b64 	%rd1016, {%r646, %r645};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r647,%dummy}, %rd986;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r648}, %rd986;
	}
	shf.r.wrap.b32 	%r649, %r648, %r647, 19;
	shf.r.wrap.b32 	%r650, %r647, %r648, 19;
	mov.b64 	%rd1017, {%r650, %r649};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r651,%dummy}, %rd998;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r652}, %rd998;
	}
	shf.r.wrap.b32 	%r653, %r652, %r651, 9;
	shf.r.wrap.b32 	%r654, %r651, %r652, 9;
	mov.b64 	%rd1018, {%r654, %r653};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r655}, %rd987;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r656,%dummy}, %rd987;
	}
	shf.l.wrap.b32 	%r657, %r656, %r655, 2;
	shf.l.wrap.b32 	%r658, %r655, %r656, 2;
	mov.b64 	%rd1019, {%r658, %r657};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r659}, %rd1008;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r660,%dummy}, %rd1008;
	}
	shf.l.wrap.b32 	%r661, %r660, %r659, 14;
	shf.l.wrap.b32 	%r662, %r659, %r660, 14;
	mov.b64 	%rd1020, {%r662, %r661};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r663}, %rd1004;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r664,%dummy}, %rd1004;
	}
	shf.l.wrap.b32 	%r665, %r664, %r663, 27;
	shf.l.wrap.b32 	%r666, %r663, %r664, 27;
	mov.b64 	%rd1021, {%r666, %r665};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r667,%dummy}, %rd979;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r668}, %rd979;
	}
	shf.r.wrap.b32 	%r669, %r668, %r667, 23;
	shf.r.wrap.b32 	%r670, %r667, %r668, 23;
	mov.b64 	%rd1022, {%r670, %r669};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r671,%dummy}, %rd1001;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r672}, %rd1001;
	}
	shf.r.wrap.b32 	%r673, %r672, %r671, 8;
	shf.r.wrap.b32 	%r674, %r671, %r672, 8;
	mov.b64 	%rd1023, {%r674, %r673};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r675}, %rd1007;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r676,%dummy}, %rd1007;
	}
	shf.l.wrap.b32 	%r677, %r676, %r675, 8;
	shf.l.wrap.b32 	%r678, %r675, %r676, 8;
	mov.b64 	%rd1024, {%r678, %r677};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r679}, %rd999;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r680,%dummy}, %rd999;
	}
	shf.l.wrap.b32 	%r681, %r680, %r679, 25;
	shf.l.wrap.b32 	%r682, %r679, %r680, 25;
	mov.b64 	%rd1025, {%r682, %r681};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r683,%dummy}, %rd992;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r684}, %rd992;
	}
	shf.r.wrap.b32 	%r685, %r684, %r683, 21;
	shf.r.wrap.b32 	%r686, %r683, %r684, 21;
	mov.b64 	%rd1026, {%r686, %r685};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r687,%dummy}, %rd990;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r688}, %rd990;
	}
	shf.r.wrap.b32 	%r689, %r688, %r687, 2;
	shf.r.wrap.b32 	%r690, %r687, %r688, 2;
	mov.b64 	%rd1027, {%r690, %r689};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r691}, %rd980;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r692,%dummy}, %rd980;
	}
	shf.l.wrap.b32 	%r693, %r692, %r691, 18;
	shf.l.wrap.b32 	%r694, %r691, %r692, 18;
	mov.b64 	%rd1028, {%r694, %r693};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r695,%dummy}, %rd1006;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r696}, %rd1006;
	}
	shf.r.wrap.b32 	%r697, %r696, %r695, 25;
	shf.r.wrap.b32 	%r698, %r695, %r696, 25;
	mov.b64 	%rd1029, {%r698, %r697};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r699,%dummy}, %rd994;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r700}, %rd994;
	}
	shf.r.wrap.b32 	%r701, %r700, %r699, 3;
	shf.r.wrap.b32 	%r702, %r699, %r700, 3;
	mov.b64 	%rd1030, {%r702, %r701};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r703}, %rd1005;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r704,%dummy}, %rd1005;
	}
	shf.l.wrap.b32 	%r705, %r704, %r703, 20;
	shf.l.wrap.b32 	%r706, %r703, %r704, 20;
	mov.b64 	%rd1031, {%r706, %r705};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r707,%dummy}, %rd984;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r708}, %rd984;
	}
	shf.r.wrap.b32 	%r709, %r708, %r707, 20;
	shf.r.wrap.b32 	%r710, %r707, %r708, 20;
	mov.b64 	%rd1032, {%r710, %r709};
	not.b64 	%rd1033, %rd1032;
	and.b64  	%rd1034, %rd1026, %rd1033;
	xor.b64  	%rd1035, %rd1034, %rd976;
	not.b64 	%rd1036, %rd1026;
	and.b64  	%rd1037, %rd1014, %rd1036;
	xor.b64  	%rd2232, %rd1037, %rd1032;
	not.b64 	%rd1038, %rd1014;
	and.b64  	%rd1039, %rd1020, %rd1038;
	xor.b64  	%rd2227, %rd1039, %rd1026;
	not.b64 	%rd1040, %rd1020;
	and.b64  	%rd1041, %rd976, %rd1040;
	xor.b64  	%rd2222, %rd1041, %rd1014;
	not.b64 	%rd1042, %rd976;
	and.b64  	%rd1043, %rd1032, %rd1042;
	xor.b64  	%rd2217, %rd1020, %rd1043;
	not.b64 	%rd1044, %rd1031;
	and.b64  	%rd1045, %rd1010, %rd1044;
	xor.b64  	%rd2236, %rd1045, %rd1015;
	not.b64 	%rd1046, %rd1010;
	and.b64  	%rd1047, %rd1017, %rd1046;
	xor.b64  	%rd2231, %rd1047, %rd1031;
	not.b64 	%rd1048, %rd1017;
	and.b64  	%rd1049, %rd1030, %rd1048;
	xor.b64  	%rd2226, %rd1049, %rd1010;
	not.b64 	%rd1050, %rd1030;
	and.b64  	%rd1051, %rd1015, %rd1050;
	xor.b64  	%rd2221, %rd1051, %rd1017;
	not.b64 	%rd1052, %rd1015;
	and.b64  	%rd1053, %rd1031, %rd1052;
	xor.b64  	%rd2216, %rd1030, %rd1053;
	not.b64 	%rd1054, %rd1011;
	and.b64  	%rd1055, %rd1025, %rd1054;
	xor.b64  	%rd2235, %rd1055, %rd1009;
	not.b64 	%rd1056, %rd1025;
	and.b64  	%rd1057, %rd1024, %rd1056;
	xor.b64  	%rd2230, %rd1057, %rd1011;
	not.b64 	%rd1058, %rd1024;
	and.b64  	%rd1059, %rd1028, %rd1058;
	xor.b64  	%rd2225, %rd1059, %rd1025;
	not.b64 	%rd1060, %rd1028;
	and.b64  	%rd1061, %rd1009, %rd1060;
	xor.b64  	%rd2220, %rd1061, %rd1024;
	not.b64 	%rd1062, %rd1009;
	and.b64  	%rd1063, %rd1011, %rd1062;
	xor.b64  	%rd2215, %rd1028, %rd1063;
	not.b64 	%rd1064, %rd1016;
	and.b64  	%rd1065, %rd1012, %rd1064;
	xor.b64  	%rd2234, %rd1065, %rd1021;
	not.b64 	%rd1066, %rd1012;
	and.b64  	%rd1067, %rd1013, %rd1066;
	xor.b64  	%rd2229, %rd1067, %rd1016;
	not.b64 	%rd1068, %rd1013;
	and.b64  	%rd1069, %rd1023, %rd1068;
	xor.b64  	%rd2224, %rd1069, %rd1012;
	not.b64 	%rd1070, %rd1023;
	and.b64  	%rd1071, %rd1021, %rd1070;
	xor.b64  	%rd2219, %rd1071, %rd1013;
	not.b64 	%rd1072, %rd1021;
	and.b64  	%rd1073, %rd1016, %rd1072;
	xor.b64  	%rd2214, %rd1023, %rd1073;
	not.b64 	%rd1074, %rd1018;
	and.b64  	%rd1075, %rd1029, %rd1074;
	xor.b64  	%rd2233, %rd1075, %rd1027;
	not.b64 	%rd1076, %rd1029;
	and.b64  	%rd1077, %rd1022, %rd1076;
	xor.b64  	%rd2228, %rd1077, %rd1018;
	not.b64 	%rd1078, %rd1022;
	and.b64  	%rd1079, %rd1019, %rd1078;
	xor.b64  	%rd2223, %rd1079, %rd1029;
	not.b64 	%rd1080, %rd1019;
	and.b64  	%rd1081, %rd1027, %rd1080;
	xor.b64  	%rd2218, %rd1081, %rd1022;
	not.b64 	%rd1082, %rd1027;
	and.b64  	%rd1083, %rd1018, %rd1082;
	xor.b64  	%rd2213, %rd1019, %rd1083;
	ld.global.nc.u64 	%rd1084, [%rd2212+40];
	xor.b64  	%rd2237, %rd1035, %rd1084;
	add.s64 	%rd2212, %rd2212, 48;
	add.s32 	%r5800, %r5800, 6;
	setp.ne.s32 	%p8, %r5800, 24;
	@%p8 bra 	$L__BB0_4;

	cvt.u16.u64 	%rs1, %rd2237;
	and.b16  	%rs2, %rs1, 240;
	shr.u64 	%rd1107, %rd2237, 8;
	cvt.u32.u64 	%r4808, %rd1107;
	shr.u64 	%rd1108, %rd2237, 16;
	cvt.u32.u64 	%r4809, %rd1108;
	shr.u64 	%rd1109, %rd2237, 24;
	cvt.u32.u64 	%r4810, %rd1109;
	shr.u64 	%rd1110, %rd2237, 32;
	cvt.u32.u64 	%r4811, %rd1110;
	shr.u64 	%rd1111, %rd2237, 40;
	cvt.u32.u64 	%r4812, %rd1111;
	shr.u64 	%rd1112, %rd2237, 48;
	cvt.u32.u64 	%r4813, %rd1112;
	shr.u64 	%rd1113, %rd2237, 56;
	cvt.u32.u64 	%r4814, %rd1113;
	shr.u64 	%rd1114, %rd2232, 8;
	cvt.u32.u64 	%r4815, %rd1114;
	shr.u64 	%rd1115, %rd2232, 16;
	cvt.u32.u64 	%r4816, %rd1115;
	shr.u64 	%rd1116, %rd2232, 24;
	cvt.u32.u64 	%r4817, %rd1116;
	shr.u64 	%rd1117, %rd2232, 32;
	cvt.u32.u64 	%r4818, %rd1117;
	shr.u64 	%rd1118, %rd2232, 40;
	cvt.u32.u64 	%r4819, %rd1118;
	shr.u64 	%rd1119, %rd2232, 48;
	cvt.u32.u64 	%r4820, %rd1119;
	shr.u64 	%rd1120, %rd2232, 56;
	cvt.u32.u64 	%r4821, %rd1120;
	shr.u64 	%rd1121, %rd2227, 8;
	cvt.u32.u64 	%r4822, %rd1121;
	shr.u64 	%rd1122, %rd2227, 16;
	cvt.u32.u64 	%r4823, %rd1122;
	shr.u64 	%rd1123, %rd2227, 24;
	cvt.u32.u64 	%r4824, %rd1123;
	shr.u64 	%rd1124, %rd2227, 32;
	cvt.u32.u64 	%r4825, %rd1124;
	shr.u64 	%rd1125, %rd2227, 40;
	cvt.u32.u64 	%r4826, %rd1125;
	shr.u64 	%rd1126, %rd2227, 48;
	cvt.u32.u64 	%r4827, %rd1126;
	shr.u64 	%rd1127, %rd2227, 56;
	cvt.u32.u64 	%r4828, %rd1127;
	shr.u16 	%rs3, %rs2, 4;
	cvt.u32.u64 	%r4829, %rd2237;
	shr.u32 	%r4830, %r4829, 12;
	cvt.u32.u16 	%r4831, %rs3;
	and.b32  	%r4832, %r4829, 15;
	prmt.b32 	%r4833, %r4832, %r4831, 30212;
	shl.b32 	%r4834, %r4829, 4;
	and.b32  	%r4835, %r4834, 983040;
	or.b32  	%r4836, %r4833, %r4835;
	shl.b32 	%r4837, %r4808, 24;
	and.b32  	%r4838, %r4837, 251658240;
	or.b32  	%r4745, %r4836, %r4838;
	bfe.u32 	%r4839, %r4829, 20, 4;
	and.b32  	%r4840, %r4809, 15;
	bfi.b32 	%r4841, %r4840, %r4839, 8, 4;
	and.b32  	%r4842, %r4830, 983040;
	or.b32  	%r4843, %r4841, %r4842;
	shl.b32 	%r4844, %r4810, 24;
	and.b32  	%r4845, %r4844, 251658240;
	or.b32  	%r4749, %r4843, %r4845;
	shr.u64 	%rd1128, %rd2237, 36;
	cvt.u32.u64 	%r4846, %rd1128;
	and.b32  	%r4847, %r4846, 15;
	and.b32  	%r4848, %r4811, 15;
	shr.u64 	%rd1129, %rd2237, 44;
	cvt.u32.u64 	%r4849, %rd1129;
	bfi.b32 	%r4850, %r4848, %r4847, 8, 4;
	shl.b32 	%r4851, %r4849, 16;
	and.b32  	%r4852, %r4851, 983040;
	or.b32  	%r4853, %r4850, %r4852;
	shl.b32 	%r4854, %r4812, 24;
	and.b32  	%r4855, %r4854, 251658240;
	or.b32  	%r4753, %r4853, %r4855;
	shr.u64 	%rd1130, %rd2237, 52;
	cvt.u32.u64 	%r4856, %rd1130;
	and.b32  	%r4857, %r4856, 15;
	and.b32  	%r4858, %r4813, 15;
	bfi.b32 	%r4859, %r4858, %r4857, 8, 4;
	and.b32  	%r4860, %r4849, 983040;
	or.b32  	%r4861, %r4859, %r4860;
	shl.b32 	%r4862, %r4814, 24;
	and.b32  	%r4863, %r4862, 251658240;
	or.b32  	%r4757, %r4861, %r4863;
	cvt.u16.u64 	%rs4, %rd2232;
	and.b16  	%rs5, %rs4, 240;
	shr.u16 	%rs6, %rs5, 4;
	cvt.u32.u64 	%r4864, %rd2232;
	shr.u32 	%r4865, %r4864, 12;
	cvt.u32.u16 	%r4866, %rs6;
	and.b32  	%r4867, %r4864, 15;
	prmt.b32 	%r4868, %r4867, %r4866, 30212;
	shl.b32 	%r4869, %r4864, 4;
	and.b32  	%r4870, %r4869, 983040;
	or.b32  	%r4871, %r4868, %r4870;
	shl.b32 	%r4872, %r4815, 24;
	and.b32  	%r4873, %r4872, 251658240;
	or.b32  	%r4761, %r4871, %r4873;
	bfe.u32 	%r4874, %r4864, 20, 4;
	and.b32  	%r4875, %r4816, 15;
	bfi.b32 	%r4876, %r4875, %r4874, 8, 4;
	and.b32  	%r4877, %r4865, 983040;
	or.b32  	%r4878, %r4876, %r4877;
	shl.b32 	%r4879, %r4817, 24;
	and.b32  	%r4880, %r4879, 251658240;
	or.b32  	%r4765, %r4878, %r4880;
	shr.u64 	%rd1131, %rd2232, 36;
	cvt.u32.u64 	%r4881, %rd1131;
	and.b32  	%r4882, %r4881, 15;
	and.b32  	%r4883, %r4818, 15;
	shr.u64 	%rd1132, %rd2232, 44;
	cvt.u32.u64 	%r4884, %rd1132;
	bfi.b32 	%r4885, %r4883, %r4882, 8, 4;
	shl.b32 	%r4886, %r4884, 16;
	and.b32  	%r4887, %r4886, 983040;
	or.b32  	%r4888, %r4885, %r4887;
	shl.b32 	%r4889, %r4819, 24;
	and.b32  	%r4890, %r4889, 251658240;
	or.b32  	%r4769, %r4888, %r4890;
	shr.u64 	%rd1133, %rd2232, 52;
	cvt.u32.u64 	%r4891, %rd1133;
	and.b32  	%r4892, %r4891, 15;
	and.b32  	%r4893, %r4820, 15;
	bfi.b32 	%r4894, %r4893, %r4892, 8, 4;
	and.b32  	%r4895, %r4884, 983040;
	or.b32  	%r4896, %r4894, %r4895;
	shl.b32 	%r4897, %r4821, 24;
	and.b32  	%r4898, %r4897, 251658240;
	or.b32  	%r4773, %r4896, %r4898;
	cvt.u16.u64 	%rs7, %rd2227;
	and.b16  	%rs8, %rs7, 240;
	shr.u16 	%rs9, %rs8, 4;
	cvt.u32.u64 	%r4899, %rd2227;
	shr.u32 	%r4900, %r4899, 12;
	cvt.u32.u16 	%r4901, %rs9;
	and.b32  	%r4902, %r4899, 15;
	prmt.b32 	%r4903, %r4902, %r4901, 30212;
	shl.b32 	%r4904, %r4899, 4;
	and.b32  	%r4905, %r4904, 983040;
	or.b32  	%r4906, %r4903, %r4905;
	shl.b32 	%r4907, %r4822, 24;
	and.b32  	%r4908, %r4907, 251658240;
	or.b32  	%r4777, %r4906, %r4908;
	bfe.u32 	%r4909, %r4899, 20, 4;
	and.b32  	%r4910, %r4823, 15;
	bfi.b32 	%r4911, %r4910, %r4909, 8, 4;
	and.b32  	%r4912, %r4900, 983040;
	or.b32  	%r4913, %r4911, %r4912;
	shl.b32 	%r4914, %r4824, 24;
	and.b32  	%r4915, %r4914, 251658240;
	or.b32  	%r4781, %r4913, %r4915;
	shr.u64 	%rd1134, %rd2227, 36;
	cvt.u32.u64 	%r4916, %rd1134;
	and.b32  	%r4917, %r4916, 15;
	and.b32  	%r4918, %r4825, 15;
	shr.u64 	%rd1135, %rd2227, 44;
	cvt.u32.u64 	%r4919, %rd1135;
	bfi.b32 	%r4920, %r4918, %r4917, 8, 4;
	shl.b32 	%r4921, %r4919, 16;
	and.b32  	%r4922, %r4921, 983040;
	or.b32  	%r4923, %r4920, %r4922;
	shl.b32 	%r4924, %r4826, 24;
	and.b32  	%r4925, %r4924, 251658240;
	or.b32  	%r4785, %r4923, %r4925;
	shr.u64 	%rd1136, %rd2227, 52;
	cvt.u32.u64 	%r4926, %rd1136;
	and.b32  	%r4927, %r4926, 15;
	and.b32  	%r4928, %r4827, 15;
	bfi.b32 	%r4929, %r4928, %r4927, 8, 4;
	and.b32  	%r4930, %r4919, 983040;
	or.b32  	%r4931, %r4929, %r4930;
	shl.b32 	%r4932, %r4828, 24;
	and.b32  	%r4933, %r4932, 251658240;
	or.b32  	%r4789, %r4931, %r4933;
	cvt.u16.u64 	%rs10, %rd2222;
	and.b16  	%rs11, %rs10, 240;
	shr.u16 	%rs12, %rs11, 4;
	shr.u64 	%rd1137, %rd2222, 8;
	cvt.u32.u64 	%r4934, %rd1137;
	cvt.u32.u64 	%r4935, %rd2222;
	shr.u32 	%r4936, %r4935, 12;
	cvt.u32.u16 	%r4937, %rs12;
	and.b32  	%r4938, %r4935, 15;
	prmt.b32 	%r4939, %r4938, %r4937, 30212;
	shl.b32 	%r4940, %r4935, 4;
	and.b32  	%r4941, %r4940, 983040;
	or.b32  	%r4942, %r4939, %r4941;
	shl.b32 	%r4943, %r4934, 24;
	and.b32  	%r4944, %r4943, 251658240;
	or.b32  	%r4793, %r4942, %r4944;
	shr.u64 	%rd1138, %rd2222, 16;
	cvt.u32.u64 	%r4945, %rd1138;
	bfe.u32 	%r4946, %r4935, 20, 4;
	and.b32  	%r4947, %r4945, 15;
	shr.u64 	%rd1139, %rd2222, 24;
	cvt.u32.u64 	%r4948, %rd1139;
	bfi.b32 	%r4949, %r4947, %r4946, 8, 4;
	and.b32  	%r4950, %r4936, 983040;
	or.b32  	%r4951, %r4949, %r4950;
	shl.b32 	%r4952, %r4948, 24;
	and.b32  	%r4953, %r4952, 251658240;
	or.b32  	%r4797, %r4951, %r4953;
	shr.u64 	%rd1140, %rd2222, 32;
	cvt.u32.u64 	%r4954, %rd1140;
	shr.u64 	%rd1141, %rd2222, 36;
	cvt.u32.u64 	%r4955, %rd1141;
	and.b32  	%r4956, %r4955, 15;
	and.b32  	%r4957, %r4954, 15;
	shr.u64 	%rd1142, %rd2222, 40;
	cvt.u32.u64 	%r4958, %rd1142;
	shr.u64 	%rd1143, %rd2222, 44;
	cvt.u32.u64 	%r4959, %rd1143;
	bfi.b32 	%r4960, %r4957, %r4956, 8, 4;
	shl.b32 	%r4961, %r4959, 16;
	and.b32  	%r4962, %r4961, 983040;
	or.b32  	%r4963, %r4960, %r4962;
	shl.b32 	%r4964, %r4958, 24;
	and.b32  	%r4965, %r4964, 251658240;
	or.b32  	%r4801, %r4963, %r4965;
	shr.u64 	%rd1144, %rd2222, 48;
	cvt.u32.u64 	%r4966, %rd1144;
	shr.u64 	%rd1145, %rd2222, 52;
	cvt.u32.u64 	%r4967, %rd1145;
	and.b32  	%r4968, %r4967, 15;
	and.b32  	%r4969, %r4966, 15;
	shr.u64 	%rd1146, %rd2222, 56;
	cvt.u32.u64 	%r4970, %rd1146;
	bfi.b32 	%r4971, %r4969, %r4968, 8, 4;
	and.b32  	%r4972, %r4959, 983040;
	or.b32  	%r4973, %r4971, %r4972;
	shl.b32 	%r4974, %r4970, 24;
	and.b32  	%r4975, %r4974, 251658240;
	or.b32  	%r4805, %r4973, %r4975;
	ld.const.u32 	%r712, [matrix];
	mov.u32 	%r5801, 0;
	// begin inline asm
	dp4a.u32.u32 %r711, %r712, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r716, [matrix+4];
	// begin inline asm
	dp4a.u32.u32 %r715, %r716, %r4749, %r711;
	// end inline asm
	ld.const.u32 	%r720, [matrix+8];
	// begin inline asm
	dp4a.u32.u32 %r719, %r720, %r4753, %r715;
	// end inline asm
	ld.const.u32 	%r724, [matrix+12];
	// begin inline asm
	dp4a.u32.u32 %r723, %r724, %r4757, %r719;
	// end inline asm
	ld.const.u32 	%r728, [matrix+16];
	// begin inline asm
	dp4a.u32.u32 %r727, %r728, %r4761, %r723;
	// end inline asm
	ld.const.u32 	%r732, [matrix+20];
	// begin inline asm
	dp4a.u32.u32 %r731, %r732, %r4765, %r727;
	// end inline asm
	ld.const.u32 	%r736, [matrix+24];
	// begin inline asm
	dp4a.u32.u32 %r735, %r736, %r4769, %r731;
	// end inline asm
	ld.const.u32 	%r740, [matrix+28];
	// begin inline asm
	dp4a.u32.u32 %r739, %r740, %r4773, %r735;
	// end inline asm
	ld.const.u32 	%r744, [matrix+32];
	// begin inline asm
	dp4a.u32.u32 %r743, %r744, %r4777, %r739;
	// end inline asm
	ld.const.u32 	%r748, [matrix+36];
	// begin inline asm
	dp4a.u32.u32 %r747, %r748, %r4781, %r743;
	// end inline asm
	ld.const.u32 	%r752, [matrix+40];
	// begin inline asm
	dp4a.u32.u32 %r751, %r752, %r4785, %r747;
	// end inline asm
	ld.const.u32 	%r756, [matrix+44];
	// begin inline asm
	dp4a.u32.u32 %r755, %r756, %r4789, %r751;
	// end inline asm
	ld.const.u32 	%r760, [matrix+48];
	// begin inline asm
	dp4a.u32.u32 %r759, %r760, %r4793, %r755;
	// end inline asm
	ld.const.u32 	%r764, [matrix+52];
	// begin inline asm
	dp4a.u32.u32 %r763, %r764, %r4797, %r759;
	// end inline asm
	ld.const.u32 	%r768, [matrix+56];
	// begin inline asm
	dp4a.u32.u32 %r767, %r768, %r4801, %r763;
	// end inline asm
	ld.const.u32 	%r772, [matrix+60];
	// begin inline asm
	dp4a.u32.u32 %r771, %r772, %r4805, %r767;
	// end inline asm
	ld.const.u32 	%r776, [matrix+64];
	// begin inline asm
	dp4a.u32.u32 %r775, %r776, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r780, [matrix+68];
	// begin inline asm
	dp4a.u32.u32 %r779, %r780, %r4749, %r775;
	// end inline asm
	ld.const.u32 	%r784, [matrix+72];
	// begin inline asm
	dp4a.u32.u32 %r783, %r784, %r4753, %r779;
	// end inline asm
	ld.const.u32 	%r788, [matrix+76];
	// begin inline asm
	dp4a.u32.u32 %r787, %r788, %r4757, %r783;
	// end inline asm
	ld.const.u32 	%r792, [matrix+80];
	// begin inline asm
	dp4a.u32.u32 %r791, %r792, %r4761, %r787;
	// end inline asm
	ld.const.u32 	%r796, [matrix+84];
	// begin inline asm
	dp4a.u32.u32 %r795, %r796, %r4765, %r791;
	// end inline asm
	ld.const.u32 	%r800, [matrix+88];
	// begin inline asm
	dp4a.u32.u32 %r799, %r800, %r4769, %r795;
	// end inline asm
	ld.const.u32 	%r804, [matrix+92];
	// begin inline asm
	dp4a.u32.u32 %r803, %r804, %r4773, %r799;
	// end inline asm
	ld.const.u32 	%r808, [matrix+96];
	// begin inline asm
	dp4a.u32.u32 %r807, %r808, %r4777, %r803;
	// end inline asm
	ld.const.u32 	%r812, [matrix+100];
	// begin inline asm
	dp4a.u32.u32 %r811, %r812, %r4781, %r807;
	// end inline asm
	ld.const.u32 	%r816, [matrix+104];
	// begin inline asm
	dp4a.u32.u32 %r815, %r816, %r4785, %r811;
	// end inline asm
	ld.const.u32 	%r820, [matrix+108];
	// begin inline asm
	dp4a.u32.u32 %r819, %r820, %r4789, %r815;
	// end inline asm
	ld.const.u32 	%r824, [matrix+112];
	// begin inline asm
	dp4a.u32.u32 %r823, %r824, %r4793, %r819;
	// end inline asm
	ld.const.u32 	%r828, [matrix+116];
	// begin inline asm
	dp4a.u32.u32 %r827, %r828, %r4797, %r823;
	// end inline asm
	ld.const.u32 	%r832, [matrix+120];
	// begin inline asm
	dp4a.u32.u32 %r831, %r832, %r4801, %r827;
	// end inline asm
	ld.const.u32 	%r836, [matrix+124];
	// begin inline asm
	dp4a.u32.u32 %r835, %r836, %r4805, %r831;
	// end inline asm
	shr.u32 	%r4976, %r771, 6;
	and.b32  	%r4977, %r4976, 240;
	shr.u32 	%r4978, %r835, 10;
	or.b32  	%r4979, %r4978, %r4977;
	cvt.u64.u32 	%rd1147, %r4979;
	xor.b64  	%rd1148, %rd2237, %rd1147;
	ld.const.u32 	%r840, [matrix+128];
	// begin inline asm
	dp4a.u32.u32 %r839, %r840, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r844, [matrix+132];
	// begin inline asm
	dp4a.u32.u32 %r843, %r844, %r4749, %r839;
	// end inline asm
	ld.const.u32 	%r848, [matrix+136];
	// begin inline asm
	dp4a.u32.u32 %r847, %r848, %r4753, %r843;
	// end inline asm
	ld.const.u32 	%r852, [matrix+140];
	// begin inline asm
	dp4a.u32.u32 %r851, %r852, %r4757, %r847;
	// end inline asm
	ld.const.u32 	%r856, [matrix+144];
	// begin inline asm
	dp4a.u32.u32 %r855, %r856, %r4761, %r851;
	// end inline asm
	ld.const.u32 	%r860, [matrix+148];
	// begin inline asm
	dp4a.u32.u32 %r859, %r860, %r4765, %r855;
	// end inline asm
	ld.const.u32 	%r864, [matrix+152];
	// begin inline asm
	dp4a.u32.u32 %r863, %r864, %r4769, %r859;
	// end inline asm
	ld.const.u32 	%r868, [matrix+156];
	// begin inline asm
	dp4a.u32.u32 %r867, %r868, %r4773, %r863;
	// end inline asm
	ld.const.u32 	%r872, [matrix+160];
	// begin inline asm
	dp4a.u32.u32 %r871, %r872, %r4777, %r867;
	// end inline asm
	ld.const.u32 	%r876, [matrix+164];
	// begin inline asm
	dp4a.u32.u32 %r875, %r876, %r4781, %r871;
	// end inline asm
	ld.const.u32 	%r880, [matrix+168];
	// begin inline asm
	dp4a.u32.u32 %r879, %r880, %r4785, %r875;
	// end inline asm
	ld.const.u32 	%r884, [matrix+172];
	// begin inline asm
	dp4a.u32.u32 %r883, %r884, %r4789, %r879;
	// end inline asm
	ld.const.u32 	%r888, [matrix+176];
	// begin inline asm
	dp4a.u32.u32 %r887, %r888, %r4793, %r883;
	// end inline asm
	ld.const.u32 	%r892, [matrix+180];
	// begin inline asm
	dp4a.u32.u32 %r891, %r892, %r4797, %r887;
	// end inline asm
	ld.const.u32 	%r896, [matrix+184];
	// begin inline asm
	dp4a.u32.u32 %r895, %r896, %r4801, %r891;
	// end inline asm
	ld.const.u32 	%r900, [matrix+188];
	// begin inline asm
	dp4a.u32.u32 %r899, %r900, %r4805, %r895;
	// end inline asm
	ld.const.u32 	%r904, [matrix+192];
	// begin inline asm
	dp4a.u32.u32 %r903, %r904, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r908, [matrix+196];
	// begin inline asm
	dp4a.u32.u32 %r907, %r908, %r4749, %r903;
	// end inline asm
	ld.const.u32 	%r912, [matrix+200];
	// begin inline asm
	dp4a.u32.u32 %r911, %r912, %r4753, %r907;
	// end inline asm
	ld.const.u32 	%r916, [matrix+204];
	// begin inline asm
	dp4a.u32.u32 %r915, %r916, %r4757, %r911;
	// end inline asm
	ld.const.u32 	%r920, [matrix+208];
	// begin inline asm
	dp4a.u32.u32 %r919, %r920, %r4761, %r915;
	// end inline asm
	ld.const.u32 	%r924, [matrix+212];
	// begin inline asm
	dp4a.u32.u32 %r923, %r924, %r4765, %r919;
	// end inline asm
	ld.const.u32 	%r928, [matrix+216];
	// begin inline asm
	dp4a.u32.u32 %r927, %r928, %r4769, %r923;
	// end inline asm
	ld.const.u32 	%r932, [matrix+220];
	// begin inline asm
	dp4a.u32.u32 %r931, %r932, %r4773, %r927;
	// end inline asm
	ld.const.u32 	%r936, [matrix+224];
	// begin inline asm
	dp4a.u32.u32 %r935, %r936, %r4777, %r931;
	// end inline asm
	ld.const.u32 	%r940, [matrix+228];
	// begin inline asm
	dp4a.u32.u32 %r939, %r940, %r4781, %r935;
	// end inline asm
	ld.const.u32 	%r944, [matrix+232];
	// begin inline asm
	dp4a.u32.u32 %r943, %r944, %r4785, %r939;
	// end inline asm
	ld.const.u32 	%r948, [matrix+236];
	// begin inline asm
	dp4a.u32.u32 %r947, %r948, %r4789, %r943;
	// end inline asm
	ld.const.u32 	%r952, [matrix+240];
	// begin inline asm
	dp4a.u32.u32 %r951, %r952, %r4793, %r947;
	// end inline asm
	ld.const.u32 	%r956, [matrix+244];
	// begin inline asm
	dp4a.u32.u32 %r955, %r956, %r4797, %r951;
	// end inline asm
	ld.const.u32 	%r960, [matrix+248];
	// begin inline asm
	dp4a.u32.u32 %r959, %r960, %r4801, %r955;
	// end inline asm
	ld.const.u32 	%r964, [matrix+252];
	// begin inline asm
	dp4a.u32.u32 %r963, %r964, %r4805, %r959;
	// end inline asm
	shr.u32 	%r4980, %r899, 6;
	and.b32  	%r4981, %r4980, 240;
	shr.u32 	%r4982, %r963, 10;
	or.b32  	%r4983, %r4982, %r4981;
	cvt.u64.u32 	%rd1149, %r4983;
	xor.b64  	%rd1150, %rd1107, %rd1149;
	ld.const.u32 	%r968, [matrix+256];
	// begin inline asm
	dp4a.u32.u32 %r967, %r968, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r972, [matrix+260];
	// begin inline asm
	dp4a.u32.u32 %r971, %r972, %r4749, %r967;
	// end inline asm
	ld.const.u32 	%r976, [matrix+264];
	// begin inline asm
	dp4a.u32.u32 %r975, %r976, %r4753, %r971;
	// end inline asm
	ld.const.u32 	%r980, [matrix+268];
	// begin inline asm
	dp4a.u32.u32 %r979, %r980, %r4757, %r975;
	// end inline asm
	ld.const.u32 	%r984, [matrix+272];
	// begin inline asm
	dp4a.u32.u32 %r983, %r984, %r4761, %r979;
	// end inline asm
	ld.const.u32 	%r988, [matrix+276];
	// begin inline asm
	dp4a.u32.u32 %r987, %r988, %r4765, %r983;
	// end inline asm
	ld.const.u32 	%r992, [matrix+280];
	// begin inline asm
	dp4a.u32.u32 %r991, %r992, %r4769, %r987;
	// end inline asm
	ld.const.u32 	%r996, [matrix+284];
	// begin inline asm
	dp4a.u32.u32 %r995, %r996, %r4773, %r991;
	// end inline asm
	ld.const.u32 	%r1000, [matrix+288];
	// begin inline asm
	dp4a.u32.u32 %r999, %r1000, %r4777, %r995;
	// end inline asm
	ld.const.u32 	%r1004, [matrix+292];
	// begin inline asm
	dp4a.u32.u32 %r1003, %r1004, %r4781, %r999;
	// end inline asm
	ld.const.u32 	%r1008, [matrix+296];
	// begin inline asm
	dp4a.u32.u32 %r1007, %r1008, %r4785, %r1003;
	// end inline asm
	ld.const.u32 	%r1012, [matrix+300];
	// begin inline asm
	dp4a.u32.u32 %r1011, %r1012, %r4789, %r1007;
	// end inline asm
	ld.const.u32 	%r1016, [matrix+304];
	// begin inline asm
	dp4a.u32.u32 %r1015, %r1016, %r4793, %r1011;
	// end inline asm
	ld.const.u32 	%r1020, [matrix+308];
	// begin inline asm
	dp4a.u32.u32 %r1019, %r1020, %r4797, %r1015;
	// end inline asm
	ld.const.u32 	%r1024, [matrix+312];
	// begin inline asm
	dp4a.u32.u32 %r1023, %r1024, %r4801, %r1019;
	// end inline asm
	ld.const.u32 	%r1028, [matrix+316];
	// begin inline asm
	dp4a.u32.u32 %r1027, %r1028, %r4805, %r1023;
	// end inline asm
	ld.const.u32 	%r1032, [matrix+320];
	// begin inline asm
	dp4a.u32.u32 %r1031, %r1032, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1036, [matrix+324];
	// begin inline asm
	dp4a.u32.u32 %r1035, %r1036, %r4749, %r1031;
	// end inline asm
	ld.const.u32 	%r1040, [matrix+328];
	// begin inline asm
	dp4a.u32.u32 %r1039, %r1040, %r4753, %r1035;
	// end inline asm
	ld.const.u32 	%r1044, [matrix+332];
	// begin inline asm
	dp4a.u32.u32 %r1043, %r1044, %r4757, %r1039;
	// end inline asm
	ld.const.u32 	%r1048, [matrix+336];
	// begin inline asm
	dp4a.u32.u32 %r1047, %r1048, %r4761, %r1043;
	// end inline asm
	ld.const.u32 	%r1052, [matrix+340];
	// begin inline asm
	dp4a.u32.u32 %r1051, %r1052, %r4765, %r1047;
	// end inline asm
	ld.const.u32 	%r1056, [matrix+344];
	// begin inline asm
	dp4a.u32.u32 %r1055, %r1056, %r4769, %r1051;
	// end inline asm
	ld.const.u32 	%r1060, [matrix+348];
	// begin inline asm
	dp4a.u32.u32 %r1059, %r1060, %r4773, %r1055;
	// end inline asm
	ld.const.u32 	%r1064, [matrix+352];
	// begin inline asm
	dp4a.u32.u32 %r1063, %r1064, %r4777, %r1059;
	// end inline asm
	ld.const.u32 	%r1068, [matrix+356];
	// begin inline asm
	dp4a.u32.u32 %r1067, %r1068, %r4781, %r1063;
	// end inline asm
	ld.const.u32 	%r1072, [matrix+360];
	// begin inline asm
	dp4a.u32.u32 %r1071, %r1072, %r4785, %r1067;
	// end inline asm
	ld.const.u32 	%r1076, [matrix+364];
	// begin inline asm
	dp4a.u32.u32 %r1075, %r1076, %r4789, %r1071;
	// end inline asm
	ld.const.u32 	%r1080, [matrix+368];
	// begin inline asm
	dp4a.u32.u32 %r1079, %r1080, %r4793, %r1075;
	// end inline asm
	ld.const.u32 	%r1084, [matrix+372];
	// begin inline asm
	dp4a.u32.u32 %r1083, %r1084, %r4797, %r1079;
	// end inline asm
	ld.const.u32 	%r1088, [matrix+376];
	// begin inline asm
	dp4a.u32.u32 %r1087, %r1088, %r4801, %r1083;
	// end inline asm
	ld.const.u32 	%r1092, [matrix+380];
	// begin inline asm
	dp4a.u32.u32 %r1091, %r1092, %r4805, %r1087;
	// end inline asm
	shr.u32 	%r4984, %r1027, 6;
	and.b32  	%r4985, %r4984, 240;
	shr.u32 	%r4986, %r1091, 10;
	or.b32  	%r4987, %r4986, %r4985;
	cvt.u64.u32 	%rd1151, %r4987;
	xor.b64  	%rd1152, %rd1108, %rd1151;
	ld.const.u32 	%r1096, [matrix+384];
	// begin inline asm
	dp4a.u32.u32 %r1095, %r1096, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1100, [matrix+388];
	// begin inline asm
	dp4a.u32.u32 %r1099, %r1100, %r4749, %r1095;
	// end inline asm
	ld.const.u32 	%r1104, [matrix+392];
	// begin inline asm
	dp4a.u32.u32 %r1103, %r1104, %r4753, %r1099;
	// end inline asm
	ld.const.u32 	%r1108, [matrix+396];
	// begin inline asm
	dp4a.u32.u32 %r1107, %r1108, %r4757, %r1103;
	// end inline asm
	ld.const.u32 	%r1112, [matrix+400];
	// begin inline asm
	dp4a.u32.u32 %r1111, %r1112, %r4761, %r1107;
	// end inline asm
	ld.const.u32 	%r1116, [matrix+404];
	// begin inline asm
	dp4a.u32.u32 %r1115, %r1116, %r4765, %r1111;
	// end inline asm
	ld.const.u32 	%r1120, [matrix+408];
	// begin inline asm
	dp4a.u32.u32 %r1119, %r1120, %r4769, %r1115;
	// end inline asm
	ld.const.u32 	%r1124, [matrix+412];
	// begin inline asm
	dp4a.u32.u32 %r1123, %r1124, %r4773, %r1119;
	// end inline asm
	ld.const.u32 	%r1128, [matrix+416];
	// begin inline asm
	dp4a.u32.u32 %r1127, %r1128, %r4777, %r1123;
	// end inline asm
	ld.const.u32 	%r1132, [matrix+420];
	// begin inline asm
	dp4a.u32.u32 %r1131, %r1132, %r4781, %r1127;
	// end inline asm
	ld.const.u32 	%r1136, [matrix+424];
	// begin inline asm
	dp4a.u32.u32 %r1135, %r1136, %r4785, %r1131;
	// end inline asm
	ld.const.u32 	%r1140, [matrix+428];
	// begin inline asm
	dp4a.u32.u32 %r1139, %r1140, %r4789, %r1135;
	// end inline asm
	ld.const.u32 	%r1144, [matrix+432];
	// begin inline asm
	dp4a.u32.u32 %r1143, %r1144, %r4793, %r1139;
	// end inline asm
	ld.const.u32 	%r1148, [matrix+436];
	// begin inline asm
	dp4a.u32.u32 %r1147, %r1148, %r4797, %r1143;
	// end inline asm
	ld.const.u32 	%r1152, [matrix+440];
	// begin inline asm
	dp4a.u32.u32 %r1151, %r1152, %r4801, %r1147;
	// end inline asm
	ld.const.u32 	%r1156, [matrix+444];
	// begin inline asm
	dp4a.u32.u32 %r1155, %r1156, %r4805, %r1151;
	// end inline asm
	ld.const.u32 	%r1160, [matrix+448];
	// begin inline asm
	dp4a.u32.u32 %r1159, %r1160, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1164, [matrix+452];
	// begin inline asm
	dp4a.u32.u32 %r1163, %r1164, %r4749, %r1159;
	// end inline asm
	ld.const.u32 	%r1168, [matrix+456];
	// begin inline asm
	dp4a.u32.u32 %r1167, %r1168, %r4753, %r1163;
	// end inline asm
	ld.const.u32 	%r1172, [matrix+460];
	// begin inline asm
	dp4a.u32.u32 %r1171, %r1172, %r4757, %r1167;
	// end inline asm
	ld.const.u32 	%r1176, [matrix+464];
	// begin inline asm
	dp4a.u32.u32 %r1175, %r1176, %r4761, %r1171;
	// end inline asm
	ld.const.u32 	%r1180, [matrix+468];
	// begin inline asm
	dp4a.u32.u32 %r1179, %r1180, %r4765, %r1175;
	// end inline asm
	ld.const.u32 	%r1184, [matrix+472];
	// begin inline asm
	dp4a.u32.u32 %r1183, %r1184, %r4769, %r1179;
	// end inline asm
	ld.const.u32 	%r1188, [matrix+476];
	// begin inline asm
	dp4a.u32.u32 %r1187, %r1188, %r4773, %r1183;
	// end inline asm
	ld.const.u32 	%r1192, [matrix+480];
	// begin inline asm
	dp4a.u32.u32 %r1191, %r1192, %r4777, %r1187;
	// end inline asm
	ld.const.u32 	%r1196, [matrix+484];
	// begin inline asm
	dp4a.u32.u32 %r1195, %r1196, %r4781, %r1191;
	// end inline asm
	ld.const.u32 	%r1200, [matrix+488];
	// begin inline asm
	dp4a.u32.u32 %r1199, %r1200, %r4785, %r1195;
	// end inline asm
	ld.const.u32 	%r1204, [matrix+492];
	// begin inline asm
	dp4a.u32.u32 %r1203, %r1204, %r4789, %r1199;
	// end inline asm
	ld.const.u32 	%r1208, [matrix+496];
	// begin inline asm
	dp4a.u32.u32 %r1207, %r1208, %r4793, %r1203;
	// end inline asm
	ld.const.u32 	%r1212, [matrix+500];
	// begin inline asm
	dp4a.u32.u32 %r1211, %r1212, %r4797, %r1207;
	// end inline asm
	ld.const.u32 	%r1216, [matrix+504];
	// begin inline asm
	dp4a.u32.u32 %r1215, %r1216, %r4801, %r1211;
	// end inline asm
	ld.const.u32 	%r1220, [matrix+508];
	// begin inline asm
	dp4a.u32.u32 %r1219, %r1220, %r4805, %r1215;
	// end inline asm
	shr.u32 	%r4988, %r1155, 6;
	and.b32  	%r4989, %r4988, 240;
	shr.u32 	%r4990, %r1219, 10;
	or.b32  	%r4991, %r4990, %r4989;
	cvt.u64.u32 	%rd1153, %r4991;
	xor.b64  	%rd1154, %rd1109, %rd1153;
	ld.const.u32 	%r1224, [matrix+512];
	// begin inline asm
	dp4a.u32.u32 %r1223, %r1224, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1228, [matrix+516];
	// begin inline asm
	dp4a.u32.u32 %r1227, %r1228, %r4749, %r1223;
	// end inline asm
	ld.const.u32 	%r1232, [matrix+520];
	// begin inline asm
	dp4a.u32.u32 %r1231, %r1232, %r4753, %r1227;
	// end inline asm
	ld.const.u32 	%r1236, [matrix+524];
	// begin inline asm
	dp4a.u32.u32 %r1235, %r1236, %r4757, %r1231;
	// end inline asm
	ld.const.u32 	%r1240, [matrix+528];
	// begin inline asm
	dp4a.u32.u32 %r1239, %r1240, %r4761, %r1235;
	// end inline asm
	ld.const.u32 	%r1244, [matrix+532];
	// begin inline asm
	dp4a.u32.u32 %r1243, %r1244, %r4765, %r1239;
	// end inline asm
	ld.const.u32 	%r1248, [matrix+536];
	// begin inline asm
	dp4a.u32.u32 %r1247, %r1248, %r4769, %r1243;
	// end inline asm
	ld.const.u32 	%r1252, [matrix+540];
	// begin inline asm
	dp4a.u32.u32 %r1251, %r1252, %r4773, %r1247;
	// end inline asm
	ld.const.u32 	%r1256, [matrix+544];
	// begin inline asm
	dp4a.u32.u32 %r1255, %r1256, %r4777, %r1251;
	// end inline asm
	ld.const.u32 	%r1260, [matrix+548];
	// begin inline asm
	dp4a.u32.u32 %r1259, %r1260, %r4781, %r1255;
	// end inline asm
	ld.const.u32 	%r1264, [matrix+552];
	// begin inline asm
	dp4a.u32.u32 %r1263, %r1264, %r4785, %r1259;
	// end inline asm
	ld.const.u32 	%r1268, [matrix+556];
	// begin inline asm
	dp4a.u32.u32 %r1267, %r1268, %r4789, %r1263;
	// end inline asm
	ld.const.u32 	%r1272, [matrix+560];
	// begin inline asm
	dp4a.u32.u32 %r1271, %r1272, %r4793, %r1267;
	// end inline asm
	ld.const.u32 	%r1276, [matrix+564];
	// begin inline asm
	dp4a.u32.u32 %r1275, %r1276, %r4797, %r1271;
	// end inline asm
	ld.const.u32 	%r1280, [matrix+568];
	// begin inline asm
	dp4a.u32.u32 %r1279, %r1280, %r4801, %r1275;
	// end inline asm
	ld.const.u32 	%r1284, [matrix+572];
	// begin inline asm
	dp4a.u32.u32 %r1283, %r1284, %r4805, %r1279;
	// end inline asm
	ld.const.u32 	%r1288, [matrix+576];
	// begin inline asm
	dp4a.u32.u32 %r1287, %r1288, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1292, [matrix+580];
	// begin inline asm
	dp4a.u32.u32 %r1291, %r1292, %r4749, %r1287;
	// end inline asm
	ld.const.u32 	%r1296, [matrix+584];
	// begin inline asm
	dp4a.u32.u32 %r1295, %r1296, %r4753, %r1291;
	// end inline asm
	ld.const.u32 	%r1300, [matrix+588];
	// begin inline asm
	dp4a.u32.u32 %r1299, %r1300, %r4757, %r1295;
	// end inline asm
	ld.const.u32 	%r1304, [matrix+592];
	// begin inline asm
	dp4a.u32.u32 %r1303, %r1304, %r4761, %r1299;
	// end inline asm
	ld.const.u32 	%r1308, [matrix+596];
	// begin inline asm
	dp4a.u32.u32 %r1307, %r1308, %r4765, %r1303;
	// end inline asm
	ld.const.u32 	%r1312, [matrix+600];
	// begin inline asm
	dp4a.u32.u32 %r1311, %r1312, %r4769, %r1307;
	// end inline asm
	ld.const.u32 	%r1316, [matrix+604];
	// begin inline asm
	dp4a.u32.u32 %r1315, %r1316, %r4773, %r1311;
	// end inline asm
	ld.const.u32 	%r1320, [matrix+608];
	// begin inline asm
	dp4a.u32.u32 %r1319, %r1320, %r4777, %r1315;
	// end inline asm
	ld.const.u32 	%r1324, [matrix+612];
	// begin inline asm
	dp4a.u32.u32 %r1323, %r1324, %r4781, %r1319;
	// end inline asm
	ld.const.u32 	%r1328, [matrix+616];
	// begin inline asm
	dp4a.u32.u32 %r1327, %r1328, %r4785, %r1323;
	// end inline asm
	ld.const.u32 	%r1332, [matrix+620];
	// begin inline asm
	dp4a.u32.u32 %r1331, %r1332, %r4789, %r1327;
	// end inline asm
	ld.const.u32 	%r1336, [matrix+624];
	// begin inline asm
	dp4a.u32.u32 %r1335, %r1336, %r4793, %r1331;
	// end inline asm
	ld.const.u32 	%r1340, [matrix+628];
	// begin inline asm
	dp4a.u32.u32 %r1339, %r1340, %r4797, %r1335;
	// end inline asm
	ld.const.u32 	%r1344, [matrix+632];
	// begin inline asm
	dp4a.u32.u32 %r1343, %r1344, %r4801, %r1339;
	// end inline asm
	ld.const.u32 	%r1348, [matrix+636];
	// begin inline asm
	dp4a.u32.u32 %r1347, %r1348, %r4805, %r1343;
	// end inline asm
	shr.u32 	%r4992, %r1283, 6;
	and.b32  	%r4993, %r4992, 240;
	shr.u32 	%r4994, %r1347, 10;
	or.b32  	%r4995, %r4994, %r4993;
	cvt.u64.u32 	%rd1155, %r4995;
	xor.b64  	%rd1156, %rd1110, %rd1155;
	ld.const.u32 	%r1352, [matrix+640];
	// begin inline asm
	dp4a.u32.u32 %r1351, %r1352, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1356, [matrix+644];
	// begin inline asm
	dp4a.u32.u32 %r1355, %r1356, %r4749, %r1351;
	// end inline asm
	ld.const.u32 	%r1360, [matrix+648];
	// begin inline asm
	dp4a.u32.u32 %r1359, %r1360, %r4753, %r1355;
	// end inline asm
	ld.const.u32 	%r1364, [matrix+652];
	// begin inline asm
	dp4a.u32.u32 %r1363, %r1364, %r4757, %r1359;
	// end inline asm
	ld.const.u32 	%r1368, [matrix+656];
	// begin inline asm
	dp4a.u32.u32 %r1367, %r1368, %r4761, %r1363;
	// end inline asm
	ld.const.u32 	%r1372, [matrix+660];
	// begin inline asm
	dp4a.u32.u32 %r1371, %r1372, %r4765, %r1367;
	// end inline asm
	ld.const.u32 	%r1376, [matrix+664];
	// begin inline asm
	dp4a.u32.u32 %r1375, %r1376, %r4769, %r1371;
	// end inline asm
	ld.const.u32 	%r1380, [matrix+668];
	// begin inline asm
	dp4a.u32.u32 %r1379, %r1380, %r4773, %r1375;
	// end inline asm
	ld.const.u32 	%r1384, [matrix+672];
	// begin inline asm
	dp4a.u32.u32 %r1383, %r1384, %r4777, %r1379;
	// end inline asm
	ld.const.u32 	%r1388, [matrix+676];
	// begin inline asm
	dp4a.u32.u32 %r1387, %r1388, %r4781, %r1383;
	// end inline asm
	ld.const.u32 	%r1392, [matrix+680];
	// begin inline asm
	dp4a.u32.u32 %r1391, %r1392, %r4785, %r1387;
	// end inline asm
	ld.const.u32 	%r1396, [matrix+684];
	// begin inline asm
	dp4a.u32.u32 %r1395, %r1396, %r4789, %r1391;
	// end inline asm
	ld.const.u32 	%r1400, [matrix+688];
	// begin inline asm
	dp4a.u32.u32 %r1399, %r1400, %r4793, %r1395;
	// end inline asm
	ld.const.u32 	%r1404, [matrix+692];
	// begin inline asm
	dp4a.u32.u32 %r1403, %r1404, %r4797, %r1399;
	// end inline asm
	ld.const.u32 	%r1408, [matrix+696];
	// begin inline asm
	dp4a.u32.u32 %r1407, %r1408, %r4801, %r1403;
	// end inline asm
	ld.const.u32 	%r1412, [matrix+700];
	// begin inline asm
	dp4a.u32.u32 %r1411, %r1412, %r4805, %r1407;
	// end inline asm
	ld.const.u32 	%r1416, [matrix+704];
	// begin inline asm
	dp4a.u32.u32 %r1415, %r1416, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1420, [matrix+708];
	// begin inline asm
	dp4a.u32.u32 %r1419, %r1420, %r4749, %r1415;
	// end inline asm
	ld.const.u32 	%r1424, [matrix+712];
	// begin inline asm
	dp4a.u32.u32 %r1423, %r1424, %r4753, %r1419;
	// end inline asm
	ld.const.u32 	%r1428, [matrix+716];
	// begin inline asm
	dp4a.u32.u32 %r1427, %r1428, %r4757, %r1423;
	// end inline asm
	ld.const.u32 	%r1432, [matrix+720];
	// begin inline asm
	dp4a.u32.u32 %r1431, %r1432, %r4761, %r1427;
	// end inline asm
	ld.const.u32 	%r1436, [matrix+724];
	// begin inline asm
	dp4a.u32.u32 %r1435, %r1436, %r4765, %r1431;
	// end inline asm
	ld.const.u32 	%r1440, [matrix+728];
	// begin inline asm
	dp4a.u32.u32 %r1439, %r1440, %r4769, %r1435;
	// end inline asm
	ld.const.u32 	%r1444, [matrix+732];
	// begin inline asm
	dp4a.u32.u32 %r1443, %r1444, %r4773, %r1439;
	// end inline asm
	ld.const.u32 	%r1448, [matrix+736];
	// begin inline asm
	dp4a.u32.u32 %r1447, %r1448, %r4777, %r1443;
	// end inline asm
	ld.const.u32 	%r1452, [matrix+740];
	// begin inline asm
	dp4a.u32.u32 %r1451, %r1452, %r4781, %r1447;
	// end inline asm
	ld.const.u32 	%r1456, [matrix+744];
	// begin inline asm
	dp4a.u32.u32 %r1455, %r1456, %r4785, %r1451;
	// end inline asm
	ld.const.u32 	%r1460, [matrix+748];
	// begin inline asm
	dp4a.u32.u32 %r1459, %r1460, %r4789, %r1455;
	// end inline asm
	ld.const.u32 	%r1464, [matrix+752];
	// begin inline asm
	dp4a.u32.u32 %r1463, %r1464, %r4793, %r1459;
	// end inline asm
	ld.const.u32 	%r1468, [matrix+756];
	// begin inline asm
	dp4a.u32.u32 %r1467, %r1468, %r4797, %r1463;
	// end inline asm
	ld.const.u32 	%r1472, [matrix+760];
	// begin inline asm
	dp4a.u32.u32 %r1471, %r1472, %r4801, %r1467;
	// end inline asm
	ld.const.u32 	%r1476, [matrix+764];
	// begin inline asm
	dp4a.u32.u32 %r1475, %r1476, %r4805, %r1471;
	// end inline asm
	shr.u32 	%r4996, %r1411, 6;
	and.b32  	%r4997, %r4996, 240;
	shr.u32 	%r4998, %r1475, 10;
	or.b32  	%r4999, %r4998, %r4997;
	cvt.u64.u32 	%rd1157, %r4999;
	xor.b64  	%rd1158, %rd1111, %rd1157;
	ld.const.u32 	%r1480, [matrix+768];
	// begin inline asm
	dp4a.u32.u32 %r1479, %r1480, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1484, [matrix+772];
	// begin inline asm
	dp4a.u32.u32 %r1483, %r1484, %r4749, %r1479;
	// end inline asm
	ld.const.u32 	%r1488, [matrix+776];
	// begin inline asm
	dp4a.u32.u32 %r1487, %r1488, %r4753, %r1483;
	// end inline asm
	ld.const.u32 	%r1492, [matrix+780];
	// begin inline asm
	dp4a.u32.u32 %r1491, %r1492, %r4757, %r1487;
	// end inline asm
	ld.const.u32 	%r1496, [matrix+784];
	// begin inline asm
	dp4a.u32.u32 %r1495, %r1496, %r4761, %r1491;
	// end inline asm
	ld.const.u32 	%r1500, [matrix+788];
	// begin inline asm
	dp4a.u32.u32 %r1499, %r1500, %r4765, %r1495;
	// end inline asm
	ld.const.u32 	%r1504, [matrix+792];
	// begin inline asm
	dp4a.u32.u32 %r1503, %r1504, %r4769, %r1499;
	// end inline asm
	ld.const.u32 	%r1508, [matrix+796];
	// begin inline asm
	dp4a.u32.u32 %r1507, %r1508, %r4773, %r1503;
	// end inline asm
	ld.const.u32 	%r1512, [matrix+800];
	// begin inline asm
	dp4a.u32.u32 %r1511, %r1512, %r4777, %r1507;
	// end inline asm
	ld.const.u32 	%r1516, [matrix+804];
	// begin inline asm
	dp4a.u32.u32 %r1515, %r1516, %r4781, %r1511;
	// end inline asm
	ld.const.u32 	%r1520, [matrix+808];
	// begin inline asm
	dp4a.u32.u32 %r1519, %r1520, %r4785, %r1515;
	// end inline asm
	ld.const.u32 	%r1524, [matrix+812];
	// begin inline asm
	dp4a.u32.u32 %r1523, %r1524, %r4789, %r1519;
	// end inline asm
	ld.const.u32 	%r1528, [matrix+816];
	// begin inline asm
	dp4a.u32.u32 %r1527, %r1528, %r4793, %r1523;
	// end inline asm
	ld.const.u32 	%r1532, [matrix+820];
	// begin inline asm
	dp4a.u32.u32 %r1531, %r1532, %r4797, %r1527;
	// end inline asm
	ld.const.u32 	%r1536, [matrix+824];
	// begin inline asm
	dp4a.u32.u32 %r1535, %r1536, %r4801, %r1531;
	// end inline asm
	ld.const.u32 	%r1540, [matrix+828];
	// begin inline asm
	dp4a.u32.u32 %r1539, %r1540, %r4805, %r1535;
	// end inline asm
	ld.const.u32 	%r1544, [matrix+832];
	// begin inline asm
	dp4a.u32.u32 %r1543, %r1544, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1548, [matrix+836];
	// begin inline asm
	dp4a.u32.u32 %r1547, %r1548, %r4749, %r1543;
	// end inline asm
	ld.const.u32 	%r1552, [matrix+840];
	// begin inline asm
	dp4a.u32.u32 %r1551, %r1552, %r4753, %r1547;
	// end inline asm
	ld.const.u32 	%r1556, [matrix+844];
	// begin inline asm
	dp4a.u32.u32 %r1555, %r1556, %r4757, %r1551;
	// end inline asm
	ld.const.u32 	%r1560, [matrix+848];
	// begin inline asm
	dp4a.u32.u32 %r1559, %r1560, %r4761, %r1555;
	// end inline asm
	ld.const.u32 	%r1564, [matrix+852];
	// begin inline asm
	dp4a.u32.u32 %r1563, %r1564, %r4765, %r1559;
	// end inline asm
	ld.const.u32 	%r1568, [matrix+856];
	// begin inline asm
	dp4a.u32.u32 %r1567, %r1568, %r4769, %r1563;
	// end inline asm
	ld.const.u32 	%r1572, [matrix+860];
	// begin inline asm
	dp4a.u32.u32 %r1571, %r1572, %r4773, %r1567;
	// end inline asm
	ld.const.u32 	%r1576, [matrix+864];
	// begin inline asm
	dp4a.u32.u32 %r1575, %r1576, %r4777, %r1571;
	// end inline asm
	ld.const.u32 	%r1580, [matrix+868];
	// begin inline asm
	dp4a.u32.u32 %r1579, %r1580, %r4781, %r1575;
	// end inline asm
	ld.const.u32 	%r1584, [matrix+872];
	// begin inline asm
	dp4a.u32.u32 %r1583, %r1584, %r4785, %r1579;
	// end inline asm
	ld.const.u32 	%r1588, [matrix+876];
	// begin inline asm
	dp4a.u32.u32 %r1587, %r1588, %r4789, %r1583;
	// end inline asm
	ld.const.u32 	%r1592, [matrix+880];
	// begin inline asm
	dp4a.u32.u32 %r1591, %r1592, %r4793, %r1587;
	// end inline asm
	ld.const.u32 	%r1596, [matrix+884];
	// begin inline asm
	dp4a.u32.u32 %r1595, %r1596, %r4797, %r1591;
	// end inline asm
	ld.const.u32 	%r1600, [matrix+888];
	// begin inline asm
	dp4a.u32.u32 %r1599, %r1600, %r4801, %r1595;
	// end inline asm
	ld.const.u32 	%r1604, [matrix+892];
	// begin inline asm
	dp4a.u32.u32 %r1603, %r1604, %r4805, %r1599;
	// end inline asm
	shr.u32 	%r5000, %r1539, 6;
	and.b32  	%r5001, %r5000, 240;
	shr.u32 	%r5002, %r1603, 10;
	or.b32  	%r5003, %r5002, %r5001;
	cvt.u64.u32 	%rd1159, %r5003;
	xor.b64  	%rd1160, %rd1112, %rd1159;
	ld.const.u32 	%r1608, [matrix+896];
	// begin inline asm
	dp4a.u32.u32 %r1607, %r1608, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1612, [matrix+900];
	// begin inline asm
	dp4a.u32.u32 %r1611, %r1612, %r4749, %r1607;
	// end inline asm
	ld.const.u32 	%r1616, [matrix+904];
	// begin inline asm
	dp4a.u32.u32 %r1615, %r1616, %r4753, %r1611;
	// end inline asm
	ld.const.u32 	%r1620, [matrix+908];
	// begin inline asm
	dp4a.u32.u32 %r1619, %r1620, %r4757, %r1615;
	// end inline asm
	ld.const.u32 	%r1624, [matrix+912];
	// begin inline asm
	dp4a.u32.u32 %r1623, %r1624, %r4761, %r1619;
	// end inline asm
	ld.const.u32 	%r1628, [matrix+916];
	// begin inline asm
	dp4a.u32.u32 %r1627, %r1628, %r4765, %r1623;
	// end inline asm
	ld.const.u32 	%r1632, [matrix+920];
	// begin inline asm
	dp4a.u32.u32 %r1631, %r1632, %r4769, %r1627;
	// end inline asm
	ld.const.u32 	%r1636, [matrix+924];
	// begin inline asm
	dp4a.u32.u32 %r1635, %r1636, %r4773, %r1631;
	// end inline asm
	ld.const.u32 	%r1640, [matrix+928];
	// begin inline asm
	dp4a.u32.u32 %r1639, %r1640, %r4777, %r1635;
	// end inline asm
	ld.const.u32 	%r1644, [matrix+932];
	// begin inline asm
	dp4a.u32.u32 %r1643, %r1644, %r4781, %r1639;
	// end inline asm
	ld.const.u32 	%r1648, [matrix+936];
	// begin inline asm
	dp4a.u32.u32 %r1647, %r1648, %r4785, %r1643;
	// end inline asm
	ld.const.u32 	%r1652, [matrix+940];
	// begin inline asm
	dp4a.u32.u32 %r1651, %r1652, %r4789, %r1647;
	// end inline asm
	ld.const.u32 	%r1656, [matrix+944];
	// begin inline asm
	dp4a.u32.u32 %r1655, %r1656, %r4793, %r1651;
	// end inline asm
	ld.const.u32 	%r1660, [matrix+948];
	// begin inline asm
	dp4a.u32.u32 %r1659, %r1660, %r4797, %r1655;
	// end inline asm
	ld.const.u32 	%r1664, [matrix+952];
	// begin inline asm
	dp4a.u32.u32 %r1663, %r1664, %r4801, %r1659;
	// end inline asm
	ld.const.u32 	%r1668, [matrix+956];
	// begin inline asm
	dp4a.u32.u32 %r1667, %r1668, %r4805, %r1663;
	// end inline asm
	ld.const.u32 	%r1672, [matrix+960];
	// begin inline asm
	dp4a.u32.u32 %r1671, %r1672, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1676, [matrix+964];
	// begin inline asm
	dp4a.u32.u32 %r1675, %r1676, %r4749, %r1671;
	// end inline asm
	ld.const.u32 	%r1680, [matrix+968];
	// begin inline asm
	dp4a.u32.u32 %r1679, %r1680, %r4753, %r1675;
	// end inline asm
	ld.const.u32 	%r1684, [matrix+972];
	// begin inline asm
	dp4a.u32.u32 %r1683, %r1684, %r4757, %r1679;
	// end inline asm
	ld.const.u32 	%r1688, [matrix+976];
	// begin inline asm
	dp4a.u32.u32 %r1687, %r1688, %r4761, %r1683;
	// end inline asm
	ld.const.u32 	%r1692, [matrix+980];
	// begin inline asm
	dp4a.u32.u32 %r1691, %r1692, %r4765, %r1687;
	// end inline asm
	ld.const.u32 	%r1696, [matrix+984];
	// begin inline asm
	dp4a.u32.u32 %r1695, %r1696, %r4769, %r1691;
	// end inline asm
	ld.const.u32 	%r1700, [matrix+988];
	// begin inline asm
	dp4a.u32.u32 %r1699, %r1700, %r4773, %r1695;
	// end inline asm
	ld.const.u32 	%r1704, [matrix+992];
	// begin inline asm
	dp4a.u32.u32 %r1703, %r1704, %r4777, %r1699;
	// end inline asm
	ld.const.u32 	%r1708, [matrix+996];
	// begin inline asm
	dp4a.u32.u32 %r1707, %r1708, %r4781, %r1703;
	// end inline asm
	ld.const.u32 	%r1712, [matrix+1000];
	// begin inline asm
	dp4a.u32.u32 %r1711, %r1712, %r4785, %r1707;
	// end inline asm
	ld.const.u32 	%r1716, [matrix+1004];
	// begin inline asm
	dp4a.u32.u32 %r1715, %r1716, %r4789, %r1711;
	// end inline asm
	ld.const.u32 	%r1720, [matrix+1008];
	// begin inline asm
	dp4a.u32.u32 %r1719, %r1720, %r4793, %r1715;
	// end inline asm
	ld.const.u32 	%r1724, [matrix+1012];
	// begin inline asm
	dp4a.u32.u32 %r1723, %r1724, %r4797, %r1719;
	// end inline asm
	ld.const.u32 	%r1728, [matrix+1016];
	// begin inline asm
	dp4a.u32.u32 %r1727, %r1728, %r4801, %r1723;
	// end inline asm
	ld.const.u32 	%r1732, [matrix+1020];
	// begin inline asm
	dp4a.u32.u32 %r1731, %r1732, %r4805, %r1727;
	// end inline asm
	shr.u32 	%r5004, %r1667, 6;
	and.b32  	%r5005, %r5004, 240;
	shr.u32 	%r5006, %r1731, 10;
	or.b32  	%r5007, %r5006, %r5005;
	cvt.u64.u32 	%rd1161, %r5007;
	ld.const.u32 	%r1736, [matrix+1024];
	// begin inline asm
	dp4a.u32.u32 %r1735, %r1736, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1740, [matrix+1028];
	// begin inline asm
	dp4a.u32.u32 %r1739, %r1740, %r4749, %r1735;
	// end inline asm
	ld.const.u32 	%r1744, [matrix+1032];
	// begin inline asm
	dp4a.u32.u32 %r1743, %r1744, %r4753, %r1739;
	// end inline asm
	ld.const.u32 	%r1748, [matrix+1036];
	// begin inline asm
	dp4a.u32.u32 %r1747, %r1748, %r4757, %r1743;
	// end inline asm
	ld.const.u32 	%r1752, [matrix+1040];
	// begin inline asm
	dp4a.u32.u32 %r1751, %r1752, %r4761, %r1747;
	// end inline asm
	ld.const.u32 	%r1756, [matrix+1044];
	// begin inline asm
	dp4a.u32.u32 %r1755, %r1756, %r4765, %r1751;
	// end inline asm
	ld.const.u32 	%r1760, [matrix+1048];
	// begin inline asm
	dp4a.u32.u32 %r1759, %r1760, %r4769, %r1755;
	// end inline asm
	ld.const.u32 	%r1764, [matrix+1052];
	// begin inline asm
	dp4a.u32.u32 %r1763, %r1764, %r4773, %r1759;
	// end inline asm
	ld.const.u32 	%r1768, [matrix+1056];
	// begin inline asm
	dp4a.u32.u32 %r1767, %r1768, %r4777, %r1763;
	// end inline asm
	ld.const.u32 	%r1772, [matrix+1060];
	// begin inline asm
	dp4a.u32.u32 %r1771, %r1772, %r4781, %r1767;
	// end inline asm
	ld.const.u32 	%r1776, [matrix+1064];
	// begin inline asm
	dp4a.u32.u32 %r1775, %r1776, %r4785, %r1771;
	// end inline asm
	ld.const.u32 	%r1780, [matrix+1068];
	// begin inline asm
	dp4a.u32.u32 %r1779, %r1780, %r4789, %r1775;
	// end inline asm
	ld.const.u32 	%r1784, [matrix+1072];
	// begin inline asm
	dp4a.u32.u32 %r1783, %r1784, %r4793, %r1779;
	// end inline asm
	ld.const.u32 	%r1788, [matrix+1076];
	// begin inline asm
	dp4a.u32.u32 %r1787, %r1788, %r4797, %r1783;
	// end inline asm
	ld.const.u32 	%r1792, [matrix+1080];
	// begin inline asm
	dp4a.u32.u32 %r1791, %r1792, %r4801, %r1787;
	// end inline asm
	ld.const.u32 	%r1796, [matrix+1084];
	// begin inline asm
	dp4a.u32.u32 %r1795, %r1796, %r4805, %r1791;
	// end inline asm
	ld.const.u32 	%r1800, [matrix+1088];
	// begin inline asm
	dp4a.u32.u32 %r1799, %r1800, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1804, [matrix+1092];
	// begin inline asm
	dp4a.u32.u32 %r1803, %r1804, %r4749, %r1799;
	// end inline asm
	ld.const.u32 	%r1808, [matrix+1096];
	// begin inline asm
	dp4a.u32.u32 %r1807, %r1808, %r4753, %r1803;
	// end inline asm
	ld.const.u32 	%r1812, [matrix+1100];
	// begin inline asm
	dp4a.u32.u32 %r1811, %r1812, %r4757, %r1807;
	// end inline asm
	ld.const.u32 	%r1816, [matrix+1104];
	// begin inline asm
	dp4a.u32.u32 %r1815, %r1816, %r4761, %r1811;
	// end inline asm
	ld.const.u32 	%r1820, [matrix+1108];
	// begin inline asm
	dp4a.u32.u32 %r1819, %r1820, %r4765, %r1815;
	// end inline asm
	ld.const.u32 	%r1824, [matrix+1112];
	// begin inline asm
	dp4a.u32.u32 %r1823, %r1824, %r4769, %r1819;
	// end inline asm
	ld.const.u32 	%r1828, [matrix+1116];
	// begin inline asm
	dp4a.u32.u32 %r1827, %r1828, %r4773, %r1823;
	// end inline asm
	ld.const.u32 	%r1832, [matrix+1120];
	// begin inline asm
	dp4a.u32.u32 %r1831, %r1832, %r4777, %r1827;
	// end inline asm
	ld.const.u32 	%r1836, [matrix+1124];
	// begin inline asm
	dp4a.u32.u32 %r1835, %r1836, %r4781, %r1831;
	// end inline asm
	ld.const.u32 	%r1840, [matrix+1128];
	// begin inline asm
	dp4a.u32.u32 %r1839, %r1840, %r4785, %r1835;
	// end inline asm
	ld.const.u32 	%r1844, [matrix+1132];
	// begin inline asm
	dp4a.u32.u32 %r1843, %r1844, %r4789, %r1839;
	// end inline asm
	ld.const.u32 	%r1848, [matrix+1136];
	// begin inline asm
	dp4a.u32.u32 %r1847, %r1848, %r4793, %r1843;
	// end inline asm
	ld.const.u32 	%r1852, [matrix+1140];
	// begin inline asm
	dp4a.u32.u32 %r1851, %r1852, %r4797, %r1847;
	// end inline asm
	ld.const.u32 	%r1856, [matrix+1144];
	// begin inline asm
	dp4a.u32.u32 %r1855, %r1856, %r4801, %r1851;
	// end inline asm
	ld.const.u32 	%r1860, [matrix+1148];
	// begin inline asm
	dp4a.u32.u32 %r1859, %r1860, %r4805, %r1855;
	// end inline asm
	shr.u32 	%r5008, %r1795, 6;
	and.b32  	%r5009, %r5008, 240;
	shr.u32 	%r5010, %r1859, 10;
	or.b32  	%r5011, %r5010, %r5009;
	cvt.u64.u32 	%rd1162, %r5011;
	xor.b64  	%rd1163, %rd2232, %rd1162;
	ld.const.u32 	%r1864, [matrix+1152];
	// begin inline asm
	dp4a.u32.u32 %r1863, %r1864, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1868, [matrix+1156];
	// begin inline asm
	dp4a.u32.u32 %r1867, %r1868, %r4749, %r1863;
	// end inline asm
	ld.const.u32 	%r1872, [matrix+1160];
	// begin inline asm
	dp4a.u32.u32 %r1871, %r1872, %r4753, %r1867;
	// end inline asm
	ld.const.u32 	%r1876, [matrix+1164];
	// begin inline asm
	dp4a.u32.u32 %r1875, %r1876, %r4757, %r1871;
	// end inline asm
	ld.const.u32 	%r1880, [matrix+1168];
	// begin inline asm
	dp4a.u32.u32 %r1879, %r1880, %r4761, %r1875;
	// end inline asm
	ld.const.u32 	%r1884, [matrix+1172];
	// begin inline asm
	dp4a.u32.u32 %r1883, %r1884, %r4765, %r1879;
	// end inline asm
	ld.const.u32 	%r1888, [matrix+1176];
	// begin inline asm
	dp4a.u32.u32 %r1887, %r1888, %r4769, %r1883;
	// end inline asm
	ld.const.u32 	%r1892, [matrix+1180];
	// begin inline asm
	dp4a.u32.u32 %r1891, %r1892, %r4773, %r1887;
	// end inline asm
	ld.const.u32 	%r1896, [matrix+1184];
	// begin inline asm
	dp4a.u32.u32 %r1895, %r1896, %r4777, %r1891;
	// end inline asm
	ld.const.u32 	%r1900, [matrix+1188];
	// begin inline asm
	dp4a.u32.u32 %r1899, %r1900, %r4781, %r1895;
	// end inline asm
	ld.const.u32 	%r1904, [matrix+1192];
	// begin inline asm
	dp4a.u32.u32 %r1903, %r1904, %r4785, %r1899;
	// end inline asm
	ld.const.u32 	%r1908, [matrix+1196];
	// begin inline asm
	dp4a.u32.u32 %r1907, %r1908, %r4789, %r1903;
	// end inline asm
	ld.const.u32 	%r1912, [matrix+1200];
	// begin inline asm
	dp4a.u32.u32 %r1911, %r1912, %r4793, %r1907;
	// end inline asm
	ld.const.u32 	%r1916, [matrix+1204];
	// begin inline asm
	dp4a.u32.u32 %r1915, %r1916, %r4797, %r1911;
	// end inline asm
	ld.const.u32 	%r1920, [matrix+1208];
	// begin inline asm
	dp4a.u32.u32 %r1919, %r1920, %r4801, %r1915;
	// end inline asm
	ld.const.u32 	%r1924, [matrix+1212];
	// begin inline asm
	dp4a.u32.u32 %r1923, %r1924, %r4805, %r1919;
	// end inline asm
	ld.const.u32 	%r1928, [matrix+1216];
	// begin inline asm
	dp4a.u32.u32 %r1927, %r1928, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1932, [matrix+1220];
	// begin inline asm
	dp4a.u32.u32 %r1931, %r1932, %r4749, %r1927;
	// end inline asm
	ld.const.u32 	%r1936, [matrix+1224];
	// begin inline asm
	dp4a.u32.u32 %r1935, %r1936, %r4753, %r1931;
	// end inline asm
	ld.const.u32 	%r1940, [matrix+1228];
	// begin inline asm
	dp4a.u32.u32 %r1939, %r1940, %r4757, %r1935;
	// end inline asm
	ld.const.u32 	%r1944, [matrix+1232];
	// begin inline asm
	dp4a.u32.u32 %r1943, %r1944, %r4761, %r1939;
	// end inline asm
	ld.const.u32 	%r1948, [matrix+1236];
	// begin inline asm
	dp4a.u32.u32 %r1947, %r1948, %r4765, %r1943;
	// end inline asm
	ld.const.u32 	%r1952, [matrix+1240];
	// begin inline asm
	dp4a.u32.u32 %r1951, %r1952, %r4769, %r1947;
	// end inline asm
	ld.const.u32 	%r1956, [matrix+1244];
	// begin inline asm
	dp4a.u32.u32 %r1955, %r1956, %r4773, %r1951;
	// end inline asm
	ld.const.u32 	%r1960, [matrix+1248];
	// begin inline asm
	dp4a.u32.u32 %r1959, %r1960, %r4777, %r1955;
	// end inline asm
	ld.const.u32 	%r1964, [matrix+1252];
	// begin inline asm
	dp4a.u32.u32 %r1963, %r1964, %r4781, %r1959;
	// end inline asm
	ld.const.u32 	%r1968, [matrix+1256];
	// begin inline asm
	dp4a.u32.u32 %r1967, %r1968, %r4785, %r1963;
	// end inline asm
	ld.const.u32 	%r1972, [matrix+1260];
	// begin inline asm
	dp4a.u32.u32 %r1971, %r1972, %r4789, %r1967;
	// end inline asm
	ld.const.u32 	%r1976, [matrix+1264];
	// begin inline asm
	dp4a.u32.u32 %r1975, %r1976, %r4793, %r1971;
	// end inline asm
	ld.const.u32 	%r1980, [matrix+1268];
	// begin inline asm
	dp4a.u32.u32 %r1979, %r1980, %r4797, %r1975;
	// end inline asm
	ld.const.u32 	%r1984, [matrix+1272];
	// begin inline asm
	dp4a.u32.u32 %r1983, %r1984, %r4801, %r1979;
	// end inline asm
	ld.const.u32 	%r1988, [matrix+1276];
	// begin inline asm
	dp4a.u32.u32 %r1987, %r1988, %r4805, %r1983;
	// end inline asm
	shr.u32 	%r5012, %r1923, 6;
	and.b32  	%r5013, %r5012, 240;
	shr.u32 	%r5014, %r1987, 10;
	or.b32  	%r5015, %r5014, %r5013;
	cvt.u64.u32 	%rd1164, %r5015;
	xor.b64  	%rd1165, %rd1114, %rd1164;
	ld.const.u32 	%r1992, [matrix+1280];
	// begin inline asm
	dp4a.u32.u32 %r1991, %r1992, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r1996, [matrix+1284];
	// begin inline asm
	dp4a.u32.u32 %r1995, %r1996, %r4749, %r1991;
	// end inline asm
	ld.const.u32 	%r2000, [matrix+1288];
	// begin inline asm
	dp4a.u32.u32 %r1999, %r2000, %r4753, %r1995;
	// end inline asm
	ld.const.u32 	%r2004, [matrix+1292];
	// begin inline asm
	dp4a.u32.u32 %r2003, %r2004, %r4757, %r1999;
	// end inline asm
	ld.const.u32 	%r2008, [matrix+1296];
	// begin inline asm
	dp4a.u32.u32 %r2007, %r2008, %r4761, %r2003;
	// end inline asm
	ld.const.u32 	%r2012, [matrix+1300];
	// begin inline asm
	dp4a.u32.u32 %r2011, %r2012, %r4765, %r2007;
	// end inline asm
	ld.const.u32 	%r2016, [matrix+1304];
	// begin inline asm
	dp4a.u32.u32 %r2015, %r2016, %r4769, %r2011;
	// end inline asm
	ld.const.u32 	%r2020, [matrix+1308];
	// begin inline asm
	dp4a.u32.u32 %r2019, %r2020, %r4773, %r2015;
	// end inline asm
	ld.const.u32 	%r2024, [matrix+1312];
	// begin inline asm
	dp4a.u32.u32 %r2023, %r2024, %r4777, %r2019;
	// end inline asm
	ld.const.u32 	%r2028, [matrix+1316];
	// begin inline asm
	dp4a.u32.u32 %r2027, %r2028, %r4781, %r2023;
	// end inline asm
	ld.const.u32 	%r2032, [matrix+1320];
	// begin inline asm
	dp4a.u32.u32 %r2031, %r2032, %r4785, %r2027;
	// end inline asm
	ld.const.u32 	%r2036, [matrix+1324];
	// begin inline asm
	dp4a.u32.u32 %r2035, %r2036, %r4789, %r2031;
	// end inline asm
	ld.const.u32 	%r2040, [matrix+1328];
	// begin inline asm
	dp4a.u32.u32 %r2039, %r2040, %r4793, %r2035;
	// end inline asm
	ld.const.u32 	%r2044, [matrix+1332];
	// begin inline asm
	dp4a.u32.u32 %r2043, %r2044, %r4797, %r2039;
	// end inline asm
	ld.const.u32 	%r2048, [matrix+1336];
	// begin inline asm
	dp4a.u32.u32 %r2047, %r2048, %r4801, %r2043;
	// end inline asm
	ld.const.u32 	%r2052, [matrix+1340];
	// begin inline asm
	dp4a.u32.u32 %r2051, %r2052, %r4805, %r2047;
	// end inline asm
	ld.const.u32 	%r2056, [matrix+1344];
	// begin inline asm
	dp4a.u32.u32 %r2055, %r2056, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2060, [matrix+1348];
	// begin inline asm
	dp4a.u32.u32 %r2059, %r2060, %r4749, %r2055;
	// end inline asm
	ld.const.u32 	%r2064, [matrix+1352];
	// begin inline asm
	dp4a.u32.u32 %r2063, %r2064, %r4753, %r2059;
	// end inline asm
	ld.const.u32 	%r2068, [matrix+1356];
	// begin inline asm
	dp4a.u32.u32 %r2067, %r2068, %r4757, %r2063;
	// end inline asm
	ld.const.u32 	%r2072, [matrix+1360];
	// begin inline asm
	dp4a.u32.u32 %r2071, %r2072, %r4761, %r2067;
	// end inline asm
	ld.const.u32 	%r2076, [matrix+1364];
	// begin inline asm
	dp4a.u32.u32 %r2075, %r2076, %r4765, %r2071;
	// end inline asm
	ld.const.u32 	%r2080, [matrix+1368];
	// begin inline asm
	dp4a.u32.u32 %r2079, %r2080, %r4769, %r2075;
	// end inline asm
	ld.const.u32 	%r2084, [matrix+1372];
	// begin inline asm
	dp4a.u32.u32 %r2083, %r2084, %r4773, %r2079;
	// end inline asm
	ld.const.u32 	%r2088, [matrix+1376];
	// begin inline asm
	dp4a.u32.u32 %r2087, %r2088, %r4777, %r2083;
	// end inline asm
	ld.const.u32 	%r2092, [matrix+1380];
	// begin inline asm
	dp4a.u32.u32 %r2091, %r2092, %r4781, %r2087;
	// end inline asm
	ld.const.u32 	%r2096, [matrix+1384];
	// begin inline asm
	dp4a.u32.u32 %r2095, %r2096, %r4785, %r2091;
	// end inline asm
	ld.const.u32 	%r2100, [matrix+1388];
	// begin inline asm
	dp4a.u32.u32 %r2099, %r2100, %r4789, %r2095;
	// end inline asm
	ld.const.u32 	%r2104, [matrix+1392];
	// begin inline asm
	dp4a.u32.u32 %r2103, %r2104, %r4793, %r2099;
	// end inline asm
	ld.const.u32 	%r2108, [matrix+1396];
	// begin inline asm
	dp4a.u32.u32 %r2107, %r2108, %r4797, %r2103;
	// end inline asm
	ld.const.u32 	%r2112, [matrix+1400];
	// begin inline asm
	dp4a.u32.u32 %r2111, %r2112, %r4801, %r2107;
	// end inline asm
	ld.const.u32 	%r2116, [matrix+1404];
	// begin inline asm
	dp4a.u32.u32 %r2115, %r2116, %r4805, %r2111;
	// end inline asm
	shr.u32 	%r5016, %r2051, 6;
	and.b32  	%r5017, %r5016, 240;
	shr.u32 	%r5018, %r2115, 10;
	or.b32  	%r5019, %r5018, %r5017;
	cvt.u64.u32 	%rd1166, %r5019;
	xor.b64  	%rd1167, %rd1115, %rd1166;
	ld.const.u32 	%r2120, [matrix+1408];
	// begin inline asm
	dp4a.u32.u32 %r2119, %r2120, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2124, [matrix+1412];
	// begin inline asm
	dp4a.u32.u32 %r2123, %r2124, %r4749, %r2119;
	// end inline asm
	ld.const.u32 	%r2128, [matrix+1416];
	// begin inline asm
	dp4a.u32.u32 %r2127, %r2128, %r4753, %r2123;
	// end inline asm
	ld.const.u32 	%r2132, [matrix+1420];
	// begin inline asm
	dp4a.u32.u32 %r2131, %r2132, %r4757, %r2127;
	// end inline asm
	ld.const.u32 	%r2136, [matrix+1424];
	// begin inline asm
	dp4a.u32.u32 %r2135, %r2136, %r4761, %r2131;
	// end inline asm
	ld.const.u32 	%r2140, [matrix+1428];
	// begin inline asm
	dp4a.u32.u32 %r2139, %r2140, %r4765, %r2135;
	// end inline asm
	ld.const.u32 	%r2144, [matrix+1432];
	// begin inline asm
	dp4a.u32.u32 %r2143, %r2144, %r4769, %r2139;
	// end inline asm
	ld.const.u32 	%r2148, [matrix+1436];
	// begin inline asm
	dp4a.u32.u32 %r2147, %r2148, %r4773, %r2143;
	// end inline asm
	ld.const.u32 	%r2152, [matrix+1440];
	// begin inline asm
	dp4a.u32.u32 %r2151, %r2152, %r4777, %r2147;
	// end inline asm
	ld.const.u32 	%r2156, [matrix+1444];
	// begin inline asm
	dp4a.u32.u32 %r2155, %r2156, %r4781, %r2151;
	// end inline asm
	ld.const.u32 	%r2160, [matrix+1448];
	// begin inline asm
	dp4a.u32.u32 %r2159, %r2160, %r4785, %r2155;
	// end inline asm
	ld.const.u32 	%r2164, [matrix+1452];
	// begin inline asm
	dp4a.u32.u32 %r2163, %r2164, %r4789, %r2159;
	// end inline asm
	ld.const.u32 	%r2168, [matrix+1456];
	// begin inline asm
	dp4a.u32.u32 %r2167, %r2168, %r4793, %r2163;
	// end inline asm
	ld.const.u32 	%r2172, [matrix+1460];
	// begin inline asm
	dp4a.u32.u32 %r2171, %r2172, %r4797, %r2167;
	// end inline asm
	ld.const.u32 	%r2176, [matrix+1464];
	// begin inline asm
	dp4a.u32.u32 %r2175, %r2176, %r4801, %r2171;
	// end inline asm
	ld.const.u32 	%r2180, [matrix+1468];
	// begin inline asm
	dp4a.u32.u32 %r2179, %r2180, %r4805, %r2175;
	// end inline asm
	ld.const.u32 	%r2184, [matrix+1472];
	// begin inline asm
	dp4a.u32.u32 %r2183, %r2184, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2188, [matrix+1476];
	// begin inline asm
	dp4a.u32.u32 %r2187, %r2188, %r4749, %r2183;
	// end inline asm
	ld.const.u32 	%r2192, [matrix+1480];
	// begin inline asm
	dp4a.u32.u32 %r2191, %r2192, %r4753, %r2187;
	// end inline asm
	ld.const.u32 	%r2196, [matrix+1484];
	// begin inline asm
	dp4a.u32.u32 %r2195, %r2196, %r4757, %r2191;
	// end inline asm
	ld.const.u32 	%r2200, [matrix+1488];
	// begin inline asm
	dp4a.u32.u32 %r2199, %r2200, %r4761, %r2195;
	// end inline asm
	ld.const.u32 	%r2204, [matrix+1492];
	// begin inline asm
	dp4a.u32.u32 %r2203, %r2204, %r4765, %r2199;
	// end inline asm
	ld.const.u32 	%r2208, [matrix+1496];
	// begin inline asm
	dp4a.u32.u32 %r2207, %r2208, %r4769, %r2203;
	// end inline asm
	ld.const.u32 	%r2212, [matrix+1500];
	// begin inline asm
	dp4a.u32.u32 %r2211, %r2212, %r4773, %r2207;
	// end inline asm
	ld.const.u32 	%r2216, [matrix+1504];
	// begin inline asm
	dp4a.u32.u32 %r2215, %r2216, %r4777, %r2211;
	// end inline asm
	ld.const.u32 	%r2220, [matrix+1508];
	// begin inline asm
	dp4a.u32.u32 %r2219, %r2220, %r4781, %r2215;
	// end inline asm
	ld.const.u32 	%r2224, [matrix+1512];
	// begin inline asm
	dp4a.u32.u32 %r2223, %r2224, %r4785, %r2219;
	// end inline asm
	ld.const.u32 	%r2228, [matrix+1516];
	// begin inline asm
	dp4a.u32.u32 %r2227, %r2228, %r4789, %r2223;
	// end inline asm
	ld.const.u32 	%r2232, [matrix+1520];
	// begin inline asm
	dp4a.u32.u32 %r2231, %r2232, %r4793, %r2227;
	// end inline asm
	ld.const.u32 	%r2236, [matrix+1524];
	// begin inline asm
	dp4a.u32.u32 %r2235, %r2236, %r4797, %r2231;
	// end inline asm
	ld.const.u32 	%r2240, [matrix+1528];
	// begin inline asm
	dp4a.u32.u32 %r2239, %r2240, %r4801, %r2235;
	// end inline asm
	ld.const.u32 	%r2244, [matrix+1532];
	// begin inline asm
	dp4a.u32.u32 %r2243, %r2244, %r4805, %r2239;
	// end inline asm
	shr.u32 	%r5020, %r2179, 6;
	and.b32  	%r5021, %r5020, 240;
	shr.u32 	%r5022, %r2243, 10;
	or.b32  	%r5023, %r5022, %r5021;
	cvt.u64.u32 	%rd1168, %r5023;
	xor.b64  	%rd1169, %rd1116, %rd1168;
	ld.const.u32 	%r2248, [matrix+1536];
	// begin inline asm
	dp4a.u32.u32 %r2247, %r2248, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2252, [matrix+1540];
	// begin inline asm
	dp4a.u32.u32 %r2251, %r2252, %r4749, %r2247;
	// end inline asm
	ld.const.u32 	%r2256, [matrix+1544];
	// begin inline asm
	dp4a.u32.u32 %r2255, %r2256, %r4753, %r2251;
	// end inline asm
	ld.const.u32 	%r2260, [matrix+1548];
	// begin inline asm
	dp4a.u32.u32 %r2259, %r2260, %r4757, %r2255;
	// end inline asm
	ld.const.u32 	%r2264, [matrix+1552];
	// begin inline asm
	dp4a.u32.u32 %r2263, %r2264, %r4761, %r2259;
	// end inline asm
	ld.const.u32 	%r2268, [matrix+1556];
	// begin inline asm
	dp4a.u32.u32 %r2267, %r2268, %r4765, %r2263;
	// end inline asm
	ld.const.u32 	%r2272, [matrix+1560];
	// begin inline asm
	dp4a.u32.u32 %r2271, %r2272, %r4769, %r2267;
	// end inline asm
	ld.const.u32 	%r2276, [matrix+1564];
	// begin inline asm
	dp4a.u32.u32 %r2275, %r2276, %r4773, %r2271;
	// end inline asm
	ld.const.u32 	%r2280, [matrix+1568];
	// begin inline asm
	dp4a.u32.u32 %r2279, %r2280, %r4777, %r2275;
	// end inline asm
	ld.const.u32 	%r2284, [matrix+1572];
	// begin inline asm
	dp4a.u32.u32 %r2283, %r2284, %r4781, %r2279;
	// end inline asm
	ld.const.u32 	%r2288, [matrix+1576];
	// begin inline asm
	dp4a.u32.u32 %r2287, %r2288, %r4785, %r2283;
	// end inline asm
	ld.const.u32 	%r2292, [matrix+1580];
	// begin inline asm
	dp4a.u32.u32 %r2291, %r2292, %r4789, %r2287;
	// end inline asm
	ld.const.u32 	%r2296, [matrix+1584];
	// begin inline asm
	dp4a.u32.u32 %r2295, %r2296, %r4793, %r2291;
	// end inline asm
	ld.const.u32 	%r2300, [matrix+1588];
	// begin inline asm
	dp4a.u32.u32 %r2299, %r2300, %r4797, %r2295;
	// end inline asm
	ld.const.u32 	%r2304, [matrix+1592];
	// begin inline asm
	dp4a.u32.u32 %r2303, %r2304, %r4801, %r2299;
	// end inline asm
	ld.const.u32 	%r2308, [matrix+1596];
	// begin inline asm
	dp4a.u32.u32 %r2307, %r2308, %r4805, %r2303;
	// end inline asm
	ld.const.u32 	%r2312, [matrix+1600];
	// begin inline asm
	dp4a.u32.u32 %r2311, %r2312, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2316, [matrix+1604];
	// begin inline asm
	dp4a.u32.u32 %r2315, %r2316, %r4749, %r2311;
	// end inline asm
	ld.const.u32 	%r2320, [matrix+1608];
	// begin inline asm
	dp4a.u32.u32 %r2319, %r2320, %r4753, %r2315;
	// end inline asm
	ld.const.u32 	%r2324, [matrix+1612];
	// begin inline asm
	dp4a.u32.u32 %r2323, %r2324, %r4757, %r2319;
	// end inline asm
	ld.const.u32 	%r2328, [matrix+1616];
	// begin inline asm
	dp4a.u32.u32 %r2327, %r2328, %r4761, %r2323;
	// end inline asm
	ld.const.u32 	%r2332, [matrix+1620];
	// begin inline asm
	dp4a.u32.u32 %r2331, %r2332, %r4765, %r2327;
	// end inline asm
	ld.const.u32 	%r2336, [matrix+1624];
	// begin inline asm
	dp4a.u32.u32 %r2335, %r2336, %r4769, %r2331;
	// end inline asm
	ld.const.u32 	%r2340, [matrix+1628];
	// begin inline asm
	dp4a.u32.u32 %r2339, %r2340, %r4773, %r2335;
	// end inline asm
	ld.const.u32 	%r2344, [matrix+1632];
	// begin inline asm
	dp4a.u32.u32 %r2343, %r2344, %r4777, %r2339;
	// end inline asm
	ld.const.u32 	%r2348, [matrix+1636];
	// begin inline asm
	dp4a.u32.u32 %r2347, %r2348, %r4781, %r2343;
	// end inline asm
	ld.const.u32 	%r2352, [matrix+1640];
	// begin inline asm
	dp4a.u32.u32 %r2351, %r2352, %r4785, %r2347;
	// end inline asm
	ld.const.u32 	%r2356, [matrix+1644];
	// begin inline asm
	dp4a.u32.u32 %r2355, %r2356, %r4789, %r2351;
	// end inline asm
	ld.const.u32 	%r2360, [matrix+1648];
	// begin inline asm
	dp4a.u32.u32 %r2359, %r2360, %r4793, %r2355;
	// end inline asm
	ld.const.u32 	%r2364, [matrix+1652];
	// begin inline asm
	dp4a.u32.u32 %r2363, %r2364, %r4797, %r2359;
	// end inline asm
	ld.const.u32 	%r2368, [matrix+1656];
	// begin inline asm
	dp4a.u32.u32 %r2367, %r2368, %r4801, %r2363;
	// end inline asm
	ld.const.u32 	%r2372, [matrix+1660];
	// begin inline asm
	dp4a.u32.u32 %r2371, %r2372, %r4805, %r2367;
	// end inline asm
	shr.u32 	%r5024, %r2307, 6;
	and.b32  	%r5025, %r5024, 240;
	shr.u32 	%r5026, %r2371, 10;
	or.b32  	%r5027, %r5026, %r5025;
	cvt.u64.u32 	%rd1170, %r5027;
	xor.b64  	%rd1171, %rd1117, %rd1170;
	ld.const.u32 	%r2376, [matrix+1664];
	// begin inline asm
	dp4a.u32.u32 %r2375, %r2376, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2380, [matrix+1668];
	// begin inline asm
	dp4a.u32.u32 %r2379, %r2380, %r4749, %r2375;
	// end inline asm
	ld.const.u32 	%r2384, [matrix+1672];
	// begin inline asm
	dp4a.u32.u32 %r2383, %r2384, %r4753, %r2379;
	// end inline asm
	ld.const.u32 	%r2388, [matrix+1676];
	// begin inline asm
	dp4a.u32.u32 %r2387, %r2388, %r4757, %r2383;
	// end inline asm
	ld.const.u32 	%r2392, [matrix+1680];
	// begin inline asm
	dp4a.u32.u32 %r2391, %r2392, %r4761, %r2387;
	// end inline asm
	ld.const.u32 	%r2396, [matrix+1684];
	// begin inline asm
	dp4a.u32.u32 %r2395, %r2396, %r4765, %r2391;
	// end inline asm
	ld.const.u32 	%r2400, [matrix+1688];
	// begin inline asm
	dp4a.u32.u32 %r2399, %r2400, %r4769, %r2395;
	// end inline asm
	ld.const.u32 	%r2404, [matrix+1692];
	// begin inline asm
	dp4a.u32.u32 %r2403, %r2404, %r4773, %r2399;
	// end inline asm
	ld.const.u32 	%r2408, [matrix+1696];
	// begin inline asm
	dp4a.u32.u32 %r2407, %r2408, %r4777, %r2403;
	// end inline asm
	ld.const.u32 	%r2412, [matrix+1700];
	// begin inline asm
	dp4a.u32.u32 %r2411, %r2412, %r4781, %r2407;
	// end inline asm
	ld.const.u32 	%r2416, [matrix+1704];
	// begin inline asm
	dp4a.u32.u32 %r2415, %r2416, %r4785, %r2411;
	// end inline asm
	ld.const.u32 	%r2420, [matrix+1708];
	// begin inline asm
	dp4a.u32.u32 %r2419, %r2420, %r4789, %r2415;
	// end inline asm
	ld.const.u32 	%r2424, [matrix+1712];
	// begin inline asm
	dp4a.u32.u32 %r2423, %r2424, %r4793, %r2419;
	// end inline asm
	ld.const.u32 	%r2428, [matrix+1716];
	// begin inline asm
	dp4a.u32.u32 %r2427, %r2428, %r4797, %r2423;
	// end inline asm
	ld.const.u32 	%r2432, [matrix+1720];
	// begin inline asm
	dp4a.u32.u32 %r2431, %r2432, %r4801, %r2427;
	// end inline asm
	ld.const.u32 	%r2436, [matrix+1724];
	// begin inline asm
	dp4a.u32.u32 %r2435, %r2436, %r4805, %r2431;
	// end inline asm
	ld.const.u32 	%r2440, [matrix+1728];
	// begin inline asm
	dp4a.u32.u32 %r2439, %r2440, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2444, [matrix+1732];
	// begin inline asm
	dp4a.u32.u32 %r2443, %r2444, %r4749, %r2439;
	// end inline asm
	ld.const.u32 	%r2448, [matrix+1736];
	// begin inline asm
	dp4a.u32.u32 %r2447, %r2448, %r4753, %r2443;
	// end inline asm
	ld.const.u32 	%r2452, [matrix+1740];
	// begin inline asm
	dp4a.u32.u32 %r2451, %r2452, %r4757, %r2447;
	// end inline asm
	ld.const.u32 	%r2456, [matrix+1744];
	// begin inline asm
	dp4a.u32.u32 %r2455, %r2456, %r4761, %r2451;
	// end inline asm
	ld.const.u32 	%r2460, [matrix+1748];
	// begin inline asm
	dp4a.u32.u32 %r2459, %r2460, %r4765, %r2455;
	// end inline asm
	ld.const.u32 	%r2464, [matrix+1752];
	// begin inline asm
	dp4a.u32.u32 %r2463, %r2464, %r4769, %r2459;
	// end inline asm
	ld.const.u32 	%r2468, [matrix+1756];
	// begin inline asm
	dp4a.u32.u32 %r2467, %r2468, %r4773, %r2463;
	// end inline asm
	ld.const.u32 	%r2472, [matrix+1760];
	// begin inline asm
	dp4a.u32.u32 %r2471, %r2472, %r4777, %r2467;
	// end inline asm
	ld.const.u32 	%r2476, [matrix+1764];
	// begin inline asm
	dp4a.u32.u32 %r2475, %r2476, %r4781, %r2471;
	// end inline asm
	ld.const.u32 	%r2480, [matrix+1768];
	// begin inline asm
	dp4a.u32.u32 %r2479, %r2480, %r4785, %r2475;
	// end inline asm
	ld.const.u32 	%r2484, [matrix+1772];
	// begin inline asm
	dp4a.u32.u32 %r2483, %r2484, %r4789, %r2479;
	// end inline asm
	ld.const.u32 	%r2488, [matrix+1776];
	// begin inline asm
	dp4a.u32.u32 %r2487, %r2488, %r4793, %r2483;
	// end inline asm
	ld.const.u32 	%r2492, [matrix+1780];
	// begin inline asm
	dp4a.u32.u32 %r2491, %r2492, %r4797, %r2487;
	// end inline asm
	ld.const.u32 	%r2496, [matrix+1784];
	// begin inline asm
	dp4a.u32.u32 %r2495, %r2496, %r4801, %r2491;
	// end inline asm
	ld.const.u32 	%r2500, [matrix+1788];
	// begin inline asm
	dp4a.u32.u32 %r2499, %r2500, %r4805, %r2495;
	// end inline asm
	shr.u32 	%r5028, %r2435, 6;
	and.b32  	%r5029, %r5028, 240;
	shr.u32 	%r5030, %r2499, 10;
	or.b32  	%r5031, %r5030, %r5029;
	cvt.u64.u32 	%rd1172, %r5031;
	xor.b64  	%rd1173, %rd1118, %rd1172;
	ld.const.u32 	%r2504, [matrix+1792];
	// begin inline asm
	dp4a.u32.u32 %r2503, %r2504, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2508, [matrix+1796];
	// begin inline asm
	dp4a.u32.u32 %r2507, %r2508, %r4749, %r2503;
	// end inline asm
	ld.const.u32 	%r2512, [matrix+1800];
	// begin inline asm
	dp4a.u32.u32 %r2511, %r2512, %r4753, %r2507;
	// end inline asm
	ld.const.u32 	%r2516, [matrix+1804];
	// begin inline asm
	dp4a.u32.u32 %r2515, %r2516, %r4757, %r2511;
	// end inline asm
	ld.const.u32 	%r2520, [matrix+1808];
	// begin inline asm
	dp4a.u32.u32 %r2519, %r2520, %r4761, %r2515;
	// end inline asm
	ld.const.u32 	%r2524, [matrix+1812];
	// begin inline asm
	dp4a.u32.u32 %r2523, %r2524, %r4765, %r2519;
	// end inline asm
	ld.const.u32 	%r2528, [matrix+1816];
	// begin inline asm
	dp4a.u32.u32 %r2527, %r2528, %r4769, %r2523;
	// end inline asm
	ld.const.u32 	%r2532, [matrix+1820];
	// begin inline asm
	dp4a.u32.u32 %r2531, %r2532, %r4773, %r2527;
	// end inline asm
	ld.const.u32 	%r2536, [matrix+1824];
	// begin inline asm
	dp4a.u32.u32 %r2535, %r2536, %r4777, %r2531;
	// end inline asm
	ld.const.u32 	%r2540, [matrix+1828];
	// begin inline asm
	dp4a.u32.u32 %r2539, %r2540, %r4781, %r2535;
	// end inline asm
	ld.const.u32 	%r2544, [matrix+1832];
	// begin inline asm
	dp4a.u32.u32 %r2543, %r2544, %r4785, %r2539;
	// end inline asm
	ld.const.u32 	%r2548, [matrix+1836];
	// begin inline asm
	dp4a.u32.u32 %r2547, %r2548, %r4789, %r2543;
	// end inline asm
	ld.const.u32 	%r2552, [matrix+1840];
	// begin inline asm
	dp4a.u32.u32 %r2551, %r2552, %r4793, %r2547;
	// end inline asm
	ld.const.u32 	%r2556, [matrix+1844];
	// begin inline asm
	dp4a.u32.u32 %r2555, %r2556, %r4797, %r2551;
	// end inline asm
	ld.const.u32 	%r2560, [matrix+1848];
	// begin inline asm
	dp4a.u32.u32 %r2559, %r2560, %r4801, %r2555;
	// end inline asm
	ld.const.u32 	%r2564, [matrix+1852];
	// begin inline asm
	dp4a.u32.u32 %r2563, %r2564, %r4805, %r2559;
	// end inline asm
	ld.const.u32 	%r2568, [matrix+1856];
	// begin inline asm
	dp4a.u32.u32 %r2567, %r2568, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2572, [matrix+1860];
	// begin inline asm
	dp4a.u32.u32 %r2571, %r2572, %r4749, %r2567;
	// end inline asm
	ld.const.u32 	%r2576, [matrix+1864];
	// begin inline asm
	dp4a.u32.u32 %r2575, %r2576, %r4753, %r2571;
	// end inline asm
	ld.const.u32 	%r2580, [matrix+1868];
	// begin inline asm
	dp4a.u32.u32 %r2579, %r2580, %r4757, %r2575;
	// end inline asm
	ld.const.u32 	%r2584, [matrix+1872];
	// begin inline asm
	dp4a.u32.u32 %r2583, %r2584, %r4761, %r2579;
	// end inline asm
	ld.const.u32 	%r2588, [matrix+1876];
	// begin inline asm
	dp4a.u32.u32 %r2587, %r2588, %r4765, %r2583;
	// end inline asm
	ld.const.u32 	%r2592, [matrix+1880];
	// begin inline asm
	dp4a.u32.u32 %r2591, %r2592, %r4769, %r2587;
	// end inline asm
	ld.const.u32 	%r2596, [matrix+1884];
	// begin inline asm
	dp4a.u32.u32 %r2595, %r2596, %r4773, %r2591;
	// end inline asm
	ld.const.u32 	%r2600, [matrix+1888];
	// begin inline asm
	dp4a.u32.u32 %r2599, %r2600, %r4777, %r2595;
	// end inline asm
	ld.const.u32 	%r2604, [matrix+1892];
	// begin inline asm
	dp4a.u32.u32 %r2603, %r2604, %r4781, %r2599;
	// end inline asm
	ld.const.u32 	%r2608, [matrix+1896];
	// begin inline asm
	dp4a.u32.u32 %r2607, %r2608, %r4785, %r2603;
	// end inline asm
	ld.const.u32 	%r2612, [matrix+1900];
	// begin inline asm
	dp4a.u32.u32 %r2611, %r2612, %r4789, %r2607;
	// end inline asm
	ld.const.u32 	%r2616, [matrix+1904];
	// begin inline asm
	dp4a.u32.u32 %r2615, %r2616, %r4793, %r2611;
	// end inline asm
	ld.const.u32 	%r2620, [matrix+1908];
	// begin inline asm
	dp4a.u32.u32 %r2619, %r2620, %r4797, %r2615;
	// end inline asm
	ld.const.u32 	%r2624, [matrix+1912];
	// begin inline asm
	dp4a.u32.u32 %r2623, %r2624, %r4801, %r2619;
	// end inline asm
	ld.const.u32 	%r2628, [matrix+1916];
	// begin inline asm
	dp4a.u32.u32 %r2627, %r2628, %r4805, %r2623;
	// end inline asm
	shr.u32 	%r5032, %r2563, 6;
	and.b32  	%r5033, %r5032, 240;
	shr.u32 	%r5034, %r2627, 10;
	or.b32  	%r5035, %r5034, %r5033;
	cvt.u64.u32 	%rd1174, %r5035;
	xor.b64  	%rd1175, %rd1119, %rd1174;
	ld.const.u32 	%r2632, [matrix+1920];
	// begin inline asm
	dp4a.u32.u32 %r2631, %r2632, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2636, [matrix+1924];
	// begin inline asm
	dp4a.u32.u32 %r2635, %r2636, %r4749, %r2631;
	// end inline asm
	ld.const.u32 	%r2640, [matrix+1928];
	// begin inline asm
	dp4a.u32.u32 %r2639, %r2640, %r4753, %r2635;
	// end inline asm
	ld.const.u32 	%r2644, [matrix+1932];
	// begin inline asm
	dp4a.u32.u32 %r2643, %r2644, %r4757, %r2639;
	// end inline asm
	ld.const.u32 	%r2648, [matrix+1936];
	// begin inline asm
	dp4a.u32.u32 %r2647, %r2648, %r4761, %r2643;
	// end inline asm
	ld.const.u32 	%r2652, [matrix+1940];
	// begin inline asm
	dp4a.u32.u32 %r2651, %r2652, %r4765, %r2647;
	// end inline asm
	ld.const.u32 	%r2656, [matrix+1944];
	// begin inline asm
	dp4a.u32.u32 %r2655, %r2656, %r4769, %r2651;
	// end inline asm
	ld.const.u32 	%r2660, [matrix+1948];
	// begin inline asm
	dp4a.u32.u32 %r2659, %r2660, %r4773, %r2655;
	// end inline asm
	ld.const.u32 	%r2664, [matrix+1952];
	// begin inline asm
	dp4a.u32.u32 %r2663, %r2664, %r4777, %r2659;
	// end inline asm
	ld.const.u32 	%r2668, [matrix+1956];
	// begin inline asm
	dp4a.u32.u32 %r2667, %r2668, %r4781, %r2663;
	// end inline asm
	ld.const.u32 	%r2672, [matrix+1960];
	// begin inline asm
	dp4a.u32.u32 %r2671, %r2672, %r4785, %r2667;
	// end inline asm
	ld.const.u32 	%r2676, [matrix+1964];
	// begin inline asm
	dp4a.u32.u32 %r2675, %r2676, %r4789, %r2671;
	// end inline asm
	ld.const.u32 	%r2680, [matrix+1968];
	// begin inline asm
	dp4a.u32.u32 %r2679, %r2680, %r4793, %r2675;
	// end inline asm
	ld.const.u32 	%r2684, [matrix+1972];
	// begin inline asm
	dp4a.u32.u32 %r2683, %r2684, %r4797, %r2679;
	// end inline asm
	ld.const.u32 	%r2688, [matrix+1976];
	// begin inline asm
	dp4a.u32.u32 %r2687, %r2688, %r4801, %r2683;
	// end inline asm
	ld.const.u32 	%r2692, [matrix+1980];
	// begin inline asm
	dp4a.u32.u32 %r2691, %r2692, %r4805, %r2687;
	// end inline asm
	ld.const.u32 	%r2696, [matrix+1984];
	// begin inline asm
	dp4a.u32.u32 %r2695, %r2696, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2700, [matrix+1988];
	// begin inline asm
	dp4a.u32.u32 %r2699, %r2700, %r4749, %r2695;
	// end inline asm
	ld.const.u32 	%r2704, [matrix+1992];
	// begin inline asm
	dp4a.u32.u32 %r2703, %r2704, %r4753, %r2699;
	// end inline asm
	ld.const.u32 	%r2708, [matrix+1996];
	// begin inline asm
	dp4a.u32.u32 %r2707, %r2708, %r4757, %r2703;
	// end inline asm
	ld.const.u32 	%r2712, [matrix+2000];
	// begin inline asm
	dp4a.u32.u32 %r2711, %r2712, %r4761, %r2707;
	// end inline asm
	ld.const.u32 	%r2716, [matrix+2004];
	// begin inline asm
	dp4a.u32.u32 %r2715, %r2716, %r4765, %r2711;
	// end inline asm
	ld.const.u32 	%r2720, [matrix+2008];
	// begin inline asm
	dp4a.u32.u32 %r2719, %r2720, %r4769, %r2715;
	// end inline asm
	ld.const.u32 	%r2724, [matrix+2012];
	// begin inline asm
	dp4a.u32.u32 %r2723, %r2724, %r4773, %r2719;
	// end inline asm
	ld.const.u32 	%r2728, [matrix+2016];
	// begin inline asm
	dp4a.u32.u32 %r2727, %r2728, %r4777, %r2723;
	// end inline asm
	ld.const.u32 	%r2732, [matrix+2020];
	// begin inline asm
	dp4a.u32.u32 %r2731, %r2732, %r4781, %r2727;
	// end inline asm
	ld.const.u32 	%r2736, [matrix+2024];
	// begin inline asm
	dp4a.u32.u32 %r2735, %r2736, %r4785, %r2731;
	// end inline asm
	ld.const.u32 	%r2740, [matrix+2028];
	// begin inline asm
	dp4a.u32.u32 %r2739, %r2740, %r4789, %r2735;
	// end inline asm
	ld.const.u32 	%r2744, [matrix+2032];
	// begin inline asm
	dp4a.u32.u32 %r2743, %r2744, %r4793, %r2739;
	// end inline asm
	ld.const.u32 	%r2748, [matrix+2036];
	// begin inline asm
	dp4a.u32.u32 %r2747, %r2748, %r4797, %r2743;
	// end inline asm
	ld.const.u32 	%r2752, [matrix+2040];
	// begin inline asm
	dp4a.u32.u32 %r2751, %r2752, %r4801, %r2747;
	// end inline asm
	ld.const.u32 	%r2756, [matrix+2044];
	// begin inline asm
	dp4a.u32.u32 %r2755, %r2756, %r4805, %r2751;
	// end inline asm
	shr.u32 	%r5036, %r2691, 6;
	and.b32  	%r5037, %r5036, 240;
	shr.u32 	%r5038, %r2755, 10;
	or.b32  	%r5039, %r5038, %r5037;
	cvt.u64.u32 	%rd1176, %r5039;
	ld.const.u32 	%r2760, [matrix+2048];
	// begin inline asm
	dp4a.u32.u32 %r2759, %r2760, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2764, [matrix+2052];
	// begin inline asm
	dp4a.u32.u32 %r2763, %r2764, %r4749, %r2759;
	// end inline asm
	ld.const.u32 	%r2768, [matrix+2056];
	// begin inline asm
	dp4a.u32.u32 %r2767, %r2768, %r4753, %r2763;
	// end inline asm
	ld.const.u32 	%r2772, [matrix+2060];
	// begin inline asm
	dp4a.u32.u32 %r2771, %r2772, %r4757, %r2767;
	// end inline asm
	ld.const.u32 	%r2776, [matrix+2064];
	// begin inline asm
	dp4a.u32.u32 %r2775, %r2776, %r4761, %r2771;
	// end inline asm
	ld.const.u32 	%r2780, [matrix+2068];
	// begin inline asm
	dp4a.u32.u32 %r2779, %r2780, %r4765, %r2775;
	// end inline asm
	ld.const.u32 	%r2784, [matrix+2072];
	// begin inline asm
	dp4a.u32.u32 %r2783, %r2784, %r4769, %r2779;
	// end inline asm
	ld.const.u32 	%r2788, [matrix+2076];
	// begin inline asm
	dp4a.u32.u32 %r2787, %r2788, %r4773, %r2783;
	// end inline asm
	ld.const.u32 	%r2792, [matrix+2080];
	// begin inline asm
	dp4a.u32.u32 %r2791, %r2792, %r4777, %r2787;
	// end inline asm
	ld.const.u32 	%r2796, [matrix+2084];
	// begin inline asm
	dp4a.u32.u32 %r2795, %r2796, %r4781, %r2791;
	// end inline asm
	ld.const.u32 	%r2800, [matrix+2088];
	// begin inline asm
	dp4a.u32.u32 %r2799, %r2800, %r4785, %r2795;
	// end inline asm
	ld.const.u32 	%r2804, [matrix+2092];
	// begin inline asm
	dp4a.u32.u32 %r2803, %r2804, %r4789, %r2799;
	// end inline asm
	ld.const.u32 	%r2808, [matrix+2096];
	// begin inline asm
	dp4a.u32.u32 %r2807, %r2808, %r4793, %r2803;
	// end inline asm
	ld.const.u32 	%r2812, [matrix+2100];
	// begin inline asm
	dp4a.u32.u32 %r2811, %r2812, %r4797, %r2807;
	// end inline asm
	ld.const.u32 	%r2816, [matrix+2104];
	// begin inline asm
	dp4a.u32.u32 %r2815, %r2816, %r4801, %r2811;
	// end inline asm
	ld.const.u32 	%r2820, [matrix+2108];
	// begin inline asm
	dp4a.u32.u32 %r2819, %r2820, %r4805, %r2815;
	// end inline asm
	ld.const.u32 	%r2824, [matrix+2112];
	// begin inline asm
	dp4a.u32.u32 %r2823, %r2824, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2828, [matrix+2116];
	// begin inline asm
	dp4a.u32.u32 %r2827, %r2828, %r4749, %r2823;
	// end inline asm
	ld.const.u32 	%r2832, [matrix+2120];
	// begin inline asm
	dp4a.u32.u32 %r2831, %r2832, %r4753, %r2827;
	// end inline asm
	ld.const.u32 	%r2836, [matrix+2124];
	// begin inline asm
	dp4a.u32.u32 %r2835, %r2836, %r4757, %r2831;
	// end inline asm
	ld.const.u32 	%r2840, [matrix+2128];
	// begin inline asm
	dp4a.u32.u32 %r2839, %r2840, %r4761, %r2835;
	// end inline asm
	ld.const.u32 	%r2844, [matrix+2132];
	// begin inline asm
	dp4a.u32.u32 %r2843, %r2844, %r4765, %r2839;
	// end inline asm
	ld.const.u32 	%r2848, [matrix+2136];
	// begin inline asm
	dp4a.u32.u32 %r2847, %r2848, %r4769, %r2843;
	// end inline asm
	ld.const.u32 	%r2852, [matrix+2140];
	// begin inline asm
	dp4a.u32.u32 %r2851, %r2852, %r4773, %r2847;
	// end inline asm
	ld.const.u32 	%r2856, [matrix+2144];
	// begin inline asm
	dp4a.u32.u32 %r2855, %r2856, %r4777, %r2851;
	// end inline asm
	ld.const.u32 	%r2860, [matrix+2148];
	// begin inline asm
	dp4a.u32.u32 %r2859, %r2860, %r4781, %r2855;
	// end inline asm
	ld.const.u32 	%r2864, [matrix+2152];
	// begin inline asm
	dp4a.u32.u32 %r2863, %r2864, %r4785, %r2859;
	// end inline asm
	ld.const.u32 	%r2868, [matrix+2156];
	// begin inline asm
	dp4a.u32.u32 %r2867, %r2868, %r4789, %r2863;
	// end inline asm
	ld.const.u32 	%r2872, [matrix+2160];
	// begin inline asm
	dp4a.u32.u32 %r2871, %r2872, %r4793, %r2867;
	// end inline asm
	ld.const.u32 	%r2876, [matrix+2164];
	// begin inline asm
	dp4a.u32.u32 %r2875, %r2876, %r4797, %r2871;
	// end inline asm
	ld.const.u32 	%r2880, [matrix+2168];
	// begin inline asm
	dp4a.u32.u32 %r2879, %r2880, %r4801, %r2875;
	// end inline asm
	ld.const.u32 	%r2884, [matrix+2172];
	// begin inline asm
	dp4a.u32.u32 %r2883, %r2884, %r4805, %r2879;
	// end inline asm
	shr.u32 	%r5040, %r2819, 6;
	and.b32  	%r5041, %r5040, 240;
	shr.u32 	%r5042, %r2883, 10;
	or.b32  	%r5043, %r5042, %r5041;
	cvt.u64.u32 	%rd1177, %r5043;
	xor.b64  	%rd1178, %rd2227, %rd1177;
	ld.const.u32 	%r2888, [matrix+2176];
	// begin inline asm
	dp4a.u32.u32 %r2887, %r2888, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2892, [matrix+2180];
	// begin inline asm
	dp4a.u32.u32 %r2891, %r2892, %r4749, %r2887;
	// end inline asm
	ld.const.u32 	%r2896, [matrix+2184];
	// begin inline asm
	dp4a.u32.u32 %r2895, %r2896, %r4753, %r2891;
	// end inline asm
	ld.const.u32 	%r2900, [matrix+2188];
	// begin inline asm
	dp4a.u32.u32 %r2899, %r2900, %r4757, %r2895;
	// end inline asm
	ld.const.u32 	%r2904, [matrix+2192];
	// begin inline asm
	dp4a.u32.u32 %r2903, %r2904, %r4761, %r2899;
	// end inline asm
	ld.const.u32 	%r2908, [matrix+2196];
	// begin inline asm
	dp4a.u32.u32 %r2907, %r2908, %r4765, %r2903;
	// end inline asm
	ld.const.u32 	%r2912, [matrix+2200];
	// begin inline asm
	dp4a.u32.u32 %r2911, %r2912, %r4769, %r2907;
	// end inline asm
	ld.const.u32 	%r2916, [matrix+2204];
	// begin inline asm
	dp4a.u32.u32 %r2915, %r2916, %r4773, %r2911;
	// end inline asm
	ld.const.u32 	%r2920, [matrix+2208];
	// begin inline asm
	dp4a.u32.u32 %r2919, %r2920, %r4777, %r2915;
	// end inline asm
	ld.const.u32 	%r2924, [matrix+2212];
	// begin inline asm
	dp4a.u32.u32 %r2923, %r2924, %r4781, %r2919;
	// end inline asm
	ld.const.u32 	%r2928, [matrix+2216];
	// begin inline asm
	dp4a.u32.u32 %r2927, %r2928, %r4785, %r2923;
	// end inline asm
	ld.const.u32 	%r2932, [matrix+2220];
	// begin inline asm
	dp4a.u32.u32 %r2931, %r2932, %r4789, %r2927;
	// end inline asm
	ld.const.u32 	%r2936, [matrix+2224];
	// begin inline asm
	dp4a.u32.u32 %r2935, %r2936, %r4793, %r2931;
	// end inline asm
	ld.const.u32 	%r2940, [matrix+2228];
	// begin inline asm
	dp4a.u32.u32 %r2939, %r2940, %r4797, %r2935;
	// end inline asm
	ld.const.u32 	%r2944, [matrix+2232];
	// begin inline asm
	dp4a.u32.u32 %r2943, %r2944, %r4801, %r2939;
	// end inline asm
	ld.const.u32 	%r2948, [matrix+2236];
	// begin inline asm
	dp4a.u32.u32 %r2947, %r2948, %r4805, %r2943;
	// end inline asm
	ld.const.u32 	%r2952, [matrix+2240];
	// begin inline asm
	dp4a.u32.u32 %r2951, %r2952, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r2956, [matrix+2244];
	// begin inline asm
	dp4a.u32.u32 %r2955, %r2956, %r4749, %r2951;
	// end inline asm
	ld.const.u32 	%r2960, [matrix+2248];
	// begin inline asm
	dp4a.u32.u32 %r2959, %r2960, %r4753, %r2955;
	// end inline asm
	ld.const.u32 	%r2964, [matrix+2252];
	// begin inline asm
	dp4a.u32.u32 %r2963, %r2964, %r4757, %r2959;
	// end inline asm
	ld.const.u32 	%r2968, [matrix+2256];
	// begin inline asm
	dp4a.u32.u32 %r2967, %r2968, %r4761, %r2963;
	// end inline asm
	ld.const.u32 	%r2972, [matrix+2260];
	// begin inline asm
	dp4a.u32.u32 %r2971, %r2972, %r4765, %r2967;
	// end inline asm
	ld.const.u32 	%r2976, [matrix+2264];
	// begin inline asm
	dp4a.u32.u32 %r2975, %r2976, %r4769, %r2971;
	// end inline asm
	ld.const.u32 	%r2980, [matrix+2268];
	// begin inline asm
	dp4a.u32.u32 %r2979, %r2980, %r4773, %r2975;
	// end inline asm
	ld.const.u32 	%r2984, [matrix+2272];
	// begin inline asm
	dp4a.u32.u32 %r2983, %r2984, %r4777, %r2979;
	// end inline asm
	ld.const.u32 	%r2988, [matrix+2276];
	// begin inline asm
	dp4a.u32.u32 %r2987, %r2988, %r4781, %r2983;
	// end inline asm
	ld.const.u32 	%r2992, [matrix+2280];
	// begin inline asm
	dp4a.u32.u32 %r2991, %r2992, %r4785, %r2987;
	// end inline asm
	ld.const.u32 	%r2996, [matrix+2284];
	// begin inline asm
	dp4a.u32.u32 %r2995, %r2996, %r4789, %r2991;
	// end inline asm
	ld.const.u32 	%r3000, [matrix+2288];
	// begin inline asm
	dp4a.u32.u32 %r2999, %r3000, %r4793, %r2995;
	// end inline asm
	ld.const.u32 	%r3004, [matrix+2292];
	// begin inline asm
	dp4a.u32.u32 %r3003, %r3004, %r4797, %r2999;
	// end inline asm
	ld.const.u32 	%r3008, [matrix+2296];
	// begin inline asm
	dp4a.u32.u32 %r3007, %r3008, %r4801, %r3003;
	// end inline asm
	ld.const.u32 	%r3012, [matrix+2300];
	// begin inline asm
	dp4a.u32.u32 %r3011, %r3012, %r4805, %r3007;
	// end inline asm
	shr.u32 	%r5044, %r2947, 6;
	and.b32  	%r5045, %r5044, 240;
	shr.u32 	%r5046, %r3011, 10;
	or.b32  	%r5047, %r5046, %r5045;
	cvt.u64.u32 	%rd1179, %r5047;
	xor.b64  	%rd1180, %rd1121, %rd1179;
	ld.const.u32 	%r3016, [matrix+2304];
	// begin inline asm
	dp4a.u32.u32 %r3015, %r3016, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3020, [matrix+2308];
	// begin inline asm
	dp4a.u32.u32 %r3019, %r3020, %r4749, %r3015;
	// end inline asm
	ld.const.u32 	%r3024, [matrix+2312];
	// begin inline asm
	dp4a.u32.u32 %r3023, %r3024, %r4753, %r3019;
	// end inline asm
	ld.const.u32 	%r3028, [matrix+2316];
	// begin inline asm
	dp4a.u32.u32 %r3027, %r3028, %r4757, %r3023;
	// end inline asm
	ld.const.u32 	%r3032, [matrix+2320];
	// begin inline asm
	dp4a.u32.u32 %r3031, %r3032, %r4761, %r3027;
	// end inline asm
	ld.const.u32 	%r3036, [matrix+2324];
	// begin inline asm
	dp4a.u32.u32 %r3035, %r3036, %r4765, %r3031;
	// end inline asm
	ld.const.u32 	%r3040, [matrix+2328];
	// begin inline asm
	dp4a.u32.u32 %r3039, %r3040, %r4769, %r3035;
	// end inline asm
	ld.const.u32 	%r3044, [matrix+2332];
	// begin inline asm
	dp4a.u32.u32 %r3043, %r3044, %r4773, %r3039;
	// end inline asm
	ld.const.u32 	%r3048, [matrix+2336];
	// begin inline asm
	dp4a.u32.u32 %r3047, %r3048, %r4777, %r3043;
	// end inline asm
	ld.const.u32 	%r3052, [matrix+2340];
	// begin inline asm
	dp4a.u32.u32 %r3051, %r3052, %r4781, %r3047;
	// end inline asm
	ld.const.u32 	%r3056, [matrix+2344];
	// begin inline asm
	dp4a.u32.u32 %r3055, %r3056, %r4785, %r3051;
	// end inline asm
	ld.const.u32 	%r3060, [matrix+2348];
	// begin inline asm
	dp4a.u32.u32 %r3059, %r3060, %r4789, %r3055;
	// end inline asm
	ld.const.u32 	%r3064, [matrix+2352];
	// begin inline asm
	dp4a.u32.u32 %r3063, %r3064, %r4793, %r3059;
	// end inline asm
	ld.const.u32 	%r3068, [matrix+2356];
	// begin inline asm
	dp4a.u32.u32 %r3067, %r3068, %r4797, %r3063;
	// end inline asm
	ld.const.u32 	%r3072, [matrix+2360];
	// begin inline asm
	dp4a.u32.u32 %r3071, %r3072, %r4801, %r3067;
	// end inline asm
	ld.const.u32 	%r3076, [matrix+2364];
	// begin inline asm
	dp4a.u32.u32 %r3075, %r3076, %r4805, %r3071;
	// end inline asm
	ld.const.u32 	%r3080, [matrix+2368];
	// begin inline asm
	dp4a.u32.u32 %r3079, %r3080, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3084, [matrix+2372];
	// begin inline asm
	dp4a.u32.u32 %r3083, %r3084, %r4749, %r3079;
	// end inline asm
	ld.const.u32 	%r3088, [matrix+2376];
	// begin inline asm
	dp4a.u32.u32 %r3087, %r3088, %r4753, %r3083;
	// end inline asm
	ld.const.u32 	%r3092, [matrix+2380];
	// begin inline asm
	dp4a.u32.u32 %r3091, %r3092, %r4757, %r3087;
	// end inline asm
	ld.const.u32 	%r3096, [matrix+2384];
	// begin inline asm
	dp4a.u32.u32 %r3095, %r3096, %r4761, %r3091;
	// end inline asm
	ld.const.u32 	%r3100, [matrix+2388];
	// begin inline asm
	dp4a.u32.u32 %r3099, %r3100, %r4765, %r3095;
	// end inline asm
	ld.const.u32 	%r3104, [matrix+2392];
	// begin inline asm
	dp4a.u32.u32 %r3103, %r3104, %r4769, %r3099;
	// end inline asm
	ld.const.u32 	%r3108, [matrix+2396];
	// begin inline asm
	dp4a.u32.u32 %r3107, %r3108, %r4773, %r3103;
	// end inline asm
	ld.const.u32 	%r3112, [matrix+2400];
	// begin inline asm
	dp4a.u32.u32 %r3111, %r3112, %r4777, %r3107;
	// end inline asm
	ld.const.u32 	%r3116, [matrix+2404];
	// begin inline asm
	dp4a.u32.u32 %r3115, %r3116, %r4781, %r3111;
	// end inline asm
	ld.const.u32 	%r3120, [matrix+2408];
	// begin inline asm
	dp4a.u32.u32 %r3119, %r3120, %r4785, %r3115;
	// end inline asm
	ld.const.u32 	%r3124, [matrix+2412];
	// begin inline asm
	dp4a.u32.u32 %r3123, %r3124, %r4789, %r3119;
	// end inline asm
	ld.const.u32 	%r3128, [matrix+2416];
	// begin inline asm
	dp4a.u32.u32 %r3127, %r3128, %r4793, %r3123;
	// end inline asm
	ld.const.u32 	%r3132, [matrix+2420];
	// begin inline asm
	dp4a.u32.u32 %r3131, %r3132, %r4797, %r3127;
	// end inline asm
	ld.const.u32 	%r3136, [matrix+2424];
	// begin inline asm
	dp4a.u32.u32 %r3135, %r3136, %r4801, %r3131;
	// end inline asm
	ld.const.u32 	%r3140, [matrix+2428];
	// begin inline asm
	dp4a.u32.u32 %r3139, %r3140, %r4805, %r3135;
	// end inline asm
	shr.u32 	%r5048, %r3075, 6;
	and.b32  	%r5049, %r5048, 240;
	shr.u32 	%r5050, %r3139, 10;
	or.b32  	%r5051, %r5050, %r5049;
	cvt.u64.u32 	%rd1181, %r5051;
	xor.b64  	%rd1182, %rd1122, %rd1181;
	ld.const.u32 	%r3144, [matrix+2432];
	// begin inline asm
	dp4a.u32.u32 %r3143, %r3144, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3148, [matrix+2436];
	// begin inline asm
	dp4a.u32.u32 %r3147, %r3148, %r4749, %r3143;
	// end inline asm
	ld.const.u32 	%r3152, [matrix+2440];
	// begin inline asm
	dp4a.u32.u32 %r3151, %r3152, %r4753, %r3147;
	// end inline asm
	ld.const.u32 	%r3156, [matrix+2444];
	// begin inline asm
	dp4a.u32.u32 %r3155, %r3156, %r4757, %r3151;
	// end inline asm
	ld.const.u32 	%r3160, [matrix+2448];
	// begin inline asm
	dp4a.u32.u32 %r3159, %r3160, %r4761, %r3155;
	// end inline asm
	ld.const.u32 	%r3164, [matrix+2452];
	// begin inline asm
	dp4a.u32.u32 %r3163, %r3164, %r4765, %r3159;
	// end inline asm
	ld.const.u32 	%r3168, [matrix+2456];
	// begin inline asm
	dp4a.u32.u32 %r3167, %r3168, %r4769, %r3163;
	// end inline asm
	ld.const.u32 	%r3172, [matrix+2460];
	// begin inline asm
	dp4a.u32.u32 %r3171, %r3172, %r4773, %r3167;
	// end inline asm
	ld.const.u32 	%r3176, [matrix+2464];
	// begin inline asm
	dp4a.u32.u32 %r3175, %r3176, %r4777, %r3171;
	// end inline asm
	ld.const.u32 	%r3180, [matrix+2468];
	// begin inline asm
	dp4a.u32.u32 %r3179, %r3180, %r4781, %r3175;
	// end inline asm
	ld.const.u32 	%r3184, [matrix+2472];
	// begin inline asm
	dp4a.u32.u32 %r3183, %r3184, %r4785, %r3179;
	// end inline asm
	ld.const.u32 	%r3188, [matrix+2476];
	// begin inline asm
	dp4a.u32.u32 %r3187, %r3188, %r4789, %r3183;
	// end inline asm
	ld.const.u32 	%r3192, [matrix+2480];
	// begin inline asm
	dp4a.u32.u32 %r3191, %r3192, %r4793, %r3187;
	// end inline asm
	ld.const.u32 	%r3196, [matrix+2484];
	// begin inline asm
	dp4a.u32.u32 %r3195, %r3196, %r4797, %r3191;
	// end inline asm
	ld.const.u32 	%r3200, [matrix+2488];
	// begin inline asm
	dp4a.u32.u32 %r3199, %r3200, %r4801, %r3195;
	// end inline asm
	ld.const.u32 	%r3204, [matrix+2492];
	// begin inline asm
	dp4a.u32.u32 %r3203, %r3204, %r4805, %r3199;
	// end inline asm
	ld.const.u32 	%r3208, [matrix+2496];
	// begin inline asm
	dp4a.u32.u32 %r3207, %r3208, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3212, [matrix+2500];
	// begin inline asm
	dp4a.u32.u32 %r3211, %r3212, %r4749, %r3207;
	// end inline asm
	ld.const.u32 	%r3216, [matrix+2504];
	// begin inline asm
	dp4a.u32.u32 %r3215, %r3216, %r4753, %r3211;
	// end inline asm
	ld.const.u32 	%r3220, [matrix+2508];
	// begin inline asm
	dp4a.u32.u32 %r3219, %r3220, %r4757, %r3215;
	// end inline asm
	ld.const.u32 	%r3224, [matrix+2512];
	// begin inline asm
	dp4a.u32.u32 %r3223, %r3224, %r4761, %r3219;
	// end inline asm
	ld.const.u32 	%r3228, [matrix+2516];
	// begin inline asm
	dp4a.u32.u32 %r3227, %r3228, %r4765, %r3223;
	// end inline asm
	ld.const.u32 	%r3232, [matrix+2520];
	// begin inline asm
	dp4a.u32.u32 %r3231, %r3232, %r4769, %r3227;
	// end inline asm
	ld.const.u32 	%r3236, [matrix+2524];
	// begin inline asm
	dp4a.u32.u32 %r3235, %r3236, %r4773, %r3231;
	// end inline asm
	ld.const.u32 	%r3240, [matrix+2528];
	// begin inline asm
	dp4a.u32.u32 %r3239, %r3240, %r4777, %r3235;
	// end inline asm
	ld.const.u32 	%r3244, [matrix+2532];
	// begin inline asm
	dp4a.u32.u32 %r3243, %r3244, %r4781, %r3239;
	// end inline asm
	ld.const.u32 	%r3248, [matrix+2536];
	// begin inline asm
	dp4a.u32.u32 %r3247, %r3248, %r4785, %r3243;
	// end inline asm
	ld.const.u32 	%r3252, [matrix+2540];
	// begin inline asm
	dp4a.u32.u32 %r3251, %r3252, %r4789, %r3247;
	// end inline asm
	ld.const.u32 	%r3256, [matrix+2544];
	// begin inline asm
	dp4a.u32.u32 %r3255, %r3256, %r4793, %r3251;
	// end inline asm
	ld.const.u32 	%r3260, [matrix+2548];
	// begin inline asm
	dp4a.u32.u32 %r3259, %r3260, %r4797, %r3255;
	// end inline asm
	ld.const.u32 	%r3264, [matrix+2552];
	// begin inline asm
	dp4a.u32.u32 %r3263, %r3264, %r4801, %r3259;
	// end inline asm
	ld.const.u32 	%r3268, [matrix+2556];
	// begin inline asm
	dp4a.u32.u32 %r3267, %r3268, %r4805, %r3263;
	// end inline asm
	shr.u32 	%r5052, %r3203, 6;
	and.b32  	%r5053, %r5052, 240;
	shr.u32 	%r5054, %r3267, 10;
	or.b32  	%r5055, %r5054, %r5053;
	cvt.u64.u32 	%rd1183, %r5055;
	xor.b64  	%rd1184, %rd1123, %rd1183;
	ld.const.u32 	%r3272, [matrix+2560];
	// begin inline asm
	dp4a.u32.u32 %r3271, %r3272, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3276, [matrix+2564];
	// begin inline asm
	dp4a.u32.u32 %r3275, %r3276, %r4749, %r3271;
	// end inline asm
	ld.const.u32 	%r3280, [matrix+2568];
	// begin inline asm
	dp4a.u32.u32 %r3279, %r3280, %r4753, %r3275;
	// end inline asm
	ld.const.u32 	%r3284, [matrix+2572];
	// begin inline asm
	dp4a.u32.u32 %r3283, %r3284, %r4757, %r3279;
	// end inline asm
	ld.const.u32 	%r3288, [matrix+2576];
	// begin inline asm
	dp4a.u32.u32 %r3287, %r3288, %r4761, %r3283;
	// end inline asm
	ld.const.u32 	%r3292, [matrix+2580];
	// begin inline asm
	dp4a.u32.u32 %r3291, %r3292, %r4765, %r3287;
	// end inline asm
	ld.const.u32 	%r3296, [matrix+2584];
	// begin inline asm
	dp4a.u32.u32 %r3295, %r3296, %r4769, %r3291;
	// end inline asm
	ld.const.u32 	%r3300, [matrix+2588];
	// begin inline asm
	dp4a.u32.u32 %r3299, %r3300, %r4773, %r3295;
	// end inline asm
	ld.const.u32 	%r3304, [matrix+2592];
	// begin inline asm
	dp4a.u32.u32 %r3303, %r3304, %r4777, %r3299;
	// end inline asm
	ld.const.u32 	%r3308, [matrix+2596];
	// begin inline asm
	dp4a.u32.u32 %r3307, %r3308, %r4781, %r3303;
	// end inline asm
	ld.const.u32 	%r3312, [matrix+2600];
	// begin inline asm
	dp4a.u32.u32 %r3311, %r3312, %r4785, %r3307;
	// end inline asm
	ld.const.u32 	%r3316, [matrix+2604];
	// begin inline asm
	dp4a.u32.u32 %r3315, %r3316, %r4789, %r3311;
	// end inline asm
	ld.const.u32 	%r3320, [matrix+2608];
	// begin inline asm
	dp4a.u32.u32 %r3319, %r3320, %r4793, %r3315;
	// end inline asm
	ld.const.u32 	%r3324, [matrix+2612];
	// begin inline asm
	dp4a.u32.u32 %r3323, %r3324, %r4797, %r3319;
	// end inline asm
	ld.const.u32 	%r3328, [matrix+2616];
	// begin inline asm
	dp4a.u32.u32 %r3327, %r3328, %r4801, %r3323;
	// end inline asm
	ld.const.u32 	%r3332, [matrix+2620];
	// begin inline asm
	dp4a.u32.u32 %r3331, %r3332, %r4805, %r3327;
	// end inline asm
	ld.const.u32 	%r3336, [matrix+2624];
	// begin inline asm
	dp4a.u32.u32 %r3335, %r3336, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3340, [matrix+2628];
	// begin inline asm
	dp4a.u32.u32 %r3339, %r3340, %r4749, %r3335;
	// end inline asm
	ld.const.u32 	%r3344, [matrix+2632];
	// begin inline asm
	dp4a.u32.u32 %r3343, %r3344, %r4753, %r3339;
	// end inline asm
	ld.const.u32 	%r3348, [matrix+2636];
	// begin inline asm
	dp4a.u32.u32 %r3347, %r3348, %r4757, %r3343;
	// end inline asm
	ld.const.u32 	%r3352, [matrix+2640];
	// begin inline asm
	dp4a.u32.u32 %r3351, %r3352, %r4761, %r3347;
	// end inline asm
	ld.const.u32 	%r3356, [matrix+2644];
	// begin inline asm
	dp4a.u32.u32 %r3355, %r3356, %r4765, %r3351;
	// end inline asm
	ld.const.u32 	%r3360, [matrix+2648];
	// begin inline asm
	dp4a.u32.u32 %r3359, %r3360, %r4769, %r3355;
	// end inline asm
	ld.const.u32 	%r3364, [matrix+2652];
	// begin inline asm
	dp4a.u32.u32 %r3363, %r3364, %r4773, %r3359;
	// end inline asm
	ld.const.u32 	%r3368, [matrix+2656];
	// begin inline asm
	dp4a.u32.u32 %r3367, %r3368, %r4777, %r3363;
	// end inline asm
	ld.const.u32 	%r3372, [matrix+2660];
	// begin inline asm
	dp4a.u32.u32 %r3371, %r3372, %r4781, %r3367;
	// end inline asm
	ld.const.u32 	%r3376, [matrix+2664];
	// begin inline asm
	dp4a.u32.u32 %r3375, %r3376, %r4785, %r3371;
	// end inline asm
	ld.const.u32 	%r3380, [matrix+2668];
	// begin inline asm
	dp4a.u32.u32 %r3379, %r3380, %r4789, %r3375;
	// end inline asm
	ld.const.u32 	%r3384, [matrix+2672];
	// begin inline asm
	dp4a.u32.u32 %r3383, %r3384, %r4793, %r3379;
	// end inline asm
	ld.const.u32 	%r3388, [matrix+2676];
	// begin inline asm
	dp4a.u32.u32 %r3387, %r3388, %r4797, %r3383;
	// end inline asm
	ld.const.u32 	%r3392, [matrix+2680];
	// begin inline asm
	dp4a.u32.u32 %r3391, %r3392, %r4801, %r3387;
	// end inline asm
	ld.const.u32 	%r3396, [matrix+2684];
	// begin inline asm
	dp4a.u32.u32 %r3395, %r3396, %r4805, %r3391;
	// end inline asm
	shr.u32 	%r5056, %r3331, 6;
	and.b32  	%r5057, %r5056, 240;
	shr.u32 	%r5058, %r3395, 10;
	or.b32  	%r5059, %r5058, %r5057;
	cvt.u64.u32 	%rd1185, %r5059;
	xor.b64  	%rd1186, %rd1124, %rd1185;
	ld.const.u32 	%r3400, [matrix+2688];
	// begin inline asm
	dp4a.u32.u32 %r3399, %r3400, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3404, [matrix+2692];
	// begin inline asm
	dp4a.u32.u32 %r3403, %r3404, %r4749, %r3399;
	// end inline asm
	ld.const.u32 	%r3408, [matrix+2696];
	// begin inline asm
	dp4a.u32.u32 %r3407, %r3408, %r4753, %r3403;
	// end inline asm
	ld.const.u32 	%r3412, [matrix+2700];
	// begin inline asm
	dp4a.u32.u32 %r3411, %r3412, %r4757, %r3407;
	// end inline asm
	ld.const.u32 	%r3416, [matrix+2704];
	// begin inline asm
	dp4a.u32.u32 %r3415, %r3416, %r4761, %r3411;
	// end inline asm
	ld.const.u32 	%r3420, [matrix+2708];
	// begin inline asm
	dp4a.u32.u32 %r3419, %r3420, %r4765, %r3415;
	// end inline asm
	ld.const.u32 	%r3424, [matrix+2712];
	// begin inline asm
	dp4a.u32.u32 %r3423, %r3424, %r4769, %r3419;
	// end inline asm
	ld.const.u32 	%r3428, [matrix+2716];
	// begin inline asm
	dp4a.u32.u32 %r3427, %r3428, %r4773, %r3423;
	// end inline asm
	ld.const.u32 	%r3432, [matrix+2720];
	// begin inline asm
	dp4a.u32.u32 %r3431, %r3432, %r4777, %r3427;
	// end inline asm
	ld.const.u32 	%r3436, [matrix+2724];
	// begin inline asm
	dp4a.u32.u32 %r3435, %r3436, %r4781, %r3431;
	// end inline asm
	ld.const.u32 	%r3440, [matrix+2728];
	// begin inline asm
	dp4a.u32.u32 %r3439, %r3440, %r4785, %r3435;
	// end inline asm
	ld.const.u32 	%r3444, [matrix+2732];
	// begin inline asm
	dp4a.u32.u32 %r3443, %r3444, %r4789, %r3439;
	// end inline asm
	ld.const.u32 	%r3448, [matrix+2736];
	// begin inline asm
	dp4a.u32.u32 %r3447, %r3448, %r4793, %r3443;
	// end inline asm
	ld.const.u32 	%r3452, [matrix+2740];
	// begin inline asm
	dp4a.u32.u32 %r3451, %r3452, %r4797, %r3447;
	// end inline asm
	ld.const.u32 	%r3456, [matrix+2744];
	// begin inline asm
	dp4a.u32.u32 %r3455, %r3456, %r4801, %r3451;
	// end inline asm
	ld.const.u32 	%r3460, [matrix+2748];
	// begin inline asm
	dp4a.u32.u32 %r3459, %r3460, %r4805, %r3455;
	// end inline asm
	ld.const.u32 	%r3464, [matrix+2752];
	// begin inline asm
	dp4a.u32.u32 %r3463, %r3464, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3468, [matrix+2756];
	// begin inline asm
	dp4a.u32.u32 %r3467, %r3468, %r4749, %r3463;
	// end inline asm
	ld.const.u32 	%r3472, [matrix+2760];
	// begin inline asm
	dp4a.u32.u32 %r3471, %r3472, %r4753, %r3467;
	// end inline asm
	ld.const.u32 	%r3476, [matrix+2764];
	// begin inline asm
	dp4a.u32.u32 %r3475, %r3476, %r4757, %r3471;
	// end inline asm
	ld.const.u32 	%r3480, [matrix+2768];
	// begin inline asm
	dp4a.u32.u32 %r3479, %r3480, %r4761, %r3475;
	// end inline asm
	ld.const.u32 	%r3484, [matrix+2772];
	// begin inline asm
	dp4a.u32.u32 %r3483, %r3484, %r4765, %r3479;
	// end inline asm
	ld.const.u32 	%r3488, [matrix+2776];
	// begin inline asm
	dp4a.u32.u32 %r3487, %r3488, %r4769, %r3483;
	// end inline asm
	ld.const.u32 	%r3492, [matrix+2780];
	// begin inline asm
	dp4a.u32.u32 %r3491, %r3492, %r4773, %r3487;
	// end inline asm
	ld.const.u32 	%r3496, [matrix+2784];
	// begin inline asm
	dp4a.u32.u32 %r3495, %r3496, %r4777, %r3491;
	// end inline asm
	ld.const.u32 	%r3500, [matrix+2788];
	// begin inline asm
	dp4a.u32.u32 %r3499, %r3500, %r4781, %r3495;
	// end inline asm
	ld.const.u32 	%r3504, [matrix+2792];
	// begin inline asm
	dp4a.u32.u32 %r3503, %r3504, %r4785, %r3499;
	// end inline asm
	ld.const.u32 	%r3508, [matrix+2796];
	// begin inline asm
	dp4a.u32.u32 %r3507, %r3508, %r4789, %r3503;
	// end inline asm
	ld.const.u32 	%r3512, [matrix+2800];
	// begin inline asm
	dp4a.u32.u32 %r3511, %r3512, %r4793, %r3507;
	// end inline asm
	ld.const.u32 	%r3516, [matrix+2804];
	// begin inline asm
	dp4a.u32.u32 %r3515, %r3516, %r4797, %r3511;
	// end inline asm
	ld.const.u32 	%r3520, [matrix+2808];
	// begin inline asm
	dp4a.u32.u32 %r3519, %r3520, %r4801, %r3515;
	// end inline asm
	ld.const.u32 	%r3524, [matrix+2812];
	// begin inline asm
	dp4a.u32.u32 %r3523, %r3524, %r4805, %r3519;
	// end inline asm
	shr.u32 	%r5060, %r3459, 6;
	and.b32  	%r5061, %r5060, 240;
	shr.u32 	%r5062, %r3523, 10;
	or.b32  	%r5063, %r5062, %r5061;
	cvt.u64.u32 	%rd1187, %r5063;
	xor.b64  	%rd1188, %rd1125, %rd1187;
	ld.const.u32 	%r3528, [matrix+2816];
	// begin inline asm
	dp4a.u32.u32 %r3527, %r3528, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3532, [matrix+2820];
	// begin inline asm
	dp4a.u32.u32 %r3531, %r3532, %r4749, %r3527;
	// end inline asm
	ld.const.u32 	%r3536, [matrix+2824];
	// begin inline asm
	dp4a.u32.u32 %r3535, %r3536, %r4753, %r3531;
	// end inline asm
	ld.const.u32 	%r3540, [matrix+2828];
	// begin inline asm
	dp4a.u32.u32 %r3539, %r3540, %r4757, %r3535;
	// end inline asm
	ld.const.u32 	%r3544, [matrix+2832];
	// begin inline asm
	dp4a.u32.u32 %r3543, %r3544, %r4761, %r3539;
	// end inline asm
	ld.const.u32 	%r3548, [matrix+2836];
	// begin inline asm
	dp4a.u32.u32 %r3547, %r3548, %r4765, %r3543;
	// end inline asm
	ld.const.u32 	%r3552, [matrix+2840];
	// begin inline asm
	dp4a.u32.u32 %r3551, %r3552, %r4769, %r3547;
	// end inline asm
	ld.const.u32 	%r3556, [matrix+2844];
	// begin inline asm
	dp4a.u32.u32 %r3555, %r3556, %r4773, %r3551;
	// end inline asm
	ld.const.u32 	%r3560, [matrix+2848];
	// begin inline asm
	dp4a.u32.u32 %r3559, %r3560, %r4777, %r3555;
	// end inline asm
	ld.const.u32 	%r3564, [matrix+2852];
	// begin inline asm
	dp4a.u32.u32 %r3563, %r3564, %r4781, %r3559;
	// end inline asm
	ld.const.u32 	%r3568, [matrix+2856];
	// begin inline asm
	dp4a.u32.u32 %r3567, %r3568, %r4785, %r3563;
	// end inline asm
	ld.const.u32 	%r3572, [matrix+2860];
	// begin inline asm
	dp4a.u32.u32 %r3571, %r3572, %r4789, %r3567;
	// end inline asm
	ld.const.u32 	%r3576, [matrix+2864];
	// begin inline asm
	dp4a.u32.u32 %r3575, %r3576, %r4793, %r3571;
	// end inline asm
	ld.const.u32 	%r3580, [matrix+2868];
	// begin inline asm
	dp4a.u32.u32 %r3579, %r3580, %r4797, %r3575;
	// end inline asm
	ld.const.u32 	%r3584, [matrix+2872];
	// begin inline asm
	dp4a.u32.u32 %r3583, %r3584, %r4801, %r3579;
	// end inline asm
	ld.const.u32 	%r3588, [matrix+2876];
	// begin inline asm
	dp4a.u32.u32 %r3587, %r3588, %r4805, %r3583;
	// end inline asm
	ld.const.u32 	%r3592, [matrix+2880];
	// begin inline asm
	dp4a.u32.u32 %r3591, %r3592, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3596, [matrix+2884];
	// begin inline asm
	dp4a.u32.u32 %r3595, %r3596, %r4749, %r3591;
	// end inline asm
	ld.const.u32 	%r3600, [matrix+2888];
	// begin inline asm
	dp4a.u32.u32 %r3599, %r3600, %r4753, %r3595;
	// end inline asm
	ld.const.u32 	%r3604, [matrix+2892];
	// begin inline asm
	dp4a.u32.u32 %r3603, %r3604, %r4757, %r3599;
	// end inline asm
	ld.const.u32 	%r3608, [matrix+2896];
	// begin inline asm
	dp4a.u32.u32 %r3607, %r3608, %r4761, %r3603;
	// end inline asm
	ld.const.u32 	%r3612, [matrix+2900];
	// begin inline asm
	dp4a.u32.u32 %r3611, %r3612, %r4765, %r3607;
	// end inline asm
	ld.const.u32 	%r3616, [matrix+2904];
	// begin inline asm
	dp4a.u32.u32 %r3615, %r3616, %r4769, %r3611;
	// end inline asm
	ld.const.u32 	%r3620, [matrix+2908];
	// begin inline asm
	dp4a.u32.u32 %r3619, %r3620, %r4773, %r3615;
	// end inline asm
	ld.const.u32 	%r3624, [matrix+2912];
	// begin inline asm
	dp4a.u32.u32 %r3623, %r3624, %r4777, %r3619;
	// end inline asm
	ld.const.u32 	%r3628, [matrix+2916];
	// begin inline asm
	dp4a.u32.u32 %r3627, %r3628, %r4781, %r3623;
	// end inline asm
	ld.const.u32 	%r3632, [matrix+2920];
	// begin inline asm
	dp4a.u32.u32 %r3631, %r3632, %r4785, %r3627;
	// end inline asm
	ld.const.u32 	%r3636, [matrix+2924];
	// begin inline asm
	dp4a.u32.u32 %r3635, %r3636, %r4789, %r3631;
	// end inline asm
	ld.const.u32 	%r3640, [matrix+2928];
	// begin inline asm
	dp4a.u32.u32 %r3639, %r3640, %r4793, %r3635;
	// end inline asm
	ld.const.u32 	%r3644, [matrix+2932];
	// begin inline asm
	dp4a.u32.u32 %r3643, %r3644, %r4797, %r3639;
	// end inline asm
	ld.const.u32 	%r3648, [matrix+2936];
	// begin inline asm
	dp4a.u32.u32 %r3647, %r3648, %r4801, %r3643;
	// end inline asm
	ld.const.u32 	%r3652, [matrix+2940];
	// begin inline asm
	dp4a.u32.u32 %r3651, %r3652, %r4805, %r3647;
	// end inline asm
	shr.u32 	%r5064, %r3587, 6;
	and.b32  	%r5065, %r5064, 240;
	shr.u32 	%r5066, %r3651, 10;
	or.b32  	%r5067, %r5066, %r5065;
	cvt.u64.u32 	%rd1189, %r5067;
	xor.b64  	%rd1190, %rd1126, %rd1189;
	ld.const.u32 	%r3656, [matrix+2944];
	// begin inline asm
	dp4a.u32.u32 %r3655, %r3656, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3660, [matrix+2948];
	// begin inline asm
	dp4a.u32.u32 %r3659, %r3660, %r4749, %r3655;
	// end inline asm
	ld.const.u32 	%r3664, [matrix+2952];
	// begin inline asm
	dp4a.u32.u32 %r3663, %r3664, %r4753, %r3659;
	// end inline asm
	ld.const.u32 	%r3668, [matrix+2956];
	// begin inline asm
	dp4a.u32.u32 %r3667, %r3668, %r4757, %r3663;
	// end inline asm
	ld.const.u32 	%r3672, [matrix+2960];
	// begin inline asm
	dp4a.u32.u32 %r3671, %r3672, %r4761, %r3667;
	// end inline asm
	ld.const.u32 	%r3676, [matrix+2964];
	// begin inline asm
	dp4a.u32.u32 %r3675, %r3676, %r4765, %r3671;
	// end inline asm
	ld.const.u32 	%r3680, [matrix+2968];
	// begin inline asm
	dp4a.u32.u32 %r3679, %r3680, %r4769, %r3675;
	// end inline asm
	ld.const.u32 	%r3684, [matrix+2972];
	// begin inline asm
	dp4a.u32.u32 %r3683, %r3684, %r4773, %r3679;
	// end inline asm
	ld.const.u32 	%r3688, [matrix+2976];
	// begin inline asm
	dp4a.u32.u32 %r3687, %r3688, %r4777, %r3683;
	// end inline asm
	ld.const.u32 	%r3692, [matrix+2980];
	// begin inline asm
	dp4a.u32.u32 %r3691, %r3692, %r4781, %r3687;
	// end inline asm
	ld.const.u32 	%r3696, [matrix+2984];
	// begin inline asm
	dp4a.u32.u32 %r3695, %r3696, %r4785, %r3691;
	// end inline asm
	ld.const.u32 	%r3700, [matrix+2988];
	// begin inline asm
	dp4a.u32.u32 %r3699, %r3700, %r4789, %r3695;
	// end inline asm
	ld.const.u32 	%r3704, [matrix+2992];
	// begin inline asm
	dp4a.u32.u32 %r3703, %r3704, %r4793, %r3699;
	// end inline asm
	ld.const.u32 	%r3708, [matrix+2996];
	// begin inline asm
	dp4a.u32.u32 %r3707, %r3708, %r4797, %r3703;
	// end inline asm
	ld.const.u32 	%r3712, [matrix+3000];
	// begin inline asm
	dp4a.u32.u32 %r3711, %r3712, %r4801, %r3707;
	// end inline asm
	ld.const.u32 	%r3716, [matrix+3004];
	// begin inline asm
	dp4a.u32.u32 %r3715, %r3716, %r4805, %r3711;
	// end inline asm
	ld.const.u32 	%r3720, [matrix+3008];
	// begin inline asm
	dp4a.u32.u32 %r3719, %r3720, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3724, [matrix+3012];
	// begin inline asm
	dp4a.u32.u32 %r3723, %r3724, %r4749, %r3719;
	// end inline asm
	ld.const.u32 	%r3728, [matrix+3016];
	// begin inline asm
	dp4a.u32.u32 %r3727, %r3728, %r4753, %r3723;
	// end inline asm
	ld.const.u32 	%r3732, [matrix+3020];
	// begin inline asm
	dp4a.u32.u32 %r3731, %r3732, %r4757, %r3727;
	// end inline asm
	ld.const.u32 	%r3736, [matrix+3024];
	// begin inline asm
	dp4a.u32.u32 %r3735, %r3736, %r4761, %r3731;
	// end inline asm
	ld.const.u32 	%r3740, [matrix+3028];
	// begin inline asm
	dp4a.u32.u32 %r3739, %r3740, %r4765, %r3735;
	// end inline asm
	ld.const.u32 	%r3744, [matrix+3032];
	// begin inline asm
	dp4a.u32.u32 %r3743, %r3744, %r4769, %r3739;
	// end inline asm
	ld.const.u32 	%r3748, [matrix+3036];
	// begin inline asm
	dp4a.u32.u32 %r3747, %r3748, %r4773, %r3743;
	// end inline asm
	ld.const.u32 	%r3752, [matrix+3040];
	// begin inline asm
	dp4a.u32.u32 %r3751, %r3752, %r4777, %r3747;
	// end inline asm
	ld.const.u32 	%r3756, [matrix+3044];
	// begin inline asm
	dp4a.u32.u32 %r3755, %r3756, %r4781, %r3751;
	// end inline asm
	ld.const.u32 	%r3760, [matrix+3048];
	// begin inline asm
	dp4a.u32.u32 %r3759, %r3760, %r4785, %r3755;
	// end inline asm
	ld.const.u32 	%r3764, [matrix+3052];
	// begin inline asm
	dp4a.u32.u32 %r3763, %r3764, %r4789, %r3759;
	// end inline asm
	ld.const.u32 	%r3768, [matrix+3056];
	// begin inline asm
	dp4a.u32.u32 %r3767, %r3768, %r4793, %r3763;
	// end inline asm
	ld.const.u32 	%r3772, [matrix+3060];
	// begin inline asm
	dp4a.u32.u32 %r3771, %r3772, %r4797, %r3767;
	// end inline asm
	ld.const.u32 	%r3776, [matrix+3064];
	// begin inline asm
	dp4a.u32.u32 %r3775, %r3776, %r4801, %r3771;
	// end inline asm
	ld.const.u32 	%r3780, [matrix+3068];
	// begin inline asm
	dp4a.u32.u32 %r3779, %r3780, %r4805, %r3775;
	// end inline asm
	shr.u32 	%r5068, %r3715, 6;
	and.b32  	%r5069, %r5068, 240;
	shr.u32 	%r5070, %r3779, 10;
	or.b32  	%r5071, %r5070, %r5069;
	cvt.u64.u32 	%rd1191, %r5071;
	ld.const.u32 	%r3784, [matrix+3072];
	// begin inline asm
	dp4a.u32.u32 %r3783, %r3784, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3788, [matrix+3076];
	// begin inline asm
	dp4a.u32.u32 %r3787, %r3788, %r4749, %r3783;
	// end inline asm
	ld.const.u32 	%r3792, [matrix+3080];
	// begin inline asm
	dp4a.u32.u32 %r3791, %r3792, %r4753, %r3787;
	// end inline asm
	ld.const.u32 	%r3796, [matrix+3084];
	// begin inline asm
	dp4a.u32.u32 %r3795, %r3796, %r4757, %r3791;
	// end inline asm
	ld.const.u32 	%r3800, [matrix+3088];
	// begin inline asm
	dp4a.u32.u32 %r3799, %r3800, %r4761, %r3795;
	// end inline asm
	ld.const.u32 	%r3804, [matrix+3092];
	// begin inline asm
	dp4a.u32.u32 %r3803, %r3804, %r4765, %r3799;
	// end inline asm
	ld.const.u32 	%r3808, [matrix+3096];
	// begin inline asm
	dp4a.u32.u32 %r3807, %r3808, %r4769, %r3803;
	// end inline asm
	ld.const.u32 	%r3812, [matrix+3100];
	// begin inline asm
	dp4a.u32.u32 %r3811, %r3812, %r4773, %r3807;
	// end inline asm
	ld.const.u32 	%r3816, [matrix+3104];
	// begin inline asm
	dp4a.u32.u32 %r3815, %r3816, %r4777, %r3811;
	// end inline asm
	ld.const.u32 	%r3820, [matrix+3108];
	// begin inline asm
	dp4a.u32.u32 %r3819, %r3820, %r4781, %r3815;
	// end inline asm
	ld.const.u32 	%r3824, [matrix+3112];
	// begin inline asm
	dp4a.u32.u32 %r3823, %r3824, %r4785, %r3819;
	// end inline asm
	ld.const.u32 	%r3828, [matrix+3116];
	// begin inline asm
	dp4a.u32.u32 %r3827, %r3828, %r4789, %r3823;
	// end inline asm
	ld.const.u32 	%r3832, [matrix+3120];
	// begin inline asm
	dp4a.u32.u32 %r3831, %r3832, %r4793, %r3827;
	// end inline asm
	ld.const.u32 	%r3836, [matrix+3124];
	// begin inline asm
	dp4a.u32.u32 %r3835, %r3836, %r4797, %r3831;
	// end inline asm
	ld.const.u32 	%r3840, [matrix+3128];
	// begin inline asm
	dp4a.u32.u32 %r3839, %r3840, %r4801, %r3835;
	// end inline asm
	ld.const.u32 	%r3844, [matrix+3132];
	// begin inline asm
	dp4a.u32.u32 %r3843, %r3844, %r4805, %r3839;
	// end inline asm
	ld.const.u32 	%r3848, [matrix+3136];
	// begin inline asm
	dp4a.u32.u32 %r3847, %r3848, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3852, [matrix+3140];
	// begin inline asm
	dp4a.u32.u32 %r3851, %r3852, %r4749, %r3847;
	// end inline asm
	ld.const.u32 	%r3856, [matrix+3144];
	// begin inline asm
	dp4a.u32.u32 %r3855, %r3856, %r4753, %r3851;
	// end inline asm
	ld.const.u32 	%r3860, [matrix+3148];
	// begin inline asm
	dp4a.u32.u32 %r3859, %r3860, %r4757, %r3855;
	// end inline asm
	ld.const.u32 	%r3864, [matrix+3152];
	// begin inline asm
	dp4a.u32.u32 %r3863, %r3864, %r4761, %r3859;
	// end inline asm
	ld.const.u32 	%r3868, [matrix+3156];
	// begin inline asm
	dp4a.u32.u32 %r3867, %r3868, %r4765, %r3863;
	// end inline asm
	ld.const.u32 	%r3872, [matrix+3160];
	// begin inline asm
	dp4a.u32.u32 %r3871, %r3872, %r4769, %r3867;
	// end inline asm
	ld.const.u32 	%r3876, [matrix+3164];
	// begin inline asm
	dp4a.u32.u32 %r3875, %r3876, %r4773, %r3871;
	// end inline asm
	ld.const.u32 	%r3880, [matrix+3168];
	// begin inline asm
	dp4a.u32.u32 %r3879, %r3880, %r4777, %r3875;
	// end inline asm
	ld.const.u32 	%r3884, [matrix+3172];
	// begin inline asm
	dp4a.u32.u32 %r3883, %r3884, %r4781, %r3879;
	// end inline asm
	ld.const.u32 	%r3888, [matrix+3176];
	// begin inline asm
	dp4a.u32.u32 %r3887, %r3888, %r4785, %r3883;
	// end inline asm
	ld.const.u32 	%r3892, [matrix+3180];
	// begin inline asm
	dp4a.u32.u32 %r3891, %r3892, %r4789, %r3887;
	// end inline asm
	ld.const.u32 	%r3896, [matrix+3184];
	// begin inline asm
	dp4a.u32.u32 %r3895, %r3896, %r4793, %r3891;
	// end inline asm
	ld.const.u32 	%r3900, [matrix+3188];
	// begin inline asm
	dp4a.u32.u32 %r3899, %r3900, %r4797, %r3895;
	// end inline asm
	ld.const.u32 	%r3904, [matrix+3192];
	// begin inline asm
	dp4a.u32.u32 %r3903, %r3904, %r4801, %r3899;
	// end inline asm
	ld.const.u32 	%r3908, [matrix+3196];
	// begin inline asm
	dp4a.u32.u32 %r3907, %r3908, %r4805, %r3903;
	// end inline asm
	shr.u32 	%r5072, %r3843, 6;
	and.b32  	%r5073, %r5072, 240;
	bfe.u32 	%r5074, %r3907, 10, 8;
	or.b32  	%r5075, %r5074, %r5073;
	cvt.u64.u32 	%rd1192, %r5075;
	ld.const.u32 	%r3912, [matrix+3200];
	// begin inline asm
	dp4a.u32.u32 %r3911, %r3912, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3916, [matrix+3204];
	// begin inline asm
	dp4a.u32.u32 %r3915, %r3916, %r4749, %r3911;
	// end inline asm
	ld.const.u32 	%r3920, [matrix+3208];
	// begin inline asm
	dp4a.u32.u32 %r3919, %r3920, %r4753, %r3915;
	// end inline asm
	ld.const.u32 	%r3924, [matrix+3212];
	// begin inline asm
	dp4a.u32.u32 %r3923, %r3924, %r4757, %r3919;
	// end inline asm
	ld.const.u32 	%r3928, [matrix+3216];
	// begin inline asm
	dp4a.u32.u32 %r3927, %r3928, %r4761, %r3923;
	// end inline asm
	ld.const.u32 	%r3932, [matrix+3220];
	// begin inline asm
	dp4a.u32.u32 %r3931, %r3932, %r4765, %r3927;
	// end inline asm
	ld.const.u32 	%r3936, [matrix+3224];
	// begin inline asm
	dp4a.u32.u32 %r3935, %r3936, %r4769, %r3931;
	// end inline asm
	ld.const.u32 	%r3940, [matrix+3228];
	// begin inline asm
	dp4a.u32.u32 %r3939, %r3940, %r4773, %r3935;
	// end inline asm
	ld.const.u32 	%r3944, [matrix+3232];
	// begin inline asm
	dp4a.u32.u32 %r3943, %r3944, %r4777, %r3939;
	// end inline asm
	ld.const.u32 	%r3948, [matrix+3236];
	// begin inline asm
	dp4a.u32.u32 %r3947, %r3948, %r4781, %r3943;
	// end inline asm
	ld.const.u32 	%r3952, [matrix+3240];
	// begin inline asm
	dp4a.u32.u32 %r3951, %r3952, %r4785, %r3947;
	// end inline asm
	ld.const.u32 	%r3956, [matrix+3244];
	// begin inline asm
	dp4a.u32.u32 %r3955, %r3956, %r4789, %r3951;
	// end inline asm
	ld.const.u32 	%r3960, [matrix+3248];
	// begin inline asm
	dp4a.u32.u32 %r3959, %r3960, %r4793, %r3955;
	// end inline asm
	ld.const.u32 	%r3964, [matrix+3252];
	// begin inline asm
	dp4a.u32.u32 %r3963, %r3964, %r4797, %r3959;
	// end inline asm
	ld.const.u32 	%r3968, [matrix+3256];
	// begin inline asm
	dp4a.u32.u32 %r3967, %r3968, %r4801, %r3963;
	// end inline asm
	ld.const.u32 	%r3972, [matrix+3260];
	// begin inline asm
	dp4a.u32.u32 %r3971, %r3972, %r4805, %r3967;
	// end inline asm
	ld.const.u32 	%r3976, [matrix+3264];
	// begin inline asm
	dp4a.u32.u32 %r3975, %r3976, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r3980, [matrix+3268];
	// begin inline asm
	dp4a.u32.u32 %r3979, %r3980, %r4749, %r3975;
	// end inline asm
	ld.const.u32 	%r3984, [matrix+3272];
	// begin inline asm
	dp4a.u32.u32 %r3983, %r3984, %r4753, %r3979;
	// end inline asm
	ld.const.u32 	%r3988, [matrix+3276];
	// begin inline asm
	dp4a.u32.u32 %r3987, %r3988, %r4757, %r3983;
	// end inline asm
	ld.const.u32 	%r3992, [matrix+3280];
	// begin inline asm
	dp4a.u32.u32 %r3991, %r3992, %r4761, %r3987;
	// end inline asm
	ld.const.u32 	%r3996, [matrix+3284];
	// begin inline asm
	dp4a.u32.u32 %r3995, %r3996, %r4765, %r3991;
	// end inline asm
	ld.const.u32 	%r4000, [matrix+3288];
	// begin inline asm
	dp4a.u32.u32 %r3999, %r4000, %r4769, %r3995;
	// end inline asm
	ld.const.u32 	%r4004, [matrix+3292];
	// begin inline asm
	dp4a.u32.u32 %r4003, %r4004, %r4773, %r3999;
	// end inline asm
	ld.const.u32 	%r4008, [matrix+3296];
	// begin inline asm
	dp4a.u32.u32 %r4007, %r4008, %r4777, %r4003;
	// end inline asm
	ld.const.u32 	%r4012, [matrix+3300];
	// begin inline asm
	dp4a.u32.u32 %r4011, %r4012, %r4781, %r4007;
	// end inline asm
	ld.const.u32 	%r4016, [matrix+3304];
	// begin inline asm
	dp4a.u32.u32 %r4015, %r4016, %r4785, %r4011;
	// end inline asm
	ld.const.u32 	%r4020, [matrix+3308];
	// begin inline asm
	dp4a.u32.u32 %r4019, %r4020, %r4789, %r4015;
	// end inline asm
	ld.const.u32 	%r4024, [matrix+3312];
	// begin inline asm
	dp4a.u32.u32 %r4023, %r4024, %r4793, %r4019;
	// end inline asm
	ld.const.u32 	%r4028, [matrix+3316];
	// begin inline asm
	dp4a.u32.u32 %r4027, %r4028, %r4797, %r4023;
	// end inline asm
	ld.const.u32 	%r4032, [matrix+3320];
	// begin inline asm
	dp4a.u32.u32 %r4031, %r4032, %r4801, %r4027;
	// end inline asm
	ld.const.u32 	%r4036, [matrix+3324];
	// begin inline asm
	dp4a.u32.u32 %r4035, %r4036, %r4805, %r4031;
	// end inline asm
	shr.u32 	%r5076, %r3971, 6;
	and.b32  	%r5077, %r5076, 240;
	shr.u32 	%r5078, %r4035, 10;
	or.b32  	%r5079, %r5078, %r5077;
	cvt.u64.u32 	%rd1193, %r5079;
	xor.b64  	%rd1194, %rd1137, %rd1193;
	and.b64  	%rd1195, %rd2222, 255;
	xor.b64  	%rd1196, %rd1195, %rd1192;
	ld.const.u32 	%r4040, [matrix+3328];
	// begin inline asm
	dp4a.u32.u32 %r4039, %r4040, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4044, [matrix+3332];
	// begin inline asm
	dp4a.u32.u32 %r4043, %r4044, %r4749, %r4039;
	// end inline asm
	ld.const.u32 	%r4048, [matrix+3336];
	// begin inline asm
	dp4a.u32.u32 %r4047, %r4048, %r4753, %r4043;
	// end inline asm
	ld.const.u32 	%r4052, [matrix+3340];
	// begin inline asm
	dp4a.u32.u32 %r4051, %r4052, %r4757, %r4047;
	// end inline asm
	ld.const.u32 	%r4056, [matrix+3344];
	// begin inline asm
	dp4a.u32.u32 %r4055, %r4056, %r4761, %r4051;
	// end inline asm
	ld.const.u32 	%r4060, [matrix+3348];
	// begin inline asm
	dp4a.u32.u32 %r4059, %r4060, %r4765, %r4055;
	// end inline asm
	ld.const.u32 	%r4064, [matrix+3352];
	// begin inline asm
	dp4a.u32.u32 %r4063, %r4064, %r4769, %r4059;
	// end inline asm
	ld.const.u32 	%r4068, [matrix+3356];
	// begin inline asm
	dp4a.u32.u32 %r4067, %r4068, %r4773, %r4063;
	// end inline asm
	ld.const.u32 	%r4072, [matrix+3360];
	// begin inline asm
	dp4a.u32.u32 %r4071, %r4072, %r4777, %r4067;
	// end inline asm
	ld.const.u32 	%r4076, [matrix+3364];
	// begin inline asm
	dp4a.u32.u32 %r4075, %r4076, %r4781, %r4071;
	// end inline asm
	ld.const.u32 	%r4080, [matrix+3368];
	// begin inline asm
	dp4a.u32.u32 %r4079, %r4080, %r4785, %r4075;
	// end inline asm
	ld.const.u32 	%r4084, [matrix+3372];
	// begin inline asm
	dp4a.u32.u32 %r4083, %r4084, %r4789, %r4079;
	// end inline asm
	ld.const.u32 	%r4088, [matrix+3376];
	// begin inline asm
	dp4a.u32.u32 %r4087, %r4088, %r4793, %r4083;
	// end inline asm
	ld.const.u32 	%r4092, [matrix+3380];
	// begin inline asm
	dp4a.u32.u32 %r4091, %r4092, %r4797, %r4087;
	// end inline asm
	ld.const.u32 	%r4096, [matrix+3384];
	// begin inline asm
	dp4a.u32.u32 %r4095, %r4096, %r4801, %r4091;
	// end inline asm
	ld.const.u32 	%r4100, [matrix+3388];
	// begin inline asm
	dp4a.u32.u32 %r4099, %r4100, %r4805, %r4095;
	// end inline asm
	ld.const.u32 	%r4104, [matrix+3392];
	// begin inline asm
	dp4a.u32.u32 %r4103, %r4104, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4108, [matrix+3396];
	// begin inline asm
	dp4a.u32.u32 %r4107, %r4108, %r4749, %r4103;
	// end inline asm
	ld.const.u32 	%r4112, [matrix+3400];
	// begin inline asm
	dp4a.u32.u32 %r4111, %r4112, %r4753, %r4107;
	// end inline asm
	ld.const.u32 	%r4116, [matrix+3404];
	// begin inline asm
	dp4a.u32.u32 %r4115, %r4116, %r4757, %r4111;
	// end inline asm
	ld.const.u32 	%r4120, [matrix+3408];
	// begin inline asm
	dp4a.u32.u32 %r4119, %r4120, %r4761, %r4115;
	// end inline asm
	ld.const.u32 	%r4124, [matrix+3412];
	// begin inline asm
	dp4a.u32.u32 %r4123, %r4124, %r4765, %r4119;
	// end inline asm
	ld.const.u32 	%r4128, [matrix+3416];
	// begin inline asm
	dp4a.u32.u32 %r4127, %r4128, %r4769, %r4123;
	// end inline asm
	ld.const.u32 	%r4132, [matrix+3420];
	// begin inline asm
	dp4a.u32.u32 %r4131, %r4132, %r4773, %r4127;
	// end inline asm
	ld.const.u32 	%r4136, [matrix+3424];
	// begin inline asm
	dp4a.u32.u32 %r4135, %r4136, %r4777, %r4131;
	// end inline asm
	ld.const.u32 	%r4140, [matrix+3428];
	// begin inline asm
	dp4a.u32.u32 %r4139, %r4140, %r4781, %r4135;
	// end inline asm
	ld.const.u32 	%r4144, [matrix+3432];
	// begin inline asm
	dp4a.u32.u32 %r4143, %r4144, %r4785, %r4139;
	// end inline asm
	ld.const.u32 	%r4148, [matrix+3436];
	// begin inline asm
	dp4a.u32.u32 %r4147, %r4148, %r4789, %r4143;
	// end inline asm
	ld.const.u32 	%r4152, [matrix+3440];
	// begin inline asm
	dp4a.u32.u32 %r4151, %r4152, %r4793, %r4147;
	// end inline asm
	ld.const.u32 	%r4156, [matrix+3444];
	// begin inline asm
	dp4a.u32.u32 %r4155, %r4156, %r4797, %r4151;
	// end inline asm
	ld.const.u32 	%r4160, [matrix+3448];
	// begin inline asm
	dp4a.u32.u32 %r4159, %r4160, %r4801, %r4155;
	// end inline asm
	ld.const.u32 	%r4164, [matrix+3452];
	// begin inline asm
	dp4a.u32.u32 %r4163, %r4164, %r4805, %r4159;
	// end inline asm
	shr.u32 	%r5080, %r4099, 6;
	and.b32  	%r5081, %r5080, 240;
	shr.u32 	%r5082, %r4163, 10;
	or.b32  	%r5083, %r5082, %r5081;
	cvt.u64.u32 	%rd1197, %r5083;
	xor.b64  	%rd1198, %rd1138, %rd1197;
	ld.const.u32 	%r4168, [matrix+3456];
	// begin inline asm
	dp4a.u32.u32 %r4167, %r4168, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4172, [matrix+3460];
	// begin inline asm
	dp4a.u32.u32 %r4171, %r4172, %r4749, %r4167;
	// end inline asm
	ld.const.u32 	%r4176, [matrix+3464];
	// begin inline asm
	dp4a.u32.u32 %r4175, %r4176, %r4753, %r4171;
	// end inline asm
	ld.const.u32 	%r4180, [matrix+3468];
	// begin inline asm
	dp4a.u32.u32 %r4179, %r4180, %r4757, %r4175;
	// end inline asm
	ld.const.u32 	%r4184, [matrix+3472];
	// begin inline asm
	dp4a.u32.u32 %r4183, %r4184, %r4761, %r4179;
	// end inline asm
	ld.const.u32 	%r4188, [matrix+3476];
	// begin inline asm
	dp4a.u32.u32 %r4187, %r4188, %r4765, %r4183;
	// end inline asm
	ld.const.u32 	%r4192, [matrix+3480];
	// begin inline asm
	dp4a.u32.u32 %r4191, %r4192, %r4769, %r4187;
	// end inline asm
	ld.const.u32 	%r4196, [matrix+3484];
	// begin inline asm
	dp4a.u32.u32 %r4195, %r4196, %r4773, %r4191;
	// end inline asm
	ld.const.u32 	%r4200, [matrix+3488];
	// begin inline asm
	dp4a.u32.u32 %r4199, %r4200, %r4777, %r4195;
	// end inline asm
	ld.const.u32 	%r4204, [matrix+3492];
	// begin inline asm
	dp4a.u32.u32 %r4203, %r4204, %r4781, %r4199;
	// end inline asm
	ld.const.u32 	%r4208, [matrix+3496];
	// begin inline asm
	dp4a.u32.u32 %r4207, %r4208, %r4785, %r4203;
	// end inline asm
	ld.const.u32 	%r4212, [matrix+3500];
	// begin inline asm
	dp4a.u32.u32 %r4211, %r4212, %r4789, %r4207;
	// end inline asm
	ld.const.u32 	%r4216, [matrix+3504];
	// begin inline asm
	dp4a.u32.u32 %r4215, %r4216, %r4793, %r4211;
	// end inline asm
	ld.const.u32 	%r4220, [matrix+3508];
	// begin inline asm
	dp4a.u32.u32 %r4219, %r4220, %r4797, %r4215;
	// end inline asm
	ld.const.u32 	%r4224, [matrix+3512];
	// begin inline asm
	dp4a.u32.u32 %r4223, %r4224, %r4801, %r4219;
	// end inline asm
	ld.const.u32 	%r4228, [matrix+3516];
	// begin inline asm
	dp4a.u32.u32 %r4227, %r4228, %r4805, %r4223;
	// end inline asm
	ld.const.u32 	%r4232, [matrix+3520];
	// begin inline asm
	dp4a.u32.u32 %r4231, %r4232, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4236, [matrix+3524];
	// begin inline asm
	dp4a.u32.u32 %r4235, %r4236, %r4749, %r4231;
	// end inline asm
	ld.const.u32 	%r4240, [matrix+3528];
	// begin inline asm
	dp4a.u32.u32 %r4239, %r4240, %r4753, %r4235;
	// end inline asm
	ld.const.u32 	%r4244, [matrix+3532];
	// begin inline asm
	dp4a.u32.u32 %r4243, %r4244, %r4757, %r4239;
	// end inline asm
	ld.const.u32 	%r4248, [matrix+3536];
	// begin inline asm
	dp4a.u32.u32 %r4247, %r4248, %r4761, %r4243;
	// end inline asm
	ld.const.u32 	%r4252, [matrix+3540];
	// begin inline asm
	dp4a.u32.u32 %r4251, %r4252, %r4765, %r4247;
	// end inline asm
	ld.const.u32 	%r4256, [matrix+3544];
	// begin inline asm
	dp4a.u32.u32 %r4255, %r4256, %r4769, %r4251;
	// end inline asm
	ld.const.u32 	%r4260, [matrix+3548];
	// begin inline asm
	dp4a.u32.u32 %r4259, %r4260, %r4773, %r4255;
	// end inline asm
	ld.const.u32 	%r4264, [matrix+3552];
	// begin inline asm
	dp4a.u32.u32 %r4263, %r4264, %r4777, %r4259;
	// end inline asm
	ld.const.u32 	%r4268, [matrix+3556];
	// begin inline asm
	dp4a.u32.u32 %r4267, %r4268, %r4781, %r4263;
	// end inline asm
	ld.const.u32 	%r4272, [matrix+3560];
	// begin inline asm
	dp4a.u32.u32 %r4271, %r4272, %r4785, %r4267;
	// end inline asm
	ld.const.u32 	%r4276, [matrix+3564];
	// begin inline asm
	dp4a.u32.u32 %r4275, %r4276, %r4789, %r4271;
	// end inline asm
	ld.const.u32 	%r4280, [matrix+3568];
	// begin inline asm
	dp4a.u32.u32 %r4279, %r4280, %r4793, %r4275;
	// end inline asm
	ld.const.u32 	%r4284, [matrix+3572];
	// begin inline asm
	dp4a.u32.u32 %r4283, %r4284, %r4797, %r4279;
	// end inline asm
	ld.const.u32 	%r4288, [matrix+3576];
	// begin inline asm
	dp4a.u32.u32 %r4287, %r4288, %r4801, %r4283;
	// end inline asm
	ld.const.u32 	%r4292, [matrix+3580];
	// begin inline asm
	dp4a.u32.u32 %r4291, %r4292, %r4805, %r4287;
	// end inline asm
	shr.u32 	%r5084, %r4227, 6;
	and.b32  	%r5085, %r5084, 240;
	shr.u32 	%r5086, %r4291, 10;
	or.b32  	%r5087, %r5086, %r5085;
	cvt.u64.u32 	%rd1199, %r5087;
	xor.b64  	%rd1200, %rd1139, %rd1199;
	ld.const.u32 	%r4296, [matrix+3584];
	// begin inline asm
	dp4a.u32.u32 %r4295, %r4296, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4300, [matrix+3588];
	// begin inline asm
	dp4a.u32.u32 %r4299, %r4300, %r4749, %r4295;
	// end inline asm
	ld.const.u32 	%r4304, [matrix+3592];
	// begin inline asm
	dp4a.u32.u32 %r4303, %r4304, %r4753, %r4299;
	// end inline asm
	ld.const.u32 	%r4308, [matrix+3596];
	// begin inline asm
	dp4a.u32.u32 %r4307, %r4308, %r4757, %r4303;
	// end inline asm
	ld.const.u32 	%r4312, [matrix+3600];
	// begin inline asm
	dp4a.u32.u32 %r4311, %r4312, %r4761, %r4307;
	// end inline asm
	ld.const.u32 	%r4316, [matrix+3604];
	// begin inline asm
	dp4a.u32.u32 %r4315, %r4316, %r4765, %r4311;
	// end inline asm
	ld.const.u32 	%r4320, [matrix+3608];
	// begin inline asm
	dp4a.u32.u32 %r4319, %r4320, %r4769, %r4315;
	// end inline asm
	ld.const.u32 	%r4324, [matrix+3612];
	// begin inline asm
	dp4a.u32.u32 %r4323, %r4324, %r4773, %r4319;
	// end inline asm
	ld.const.u32 	%r4328, [matrix+3616];
	// begin inline asm
	dp4a.u32.u32 %r4327, %r4328, %r4777, %r4323;
	// end inline asm
	ld.const.u32 	%r4332, [matrix+3620];
	// begin inline asm
	dp4a.u32.u32 %r4331, %r4332, %r4781, %r4327;
	// end inline asm
	ld.const.u32 	%r4336, [matrix+3624];
	// begin inline asm
	dp4a.u32.u32 %r4335, %r4336, %r4785, %r4331;
	// end inline asm
	ld.const.u32 	%r4340, [matrix+3628];
	// begin inline asm
	dp4a.u32.u32 %r4339, %r4340, %r4789, %r4335;
	// end inline asm
	ld.const.u32 	%r4344, [matrix+3632];
	// begin inline asm
	dp4a.u32.u32 %r4343, %r4344, %r4793, %r4339;
	// end inline asm
	ld.const.u32 	%r4348, [matrix+3636];
	// begin inline asm
	dp4a.u32.u32 %r4347, %r4348, %r4797, %r4343;
	// end inline asm
	ld.const.u32 	%r4352, [matrix+3640];
	// begin inline asm
	dp4a.u32.u32 %r4351, %r4352, %r4801, %r4347;
	// end inline asm
	ld.const.u32 	%r4356, [matrix+3644];
	// begin inline asm
	dp4a.u32.u32 %r4355, %r4356, %r4805, %r4351;
	// end inline asm
	ld.const.u32 	%r4360, [matrix+3648];
	// begin inline asm
	dp4a.u32.u32 %r4359, %r4360, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4364, [matrix+3652];
	// begin inline asm
	dp4a.u32.u32 %r4363, %r4364, %r4749, %r4359;
	// end inline asm
	ld.const.u32 	%r4368, [matrix+3656];
	// begin inline asm
	dp4a.u32.u32 %r4367, %r4368, %r4753, %r4363;
	// end inline asm
	ld.const.u32 	%r4372, [matrix+3660];
	// begin inline asm
	dp4a.u32.u32 %r4371, %r4372, %r4757, %r4367;
	// end inline asm
	ld.const.u32 	%r4376, [matrix+3664];
	// begin inline asm
	dp4a.u32.u32 %r4375, %r4376, %r4761, %r4371;
	// end inline asm
	ld.const.u32 	%r4380, [matrix+3668];
	// begin inline asm
	dp4a.u32.u32 %r4379, %r4380, %r4765, %r4375;
	// end inline asm
	ld.const.u32 	%r4384, [matrix+3672];
	// begin inline asm
	dp4a.u32.u32 %r4383, %r4384, %r4769, %r4379;
	// end inline asm
	ld.const.u32 	%r4388, [matrix+3676];
	// begin inline asm
	dp4a.u32.u32 %r4387, %r4388, %r4773, %r4383;
	// end inline asm
	ld.const.u32 	%r4392, [matrix+3680];
	// begin inline asm
	dp4a.u32.u32 %r4391, %r4392, %r4777, %r4387;
	// end inline asm
	ld.const.u32 	%r4396, [matrix+3684];
	// begin inline asm
	dp4a.u32.u32 %r4395, %r4396, %r4781, %r4391;
	// end inline asm
	ld.const.u32 	%r4400, [matrix+3688];
	// begin inline asm
	dp4a.u32.u32 %r4399, %r4400, %r4785, %r4395;
	// end inline asm
	ld.const.u32 	%r4404, [matrix+3692];
	// begin inline asm
	dp4a.u32.u32 %r4403, %r4404, %r4789, %r4399;
	// end inline asm
	ld.const.u32 	%r4408, [matrix+3696];
	// begin inline asm
	dp4a.u32.u32 %r4407, %r4408, %r4793, %r4403;
	// end inline asm
	ld.const.u32 	%r4412, [matrix+3700];
	// begin inline asm
	dp4a.u32.u32 %r4411, %r4412, %r4797, %r4407;
	// end inline asm
	ld.const.u32 	%r4416, [matrix+3704];
	// begin inline asm
	dp4a.u32.u32 %r4415, %r4416, %r4801, %r4411;
	// end inline asm
	ld.const.u32 	%r4420, [matrix+3708];
	// begin inline asm
	dp4a.u32.u32 %r4419, %r4420, %r4805, %r4415;
	// end inline asm
	shr.u32 	%r5088, %r4355, 6;
	and.b32  	%r5089, %r5088, 240;
	shr.u32 	%r5090, %r4419, 10;
	or.b32  	%r5091, %r5090, %r5089;
	cvt.u64.u32 	%rd1201, %r5091;
	xor.b64  	%rd1202, %rd1140, %rd1201;
	ld.const.u32 	%r4424, [matrix+3712];
	// begin inline asm
	dp4a.u32.u32 %r4423, %r4424, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4428, [matrix+3716];
	// begin inline asm
	dp4a.u32.u32 %r4427, %r4428, %r4749, %r4423;
	// end inline asm
	ld.const.u32 	%r4432, [matrix+3720];
	// begin inline asm
	dp4a.u32.u32 %r4431, %r4432, %r4753, %r4427;
	// end inline asm
	ld.const.u32 	%r4436, [matrix+3724];
	// begin inline asm
	dp4a.u32.u32 %r4435, %r4436, %r4757, %r4431;
	// end inline asm
	ld.const.u32 	%r4440, [matrix+3728];
	// begin inline asm
	dp4a.u32.u32 %r4439, %r4440, %r4761, %r4435;
	// end inline asm
	ld.const.u32 	%r4444, [matrix+3732];
	// begin inline asm
	dp4a.u32.u32 %r4443, %r4444, %r4765, %r4439;
	// end inline asm
	ld.const.u32 	%r4448, [matrix+3736];
	// begin inline asm
	dp4a.u32.u32 %r4447, %r4448, %r4769, %r4443;
	// end inline asm
	ld.const.u32 	%r4452, [matrix+3740];
	// begin inline asm
	dp4a.u32.u32 %r4451, %r4452, %r4773, %r4447;
	// end inline asm
	ld.const.u32 	%r4456, [matrix+3744];
	// begin inline asm
	dp4a.u32.u32 %r4455, %r4456, %r4777, %r4451;
	// end inline asm
	ld.const.u32 	%r4460, [matrix+3748];
	// begin inline asm
	dp4a.u32.u32 %r4459, %r4460, %r4781, %r4455;
	// end inline asm
	ld.const.u32 	%r4464, [matrix+3752];
	// begin inline asm
	dp4a.u32.u32 %r4463, %r4464, %r4785, %r4459;
	// end inline asm
	ld.const.u32 	%r4468, [matrix+3756];
	// begin inline asm
	dp4a.u32.u32 %r4467, %r4468, %r4789, %r4463;
	// end inline asm
	ld.const.u32 	%r4472, [matrix+3760];
	// begin inline asm
	dp4a.u32.u32 %r4471, %r4472, %r4793, %r4467;
	// end inline asm
	ld.const.u32 	%r4476, [matrix+3764];
	// begin inline asm
	dp4a.u32.u32 %r4475, %r4476, %r4797, %r4471;
	// end inline asm
	ld.const.u32 	%r4480, [matrix+3768];
	// begin inline asm
	dp4a.u32.u32 %r4479, %r4480, %r4801, %r4475;
	// end inline asm
	ld.const.u32 	%r4484, [matrix+3772];
	// begin inline asm
	dp4a.u32.u32 %r4483, %r4484, %r4805, %r4479;
	// end inline asm
	ld.const.u32 	%r4488, [matrix+3776];
	// begin inline asm
	dp4a.u32.u32 %r4487, %r4488, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4492, [matrix+3780];
	// begin inline asm
	dp4a.u32.u32 %r4491, %r4492, %r4749, %r4487;
	// end inline asm
	ld.const.u32 	%r4496, [matrix+3784];
	// begin inline asm
	dp4a.u32.u32 %r4495, %r4496, %r4753, %r4491;
	// end inline asm
	ld.const.u32 	%r4500, [matrix+3788];
	// begin inline asm
	dp4a.u32.u32 %r4499, %r4500, %r4757, %r4495;
	// end inline asm
	ld.const.u32 	%r4504, [matrix+3792];
	// begin inline asm
	dp4a.u32.u32 %r4503, %r4504, %r4761, %r4499;
	// end inline asm
	ld.const.u32 	%r4508, [matrix+3796];
	// begin inline asm
	dp4a.u32.u32 %r4507, %r4508, %r4765, %r4503;
	// end inline asm
	ld.const.u32 	%r4512, [matrix+3800];
	// begin inline asm
	dp4a.u32.u32 %r4511, %r4512, %r4769, %r4507;
	// end inline asm
	ld.const.u32 	%r4516, [matrix+3804];
	// begin inline asm
	dp4a.u32.u32 %r4515, %r4516, %r4773, %r4511;
	// end inline asm
	ld.const.u32 	%r4520, [matrix+3808];
	// begin inline asm
	dp4a.u32.u32 %r4519, %r4520, %r4777, %r4515;
	// end inline asm
	ld.const.u32 	%r4524, [matrix+3812];
	// begin inline asm
	dp4a.u32.u32 %r4523, %r4524, %r4781, %r4519;
	// end inline asm
	ld.const.u32 	%r4528, [matrix+3816];
	// begin inline asm
	dp4a.u32.u32 %r4527, %r4528, %r4785, %r4523;
	// end inline asm
	ld.const.u32 	%r4532, [matrix+3820];
	// begin inline asm
	dp4a.u32.u32 %r4531, %r4532, %r4789, %r4527;
	// end inline asm
	ld.const.u32 	%r4536, [matrix+3824];
	// begin inline asm
	dp4a.u32.u32 %r4535, %r4536, %r4793, %r4531;
	// end inline asm
	ld.const.u32 	%r4540, [matrix+3828];
	// begin inline asm
	dp4a.u32.u32 %r4539, %r4540, %r4797, %r4535;
	// end inline asm
	ld.const.u32 	%r4544, [matrix+3832];
	// begin inline asm
	dp4a.u32.u32 %r4543, %r4544, %r4801, %r4539;
	// end inline asm
	ld.const.u32 	%r4548, [matrix+3836];
	// begin inline asm
	dp4a.u32.u32 %r4547, %r4548, %r4805, %r4543;
	// end inline asm
	shr.u32 	%r5092, %r4483, 6;
	and.b32  	%r5093, %r5092, 240;
	shr.u32 	%r5094, %r4547, 10;
	or.b32  	%r5095, %r5094, %r5093;
	cvt.u64.u32 	%rd1203, %r5095;
	xor.b64  	%rd1204, %rd1142, %rd1203;
	ld.const.u32 	%r4552, [matrix+3840];
	// begin inline asm
	dp4a.u32.u32 %r4551, %r4552, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4556, [matrix+3844];
	// begin inline asm
	dp4a.u32.u32 %r4555, %r4556, %r4749, %r4551;
	// end inline asm
	ld.const.u32 	%r4560, [matrix+3848];
	// begin inline asm
	dp4a.u32.u32 %r4559, %r4560, %r4753, %r4555;
	// end inline asm
	ld.const.u32 	%r4564, [matrix+3852];
	// begin inline asm
	dp4a.u32.u32 %r4563, %r4564, %r4757, %r4559;
	// end inline asm
	ld.const.u32 	%r4568, [matrix+3856];
	// begin inline asm
	dp4a.u32.u32 %r4567, %r4568, %r4761, %r4563;
	// end inline asm
	ld.const.u32 	%r4572, [matrix+3860];
	// begin inline asm
	dp4a.u32.u32 %r4571, %r4572, %r4765, %r4567;
	// end inline asm
	ld.const.u32 	%r4576, [matrix+3864];
	// begin inline asm
	dp4a.u32.u32 %r4575, %r4576, %r4769, %r4571;
	// end inline asm
	ld.const.u32 	%r4580, [matrix+3868];
	// begin inline asm
	dp4a.u32.u32 %r4579, %r4580, %r4773, %r4575;
	// end inline asm
	ld.const.u32 	%r4584, [matrix+3872];
	// begin inline asm
	dp4a.u32.u32 %r4583, %r4584, %r4777, %r4579;
	// end inline asm
	ld.const.u32 	%r4588, [matrix+3876];
	// begin inline asm
	dp4a.u32.u32 %r4587, %r4588, %r4781, %r4583;
	// end inline asm
	ld.const.u32 	%r4592, [matrix+3880];
	// begin inline asm
	dp4a.u32.u32 %r4591, %r4592, %r4785, %r4587;
	// end inline asm
	ld.const.u32 	%r4596, [matrix+3884];
	// begin inline asm
	dp4a.u32.u32 %r4595, %r4596, %r4789, %r4591;
	// end inline asm
	ld.const.u32 	%r4600, [matrix+3888];
	// begin inline asm
	dp4a.u32.u32 %r4599, %r4600, %r4793, %r4595;
	// end inline asm
	ld.const.u32 	%r4604, [matrix+3892];
	// begin inline asm
	dp4a.u32.u32 %r4603, %r4604, %r4797, %r4599;
	// end inline asm
	ld.const.u32 	%r4608, [matrix+3896];
	// begin inline asm
	dp4a.u32.u32 %r4607, %r4608, %r4801, %r4603;
	// end inline asm
	ld.const.u32 	%r4612, [matrix+3900];
	// begin inline asm
	dp4a.u32.u32 %r4611, %r4612, %r4805, %r4607;
	// end inline asm
	ld.const.u32 	%r4616, [matrix+3904];
	// begin inline asm
	dp4a.u32.u32 %r4615, %r4616, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4620, [matrix+3908];
	// begin inline asm
	dp4a.u32.u32 %r4619, %r4620, %r4749, %r4615;
	// end inline asm
	ld.const.u32 	%r4624, [matrix+3912];
	// begin inline asm
	dp4a.u32.u32 %r4623, %r4624, %r4753, %r4619;
	// end inline asm
	ld.const.u32 	%r4628, [matrix+3916];
	// begin inline asm
	dp4a.u32.u32 %r4627, %r4628, %r4757, %r4623;
	// end inline asm
	ld.const.u32 	%r4632, [matrix+3920];
	// begin inline asm
	dp4a.u32.u32 %r4631, %r4632, %r4761, %r4627;
	// end inline asm
	ld.const.u32 	%r4636, [matrix+3924];
	// begin inline asm
	dp4a.u32.u32 %r4635, %r4636, %r4765, %r4631;
	// end inline asm
	ld.const.u32 	%r4640, [matrix+3928];
	// begin inline asm
	dp4a.u32.u32 %r4639, %r4640, %r4769, %r4635;
	// end inline asm
	ld.const.u32 	%r4644, [matrix+3932];
	// begin inline asm
	dp4a.u32.u32 %r4643, %r4644, %r4773, %r4639;
	// end inline asm
	ld.const.u32 	%r4648, [matrix+3936];
	// begin inline asm
	dp4a.u32.u32 %r4647, %r4648, %r4777, %r4643;
	// end inline asm
	ld.const.u32 	%r4652, [matrix+3940];
	// begin inline asm
	dp4a.u32.u32 %r4651, %r4652, %r4781, %r4647;
	// end inline asm
	ld.const.u32 	%r4656, [matrix+3944];
	// begin inline asm
	dp4a.u32.u32 %r4655, %r4656, %r4785, %r4651;
	// end inline asm
	ld.const.u32 	%r4660, [matrix+3948];
	// begin inline asm
	dp4a.u32.u32 %r4659, %r4660, %r4789, %r4655;
	// end inline asm
	ld.const.u32 	%r4664, [matrix+3952];
	// begin inline asm
	dp4a.u32.u32 %r4663, %r4664, %r4793, %r4659;
	// end inline asm
	ld.const.u32 	%r4668, [matrix+3956];
	// begin inline asm
	dp4a.u32.u32 %r4667, %r4668, %r4797, %r4663;
	// end inline asm
	ld.const.u32 	%r4672, [matrix+3960];
	// begin inline asm
	dp4a.u32.u32 %r4671, %r4672, %r4801, %r4667;
	// end inline asm
	ld.const.u32 	%r4676, [matrix+3964];
	// begin inline asm
	dp4a.u32.u32 %r4675, %r4676, %r4805, %r4671;
	// end inline asm
	shr.u32 	%r5096, %r4611, 6;
	and.b32  	%r5097, %r5096, 240;
	shr.u32 	%r5098, %r4675, 10;
	or.b32  	%r5099, %r5098, %r5097;
	cvt.u64.u32 	%rd1205, %r5099;
	xor.b64  	%rd1206, %rd1144, %rd1205;
	ld.const.u32 	%r4680, [matrix+3968];
	// begin inline asm
	dp4a.u32.u32 %r4679, %r4680, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4684, [matrix+3972];
	// begin inline asm
	dp4a.u32.u32 %r4683, %r4684, %r4749, %r4679;
	// end inline asm
	ld.const.u32 	%r4688, [matrix+3976];
	// begin inline asm
	dp4a.u32.u32 %r4687, %r4688, %r4753, %r4683;
	// end inline asm
	ld.const.u32 	%r4692, [matrix+3980];
	// begin inline asm
	dp4a.u32.u32 %r4691, %r4692, %r4757, %r4687;
	// end inline asm
	ld.const.u32 	%r4696, [matrix+3984];
	// begin inline asm
	dp4a.u32.u32 %r4695, %r4696, %r4761, %r4691;
	// end inline asm
	ld.const.u32 	%r4700, [matrix+3988];
	// begin inline asm
	dp4a.u32.u32 %r4699, %r4700, %r4765, %r4695;
	// end inline asm
	ld.const.u32 	%r4704, [matrix+3992];
	// begin inline asm
	dp4a.u32.u32 %r4703, %r4704, %r4769, %r4699;
	// end inline asm
	ld.const.u32 	%r4708, [matrix+3996];
	// begin inline asm
	dp4a.u32.u32 %r4707, %r4708, %r4773, %r4703;
	// end inline asm
	ld.const.u32 	%r4712, [matrix+4000];
	// begin inline asm
	dp4a.u32.u32 %r4711, %r4712, %r4777, %r4707;
	// end inline asm
	ld.const.u32 	%r4716, [matrix+4004];
	// begin inline asm
	dp4a.u32.u32 %r4715, %r4716, %r4781, %r4711;
	// end inline asm
	ld.const.u32 	%r4720, [matrix+4008];
	// begin inline asm
	dp4a.u32.u32 %r4719, %r4720, %r4785, %r4715;
	// end inline asm
	ld.const.u32 	%r4724, [matrix+4012];
	// begin inline asm
	dp4a.u32.u32 %r4723, %r4724, %r4789, %r4719;
	// end inline asm
	ld.const.u32 	%r4728, [matrix+4016];
	// begin inline asm
	dp4a.u32.u32 %r4727, %r4728, %r4793, %r4723;
	// end inline asm
	ld.const.u32 	%r4732, [matrix+4020];
	// begin inline asm
	dp4a.u32.u32 %r4731, %r4732, %r4797, %r4727;
	// end inline asm
	ld.const.u32 	%r4736, [matrix+4024];
	// begin inline asm
	dp4a.u32.u32 %r4735, %r4736, %r4801, %r4731;
	// end inline asm
	ld.const.u32 	%r4740, [matrix+4028];
	// begin inline asm
	dp4a.u32.u32 %r4739, %r4740, %r4805, %r4735;
	// end inline asm
	ld.const.u32 	%r4744, [matrix+4032];
	// begin inline asm
	dp4a.u32.u32 %r4743, %r4744, %r4745, %r5801;
	// end inline asm
	ld.const.u32 	%r4748, [matrix+4036];
	// begin inline asm
	dp4a.u32.u32 %r4747, %r4748, %r4749, %r4743;
	// end inline asm
	ld.const.u32 	%r4752, [matrix+4040];
	// begin inline asm
	dp4a.u32.u32 %r4751, %r4752, %r4753, %r4747;
	// end inline asm
	ld.const.u32 	%r4756, [matrix+4044];
	// begin inline asm
	dp4a.u32.u32 %r4755, %r4756, %r4757, %r4751;
	// end inline asm
	ld.const.u32 	%r4760, [matrix+4048];
	// begin inline asm
	dp4a.u32.u32 %r4759, %r4760, %r4761, %r4755;
	// end inline asm
	ld.const.u32 	%r4764, [matrix+4052];
	// begin inline asm
	dp4a.u32.u32 %r4763, %r4764, %r4765, %r4759;
	// end inline asm
	ld.const.u32 	%r4768, [matrix+4056];
	// begin inline asm
	dp4a.u32.u32 %r4767, %r4768, %r4769, %r4763;
	// end inline asm
	ld.const.u32 	%r4772, [matrix+4060];
	// begin inline asm
	dp4a.u32.u32 %r4771, %r4772, %r4773, %r4767;
	// end inline asm
	ld.const.u32 	%r4776, [matrix+4064];
	// begin inline asm
	dp4a.u32.u32 %r4775, %r4776, %r4777, %r4771;
	// end inline asm
	ld.const.u32 	%r4780, [matrix+4068];
	// begin inline asm
	dp4a.u32.u32 %r4779, %r4780, %r4781, %r4775;
	// end inline asm
	ld.const.u32 	%r4784, [matrix+4072];
	// begin inline asm
	dp4a.u32.u32 %r4783, %r4784, %r4785, %r4779;
	// end inline asm
	ld.const.u32 	%r4788, [matrix+4076];
	// begin inline asm
	dp4a.u32.u32 %r4787, %r4788, %r4789, %r4783;
	// end inline asm
	ld.const.u32 	%r4792, [matrix+4080];
	// begin inline asm
	dp4a.u32.u32 %r4791, %r4792, %r4793, %r4787;
	// end inline asm
	ld.const.u32 	%r4796, [matrix+4084];
	// begin inline asm
	dp4a.u32.u32 %r4795, %r4796, %r4797, %r4791;
	// end inline asm
	ld.const.u32 	%r4800, [matrix+4088];
	// begin inline asm
	dp4a.u32.u32 %r4799, %r4800, %r4801, %r4795;
	// end inline asm
	ld.const.u32 	%r4804, [matrix+4092];
	// begin inline asm
	dp4a.u32.u32 %r4803, %r4804, %r4805, %r4799;
	// end inline asm
	shr.u32 	%r5100, %r4739, 6;
	and.b32  	%r5101, %r5100, 240;
	shr.u32 	%r5102, %r4803, 10;
	or.b32  	%r5103, %r5102, %r5101;
	cvt.u64.u32 	%rd1207, %r5103;
	shl.b64 	%rd1208, %rd1207, 56;
	xor.b64  	%rd1209, %rd1113, %rd1161;
	shl.b64 	%rd1210, %rd1154, 24;
	and.b64  	%rd1211, %rd1210, 4278190080;
	shl.b64 	%rd1212, %rd1152, 16;
	and.b64  	%rd1213, %rd1212, 16711680;
	shl.b64 	%rd1214, %rd1150, 8;
	and.b64  	%rd1215, %rd1214, 65280;
	xor.b64  	%rd1216, %rd1120, %rd1176;
	shl.b64 	%rd1217, %rd1169, 24;
	and.b64  	%rd1218, %rd1217, 4278190080;
	shl.b64 	%rd1219, %rd1167, 16;
	and.b64  	%rd1220, %rd1219, 16711680;
	shl.b64 	%rd1221, %rd1165, 8;
	and.b64  	%rd1222, %rd1221, 65280;
	xor.b64  	%rd1223, %rd1127, %rd1191;
	shl.b64 	%rd1224, %rd1184, 24;
	and.b64  	%rd1225, %rd1224, 4278190080;
	shl.b64 	%rd1226, %rd1182, 16;
	and.b64  	%rd1227, %rd1226, 16711680;
	shl.b64 	%rd1228, %rd1180, 8;
	and.b64  	%rd1229, %rd1228, 65280;
	and.b64  	%rd1230, %rd2222, -72057594037927936;
	xor.b64  	%rd1231, %rd1230, %rd1208;
	shl.b64 	%rd1232, %rd1209, 56;
	shl.b64 	%rd1233, %rd1160, 48;
	and.b64  	%rd1234, %rd1233, 71776119061217280;
	or.b64  	%rd1235, %rd1232, %rd1234;
	shl.b64 	%rd1236, %rd1158, 40;
	and.b64  	%rd1237, %rd1236, 280375465082880;
	or.b64  	%rd1238, %rd1235, %rd1237;
	shl.b64 	%rd1239, %rd1156, 32;
	and.b64  	%rd1240, %rd1239, 1095216660480;
	or.b64  	%rd1241, %rd1238, %rd1240;
	or.b64  	%rd1242, %rd1241, %rd1211;
	or.b64  	%rd1243, %rd1242, %rd1213;
	and.b64  	%rd1244, %rd1148, 255;
	or.b64  	%rd1245, %rd1243, %rd1215;
	or.b64  	%rd1246, %rd1245, %rd1244;
	xor.b64  	%rd120, %rd1246, 4239941492252378377;
	shl.b64 	%rd1247, %rd1216, 56;
	shl.b64 	%rd1248, %rd1175, 48;
	and.b64  	%rd1249, %rd1248, 71776119061217280;
	or.b64  	%rd1250, %rd1247, %rd1249;
	shl.b64 	%rd1251, %rd1173, 40;
	and.b64  	%rd1252, %rd1251, 280375465082880;
	or.b64  	%rd1253, %rd1250, %rd1252;
	shl.b64 	%rd1254, %rd1171, 32;
	and.b64  	%rd1255, %rd1254, 1095216660480;
	or.b64  	%rd1256, %rd1253, %rd1255;
	or.b64  	%rd1257, %rd1256, %rd1218;
	or.b64  	%rd1258, %rd1257, %rd1220;
	and.b64  	%rd1259, %rd1163, 255;
	or.b64  	%rd1260, %rd1258, %rd1222;
	or.b64  	%rd1261, %rd1260, %rd1259;
	xor.b64  	%rd2258, %rd1261, 8746723911537738262;
	shl.b64 	%rd1262, %rd1223, 56;
	shl.b64 	%rd1263, %rd1190, 48;
	and.b64  	%rd1264, %rd1263, 71776119061217280;
	or.b64  	%rd1265, %rd1262, %rd1264;
	shl.b64 	%rd1266, %rd1188, 40;
	and.b64  	%rd1267, %rd1266, 280375465082880;
	or.b64  	%rd1268, %rd1265, %rd1267;
	shl.b64 	%rd1269, %rd1186, 32;
	and.b64  	%rd1270, %rd1269, 1095216660480;
	or.b64  	%rd1271, %rd1268, %rd1270;
	or.b64  	%rd1272, %rd1271, %rd1225;
	or.b64  	%rd1273, %rd1272, %rd1227;
	and.b64  	%rd1274, %rd1178, 255;
	or.b64  	%rd1275, %rd1273, %rd1229;
	or.b64  	%rd1276, %rd1275, %rd1274;
	xor.b64  	%rd2253, %rd1276, 8796936657246353646;
	shl.b64 	%rd1277, %rd1206, 48;
	and.b64  	%rd1278, %rd1277, 71776119061217280;
	or.b64  	%rd1279, %rd1231, %rd1278;
	shl.b64 	%rd1280, %rd1204, 40;
	and.b64  	%rd1281, %rd1280, 280375465082880;
	or.b64  	%rd1282, %rd1279, %rd1281;
	shl.b64 	%rd1283, %rd1202, 32;
	and.b64  	%rd1284, %rd1283, 1095216660480;
	or.b64  	%rd1285, %rd1282, %rd1284;
	shl.b64 	%rd1286, %rd1200, 24;
	and.b64  	%rd1287, %rd1286, 4278190080;
	or.b64  	%rd1288, %rd1285, %rd1287;
	shl.b64 	%rd1289, %rd1198, 16;
	and.b64  	%rd1290, %rd1289, 16711680;
	shl.b64 	%rd1291, %rd1194, 8;
	and.b64  	%rd1292, %rd1291, 65280;
	or.b64  	%rd1293, %rd1288, %rd1290;
	or.b64  	%rd1294, %rd1293, %rd1292;
	or.b64  	%rd1295, %rd1294, %rd1196;
	xor.b64  	%rd2248, %rd1295, 1272090201925444760;
	mov.u64 	%rd2262, 8270816933120786537;
	mov.u64 	%rd2261, -850687345431043546;
	mov.u64 	%rd2260, 8596393687355028144;
	mov.u64 	%rd2259, -4073852189716399785;
	mov.u64 	%rd2257, -4539347866060507718;
	mov.u64 	%rd2256, -3233781605604422593;
	mov.u64 	%rd2255, 570094237299545110;
	mov.u64 	%rd2254, 5171152063242093102;
	mov.u64 	%rd2252, 6782861118970774626;
	mov.u64 	%rd2251, 7812475424661425213;
	mov.u64 	%rd2250, 9119540418498120711;
	mov.u64 	%rd2249, -7873636174015165430;
	mov.u64 	%rd2247, -9207053471590684088;
	mov.u64 	%rd2246, 3370482334374859748;
	mov.u64 	%rd2245, -1544774801229058759;
	mov.u64 	%rd2244, 6096431547456407061;
	mov.u64 	%rd2243, -1792185402154627366;
	mov.u64 	%rd2242, -6864424130110145268;
	mov.u64 	%rd2241, 5690099369266491460;
	mov.u64 	%rd2240, -5074726839974049192;
	mov.u64 	%rd2239, 1592359455985097269;
	mov.u64 	%rd2238, RC;

$L__BB0_6:
	.pragma "nounroll";
	xor.b64  	%rd1296, %rd2262, %rd120;
	xor.b64  	%rd1297, %rd1296, %rd2261;
	xor.b64  	%rd1298, %rd1297, %rd2260;
	xor.b64  	%rd1299, %rd1298, %rd2259;
	xor.b64  	%rd1300, %rd2257, %rd2258;
	xor.b64  	%rd1301, %rd1300, %rd2256;
	xor.b64  	%rd1302, %rd1301, %rd2255;
	xor.b64  	%rd1303, %rd1302, %rd2254;
	xor.b64  	%rd1304, %rd2252, %rd2253;
	xor.b64  	%rd1305, %rd1304, %rd2251;
	xor.b64  	%rd1306, %rd1305, %rd2250;
	xor.b64  	%rd1307, %rd1306, %rd2249;
	xor.b64  	%rd1308, %rd2247, %rd2248;
	xor.b64  	%rd1309, %rd1308, %rd2246;
	xor.b64  	%rd1310, %rd1309, %rd2245;
	xor.b64  	%rd1311, %rd1310, %rd2244;
	xor.b64  	%rd1312, %rd2242, %rd2243;
	xor.b64  	%rd1313, %rd1312, %rd2241;
	xor.b64  	%rd1314, %rd1313, %rd2240;
	xor.b64  	%rd1315, %rd1314, %rd2239;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5104}, %rd1303;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5105,%dummy}, %rd1303;
	}
	shf.l.wrap.b32 	%r5106, %r5105, %r5104, 1;
	shf.l.wrap.b32 	%r5107, %r5104, %r5105, 1;
	mov.b64 	%rd1316, {%r5107, %r5106};
	xor.b64  	%rd1317, %rd1315, %rd1316;
	xor.b64  	%rd1318, %rd1317, %rd120;
	xor.b64  	%rd1319, %rd2262, %rd1317;
	xor.b64  	%rd1320, %rd2261, %rd1317;
	xor.b64  	%rd1321, %rd2260, %rd1317;
	xor.b64  	%rd1322, %rd2259, %rd1317;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5108}, %rd1307;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5109,%dummy}, %rd1307;
	}
	shf.l.wrap.b32 	%r5110, %r5109, %r5108, 1;
	shf.l.wrap.b32 	%r5111, %r5108, %r5109, 1;
	mov.b64 	%rd1323, {%r5111, %r5110};
	xor.b64  	%rd1324, %rd1323, %rd1299;
	xor.b64  	%rd1325, %rd2258, %rd1324;
	xor.b64  	%rd1326, %rd2257, %rd1324;
	xor.b64  	%rd1327, %rd2256, %rd1324;
	xor.b64  	%rd1328, %rd2255, %rd1324;
	xor.b64  	%rd1329, %rd2254, %rd1324;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5112}, %rd1311;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5113,%dummy}, %rd1311;
	}
	shf.l.wrap.b32 	%r5114, %r5113, %r5112, 1;
	shf.l.wrap.b32 	%r5115, %r5112, %r5113, 1;
	mov.b64 	%rd1330, {%r5115, %r5114};
	xor.b64  	%rd1331, %rd1330, %rd1303;
	xor.b64  	%rd1332, %rd2253, %rd1331;
	xor.b64  	%rd1333, %rd2252, %rd1331;
	xor.b64  	%rd1334, %rd2251, %rd1331;
	xor.b64  	%rd1335, %rd2250, %rd1331;
	xor.b64  	%rd1336, %rd2249, %rd1331;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5116}, %rd1315;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5117,%dummy}, %rd1315;
	}
	shf.l.wrap.b32 	%r5118, %r5117, %r5116, 1;
	shf.l.wrap.b32 	%r5119, %r5116, %r5117, 1;
	mov.b64 	%rd1337, {%r5119, %r5118};
	xor.b64  	%rd1338, %rd1337, %rd1307;
	xor.b64  	%rd1339, %rd2248, %rd1338;
	xor.b64  	%rd1340, %rd2247, %rd1338;
	xor.b64  	%rd1341, %rd2246, %rd1338;
	xor.b64  	%rd1342, %rd2245, %rd1338;
	xor.b64  	%rd1343, %rd2244, %rd1338;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5120}, %rd1299;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5121,%dummy}, %rd1299;
	}
	shf.l.wrap.b32 	%r5122, %r5121, %r5120, 1;
	shf.l.wrap.b32 	%r5123, %r5120, %r5121, 1;
	mov.b64 	%rd1344, {%r5123, %r5122};
	xor.b64  	%rd1345, %rd1311, %rd1344;
	xor.b64  	%rd1346, %rd2243, %rd1345;
	xor.b64  	%rd1347, %rd2242, %rd1345;
	xor.b64  	%rd1348, %rd2241, %rd1345;
	xor.b64  	%rd1349, %rd2240, %rd1345;
	xor.b64  	%rd1350, %rd2239, %rd1345;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5124}, %rd1325;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5125,%dummy}, %rd1325;
	}
	shf.l.wrap.b32 	%r5126, %r5125, %r5124, 1;
	shf.l.wrap.b32 	%r5127, %r5124, %r5125, 1;
	mov.b64 	%rd1351, {%r5127, %r5126};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5128}, %rd1320;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5129,%dummy}, %rd1320;
	}
	shf.l.wrap.b32 	%r5130, %r5129, %r5128, 3;
	shf.l.wrap.b32 	%r5131, %r5128, %r5129, 3;
	mov.b64 	%rd1352, {%r5131, %r5130};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5132}, %rd1333;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5133,%dummy}, %rd1333;
	}
	shf.l.wrap.b32 	%r5134, %r5133, %r5132, 6;
	shf.l.wrap.b32 	%r5135, %r5132, %r5133, 6;
	mov.b64 	%rd1353, {%r5135, %r5134};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5136}, %rd1327;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5137,%dummy}, %rd1327;
	}
	shf.l.wrap.b32 	%r5138, %r5137, %r5136, 10;
	shf.l.wrap.b32 	%r5139, %r5136, %r5137, 10;
	mov.b64 	%rd1354, {%r5139, %r5138};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5140}, %rd1335;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5141,%dummy}, %rd1335;
	}
	shf.l.wrap.b32 	%r5142, %r5141, %r5140, 15;
	shf.l.wrap.b32 	%r5143, %r5140, %r5141, 15;
	mov.b64 	%rd1355, {%r5143, %r5142};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5144}, %rd1342;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5145,%dummy}, %rd1342;
	}
	shf.l.wrap.b32 	%r5146, %r5145, %r5144, 21;
	shf.l.wrap.b32 	%r5147, %r5144, %r5145, 21;
	mov.b64 	%rd1356, {%r5147, %r5146};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5148}, %rd1339;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5149,%dummy}, %rd1339;
	}
	shf.l.wrap.b32 	%r5150, %r5149, %r5148, 28;
	shf.l.wrap.b32 	%r5151, %r5148, %r5149, 28;
	mov.b64 	%rd1357, {%r5151, %r5150};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5152,%dummy}, %rd1319;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5153}, %rd1319;
	}
	shf.r.wrap.b32 	%r5154, %r5153, %r5152, 28;
	shf.r.wrap.b32 	%r5155, %r5152, %r5153, 28;
	mov.b64 	%rd1358, {%r5155, %r5154};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5156,%dummy}, %rd1328;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5157}, %rd1328;
	}
	shf.r.wrap.b32 	%r5158, %r5157, %r5156, 19;
	shf.r.wrap.b32 	%r5159, %r5156, %r5157, 19;
	mov.b64 	%rd1359, {%r5159, %r5158};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5160,%dummy}, %rd1340;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5161}, %rd1340;
	}
	shf.r.wrap.b32 	%r5162, %r5161, %r5160, 9;
	shf.r.wrap.b32 	%r5163, %r5160, %r5161, 9;
	mov.b64 	%rd1360, {%r5163, %r5162};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5164}, %rd1329;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5165,%dummy}, %rd1329;
	}
	shf.l.wrap.b32 	%r5166, %r5165, %r5164, 2;
	shf.l.wrap.b32 	%r5167, %r5164, %r5165, 2;
	mov.b64 	%rd1361, {%r5167, %r5166};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5168}, %rd1350;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5169,%dummy}, %rd1350;
	}
	shf.l.wrap.b32 	%r5170, %r5169, %r5168, 14;
	shf.l.wrap.b32 	%r5171, %r5168, %r5169, 14;
	mov.b64 	%rd1362, {%r5171, %r5170};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5172}, %rd1346;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5173,%dummy}, %rd1346;
	}
	shf.l.wrap.b32 	%r5174, %r5173, %r5172, 27;
	shf.l.wrap.b32 	%r5175, %r5172, %r5173, 27;
	mov.b64 	%rd1363, {%r5175, %r5174};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5176,%dummy}, %rd1321;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5177}, %rd1321;
	}
	shf.r.wrap.b32 	%r5178, %r5177, %r5176, 23;
	shf.r.wrap.b32 	%r5179, %r5176, %r5177, 23;
	mov.b64 	%rd1364, {%r5179, %r5178};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5180,%dummy}, %rd1343;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5181}, %rd1343;
	}
	shf.r.wrap.b32 	%r5182, %r5181, %r5180, 8;
	shf.r.wrap.b32 	%r5183, %r5180, %r5181, 8;
	mov.b64 	%rd1365, {%r5183, %r5182};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5184}, %rd1349;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5185,%dummy}, %rd1349;
	}
	shf.l.wrap.b32 	%r5186, %r5185, %r5184, 8;
	shf.l.wrap.b32 	%r5187, %r5184, %r5185, 8;
	mov.b64 	%rd1366, {%r5187, %r5186};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5188}, %rd1341;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5189,%dummy}, %rd1341;
	}
	shf.l.wrap.b32 	%r5190, %r5189, %r5188, 25;
	shf.l.wrap.b32 	%r5191, %r5188, %r5189, 25;
	mov.b64 	%rd1367, {%r5191, %r5190};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5192,%dummy}, %rd1334;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5193}, %rd1334;
	}
	shf.r.wrap.b32 	%r5194, %r5193, %r5192, 21;
	shf.r.wrap.b32 	%r5195, %r5192, %r5193, 21;
	mov.b64 	%rd1368, {%r5195, %r5194};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5196,%dummy}, %rd1332;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5197}, %rd1332;
	}
	shf.r.wrap.b32 	%r5198, %r5197, %r5196, 2;
	shf.r.wrap.b32 	%r5199, %r5196, %r5197, 2;
	mov.b64 	%rd1369, {%r5199, %r5198};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5200}, %rd1322;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5201,%dummy}, %rd1322;
	}
	shf.l.wrap.b32 	%r5202, %r5201, %r5200, 18;
	shf.l.wrap.b32 	%r5203, %r5200, %r5201, 18;
	mov.b64 	%rd1370, {%r5203, %r5202};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5204,%dummy}, %rd1348;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5205}, %rd1348;
	}
	shf.r.wrap.b32 	%r5206, %r5205, %r5204, 25;
	shf.r.wrap.b32 	%r5207, %r5204, %r5205, 25;
	mov.b64 	%rd1371, {%r5207, %r5206};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5208,%dummy}, %rd1336;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5209}, %rd1336;
	}
	shf.r.wrap.b32 	%r5210, %r5209, %r5208, 3;
	shf.r.wrap.b32 	%r5211, %r5208, %r5209, 3;
	mov.b64 	%rd1372, {%r5211, %r5210};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5212}, %rd1347;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5213,%dummy}, %rd1347;
	}
	shf.l.wrap.b32 	%r5214, %r5213, %r5212, 20;
	shf.l.wrap.b32 	%r5215, %r5212, %r5213, 20;
	mov.b64 	%rd1373, {%r5215, %r5214};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5216,%dummy}, %rd1326;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5217}, %rd1326;
	}
	shf.r.wrap.b32 	%r5218, %r5217, %r5216, 20;
	shf.r.wrap.b32 	%r5219, %r5216, %r5217, 20;
	mov.b64 	%rd1374, {%r5219, %r5218};
	not.b64 	%rd1375, %rd1374;
	and.b64  	%rd1376, %rd1368, %rd1375;
	xor.b64  	%rd1377, %rd1376, %rd1318;
	not.b64 	%rd1378, %rd1368;
	and.b64  	%rd1379, %rd1356, %rd1378;
	xor.b64  	%rd1380, %rd1379, %rd1374;
	not.b64 	%rd1381, %rd1356;
	and.b64  	%rd1382, %rd1362, %rd1381;
	xor.b64  	%rd1383, %rd1382, %rd1368;
	not.b64 	%rd1384, %rd1362;
	and.b64  	%rd1385, %rd1318, %rd1384;
	xor.b64  	%rd1386, %rd1385, %rd1356;
	not.b64 	%rd1387, %rd1318;
	and.b64  	%rd1388, %rd1374, %rd1387;
	xor.b64  	%rd1389, %rd1362, %rd1388;
	not.b64 	%rd1390, %rd1373;
	and.b64  	%rd1391, %rd1352, %rd1390;
	xor.b64  	%rd1392, %rd1391, %rd1357;
	not.b64 	%rd1393, %rd1352;
	and.b64  	%rd1394, %rd1359, %rd1393;
	xor.b64  	%rd1395, %rd1394, %rd1373;
	not.b64 	%rd1396, %rd1359;
	and.b64  	%rd1397, %rd1372, %rd1396;
	xor.b64  	%rd1398, %rd1397, %rd1352;
	not.b64 	%rd1399, %rd1372;
	and.b64  	%rd1400, %rd1357, %rd1399;
	xor.b64  	%rd1401, %rd1400, %rd1359;
	not.b64 	%rd1402, %rd1357;
	and.b64  	%rd1403, %rd1373, %rd1402;
	xor.b64  	%rd1404, %rd1372, %rd1403;
	not.b64 	%rd1405, %rd1353;
	and.b64  	%rd1406, %rd1367, %rd1405;
	xor.b64  	%rd1407, %rd1406, %rd1351;
	not.b64 	%rd1408, %rd1367;
	and.b64  	%rd1409, %rd1366, %rd1408;
	xor.b64  	%rd1410, %rd1409, %rd1353;
	not.b64 	%rd1411, %rd1366;
	and.b64  	%rd1412, %rd1370, %rd1411;
	xor.b64  	%rd1413, %rd1412, %rd1367;
	not.b64 	%rd1414, %rd1370;
	and.b64  	%rd1415, %rd1351, %rd1414;
	xor.b64  	%rd1416, %rd1415, %rd1366;
	not.b64 	%rd1417, %rd1351;
	and.b64  	%rd1418, %rd1353, %rd1417;
	xor.b64  	%rd1419, %rd1370, %rd1418;
	not.b64 	%rd1420, %rd1358;
	and.b64  	%rd1421, %rd1354, %rd1420;
	xor.b64  	%rd1422, %rd1421, %rd1363;
	not.b64 	%rd1423, %rd1354;
	and.b64  	%rd1424, %rd1355, %rd1423;
	xor.b64  	%rd1425, %rd1424, %rd1358;
	not.b64 	%rd1426, %rd1355;
	and.b64  	%rd1427, %rd1365, %rd1426;
	xor.b64  	%rd1428, %rd1427, %rd1354;
	not.b64 	%rd1429, %rd1365;
	and.b64  	%rd1430, %rd1363, %rd1429;
	xor.b64  	%rd1431, %rd1430, %rd1355;
	not.b64 	%rd1432, %rd1363;
	and.b64  	%rd1433, %rd1358, %rd1432;
	xor.b64  	%rd1434, %rd1365, %rd1433;
	not.b64 	%rd1435, %rd1360;
	and.b64  	%rd1436, %rd1371, %rd1435;
	xor.b64  	%rd1437, %rd1436, %rd1369;
	not.b64 	%rd1438, %rd1371;
	and.b64  	%rd1439, %rd1364, %rd1438;
	xor.b64  	%rd1440, %rd1439, %rd1360;
	not.b64 	%rd1441, %rd1364;
	and.b64  	%rd1442, %rd1361, %rd1441;
	xor.b64  	%rd1443, %rd1442, %rd1371;
	not.b64 	%rd1444, %rd1361;
	and.b64  	%rd1445, %rd1369, %rd1444;
	xor.b64  	%rd1446, %rd1445, %rd1364;
	not.b64 	%rd1447, %rd1369;
	and.b64  	%rd1448, %rd1360, %rd1447;
	xor.b64  	%rd1449, %rd1361, %rd1448;
	ld.global.nc.u64 	%rd1450, [%rd2238];
	xor.b64  	%rd1451, %rd1377, %rd1450;
	xor.b64  	%rd1452, %rd1392, %rd1451;
	xor.b64  	%rd1453, %rd1452, %rd1407;
	xor.b64  	%rd1454, %rd1453, %rd1422;
	xor.b64  	%rd1455, %rd1454, %rd1437;
	xor.b64  	%rd1456, %rd1395, %rd1380;
	xor.b64  	%rd1457, %rd1456, %rd1410;
	xor.b64  	%rd1458, %rd1457, %rd1425;
	xor.b64  	%rd1459, %rd1458, %rd1440;
	xor.b64  	%rd1460, %rd1398, %rd1383;
	xor.b64  	%rd1461, %rd1460, %rd1413;
	xor.b64  	%rd1462, %rd1461, %rd1428;
	xor.b64  	%rd1463, %rd1462, %rd1443;
	xor.b64  	%rd1464, %rd1401, %rd1386;
	xor.b64  	%rd1465, %rd1464, %rd1416;
	xor.b64  	%rd1466, %rd1465, %rd1431;
	xor.b64  	%rd1467, %rd1466, %rd1446;
	xor.b64  	%rd1468, %rd1404, %rd1389;
	xor.b64  	%rd1469, %rd1468, %rd1419;
	xor.b64  	%rd1470, %rd1469, %rd1434;
	xor.b64  	%rd1471, %rd1470, %rd1449;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5220}, %rd1459;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5221,%dummy}, %rd1459;
	}
	shf.l.wrap.b32 	%r5222, %r5221, %r5220, 1;
	shf.l.wrap.b32 	%r5223, %r5220, %r5221, 1;
	mov.b64 	%rd1472, {%r5223, %r5222};
	xor.b64  	%rd1473, %rd1471, %rd1472;
	xor.b64  	%rd1474, %rd1473, %rd1451;
	xor.b64  	%rd1475, %rd1392, %rd1473;
	xor.b64  	%rd1476, %rd1407, %rd1473;
	xor.b64  	%rd1477, %rd1422, %rd1473;
	xor.b64  	%rd1478, %rd1437, %rd1473;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5224}, %rd1463;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5225,%dummy}, %rd1463;
	}
	shf.l.wrap.b32 	%r5226, %r5225, %r5224, 1;
	shf.l.wrap.b32 	%r5227, %r5224, %r5225, 1;
	mov.b64 	%rd1479, {%r5227, %r5226};
	xor.b64  	%rd1480, %rd1479, %rd1455;
	xor.b64  	%rd1481, %rd1380, %rd1480;
	xor.b64  	%rd1482, %rd1395, %rd1480;
	xor.b64  	%rd1483, %rd1410, %rd1480;
	xor.b64  	%rd1484, %rd1425, %rd1480;
	xor.b64  	%rd1485, %rd1440, %rd1480;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5228}, %rd1467;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5229,%dummy}, %rd1467;
	}
	shf.l.wrap.b32 	%r5230, %r5229, %r5228, 1;
	shf.l.wrap.b32 	%r5231, %r5228, %r5229, 1;
	mov.b64 	%rd1486, {%r5231, %r5230};
	xor.b64  	%rd1487, %rd1486, %rd1459;
	xor.b64  	%rd1488, %rd1383, %rd1487;
	xor.b64  	%rd1489, %rd1398, %rd1487;
	xor.b64  	%rd1490, %rd1413, %rd1487;
	xor.b64  	%rd1491, %rd1428, %rd1487;
	xor.b64  	%rd1492, %rd1443, %rd1487;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5232}, %rd1471;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5233,%dummy}, %rd1471;
	}
	shf.l.wrap.b32 	%r5234, %r5233, %r5232, 1;
	shf.l.wrap.b32 	%r5235, %r5232, %r5233, 1;
	mov.b64 	%rd1493, {%r5235, %r5234};
	xor.b64  	%rd1494, %rd1493, %rd1463;
	xor.b64  	%rd1495, %rd1386, %rd1494;
	xor.b64  	%rd1496, %rd1401, %rd1494;
	xor.b64  	%rd1497, %rd1416, %rd1494;
	xor.b64  	%rd1498, %rd1431, %rd1494;
	xor.b64  	%rd1499, %rd1446, %rd1494;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5236}, %rd1455;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5237,%dummy}, %rd1455;
	}
	shf.l.wrap.b32 	%r5238, %r5237, %r5236, 1;
	shf.l.wrap.b32 	%r5239, %r5236, %r5237, 1;
	mov.b64 	%rd1500, {%r5239, %r5238};
	xor.b64  	%rd1501, %rd1467, %rd1500;
	xor.b64  	%rd1502, %rd1389, %rd1501;
	xor.b64  	%rd1503, %rd1404, %rd1501;
	xor.b64  	%rd1504, %rd1419, %rd1501;
	xor.b64  	%rd1505, %rd1434, %rd1501;
	xor.b64  	%rd1506, %rd1449, %rd1501;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5240}, %rd1481;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5241,%dummy}, %rd1481;
	}
	shf.l.wrap.b32 	%r5242, %r5241, %r5240, 1;
	shf.l.wrap.b32 	%r5243, %r5240, %r5241, 1;
	mov.b64 	%rd1507, {%r5243, %r5242};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5244}, %rd1476;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5245,%dummy}, %rd1476;
	}
	shf.l.wrap.b32 	%r5246, %r5245, %r5244, 3;
	shf.l.wrap.b32 	%r5247, %r5244, %r5245, 3;
	mov.b64 	%rd1508, {%r5247, %r5246};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5248}, %rd1489;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5249,%dummy}, %rd1489;
	}
	shf.l.wrap.b32 	%r5250, %r5249, %r5248, 6;
	shf.l.wrap.b32 	%r5251, %r5248, %r5249, 6;
	mov.b64 	%rd1509, {%r5251, %r5250};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5252}, %rd1483;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5253,%dummy}, %rd1483;
	}
	shf.l.wrap.b32 	%r5254, %r5253, %r5252, 10;
	shf.l.wrap.b32 	%r5255, %r5252, %r5253, 10;
	mov.b64 	%rd1510, {%r5255, %r5254};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5256}, %rd1491;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5257,%dummy}, %rd1491;
	}
	shf.l.wrap.b32 	%r5258, %r5257, %r5256, 15;
	shf.l.wrap.b32 	%r5259, %r5256, %r5257, 15;
	mov.b64 	%rd1511, {%r5259, %r5258};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5260}, %rd1498;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5261,%dummy}, %rd1498;
	}
	shf.l.wrap.b32 	%r5262, %r5261, %r5260, 21;
	shf.l.wrap.b32 	%r5263, %r5260, %r5261, 21;
	mov.b64 	%rd1512, {%r5263, %r5262};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5264}, %rd1495;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5265,%dummy}, %rd1495;
	}
	shf.l.wrap.b32 	%r5266, %r5265, %r5264, 28;
	shf.l.wrap.b32 	%r5267, %r5264, %r5265, 28;
	mov.b64 	%rd1513, {%r5267, %r5266};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5268,%dummy}, %rd1475;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5269}, %rd1475;
	}
	shf.r.wrap.b32 	%r5270, %r5269, %r5268, 28;
	shf.r.wrap.b32 	%r5271, %r5268, %r5269, 28;
	mov.b64 	%rd1514, {%r5271, %r5270};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5272,%dummy}, %rd1484;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5273}, %rd1484;
	}
	shf.r.wrap.b32 	%r5274, %r5273, %r5272, 19;
	shf.r.wrap.b32 	%r5275, %r5272, %r5273, 19;
	mov.b64 	%rd1515, {%r5275, %r5274};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5276,%dummy}, %rd1496;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5277}, %rd1496;
	}
	shf.r.wrap.b32 	%r5278, %r5277, %r5276, 9;
	shf.r.wrap.b32 	%r5279, %r5276, %r5277, 9;
	mov.b64 	%rd1516, {%r5279, %r5278};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5280}, %rd1485;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5281,%dummy}, %rd1485;
	}
	shf.l.wrap.b32 	%r5282, %r5281, %r5280, 2;
	shf.l.wrap.b32 	%r5283, %r5280, %r5281, 2;
	mov.b64 	%rd1517, {%r5283, %r5282};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5284}, %rd1506;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5285,%dummy}, %rd1506;
	}
	shf.l.wrap.b32 	%r5286, %r5285, %r5284, 14;
	shf.l.wrap.b32 	%r5287, %r5284, %r5285, 14;
	mov.b64 	%rd1518, {%r5287, %r5286};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5288}, %rd1502;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5289,%dummy}, %rd1502;
	}
	shf.l.wrap.b32 	%r5290, %r5289, %r5288, 27;
	shf.l.wrap.b32 	%r5291, %r5288, %r5289, 27;
	mov.b64 	%rd1519, {%r5291, %r5290};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5292,%dummy}, %rd1477;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5293}, %rd1477;
	}
	shf.r.wrap.b32 	%r5294, %r5293, %r5292, 23;
	shf.r.wrap.b32 	%r5295, %r5292, %r5293, 23;
	mov.b64 	%rd1520, {%r5295, %r5294};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5296,%dummy}, %rd1499;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5297}, %rd1499;
	}
	shf.r.wrap.b32 	%r5298, %r5297, %r5296, 8;
	shf.r.wrap.b32 	%r5299, %r5296, %r5297, 8;
	mov.b64 	%rd1521, {%r5299, %r5298};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5300}, %rd1505;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5301,%dummy}, %rd1505;
	}
	shf.l.wrap.b32 	%r5302, %r5301, %r5300, 8;
	shf.l.wrap.b32 	%r5303, %r5300, %r5301, 8;
	mov.b64 	%rd1522, {%r5303, %r5302};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5304}, %rd1497;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5305,%dummy}, %rd1497;
	}
	shf.l.wrap.b32 	%r5306, %r5305, %r5304, 25;
	shf.l.wrap.b32 	%r5307, %r5304, %r5305, 25;
	mov.b64 	%rd1523, {%r5307, %r5306};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5308,%dummy}, %rd1490;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5309}, %rd1490;
	}
	shf.r.wrap.b32 	%r5310, %r5309, %r5308, 21;
	shf.r.wrap.b32 	%r5311, %r5308, %r5309, 21;
	mov.b64 	%rd1524, {%r5311, %r5310};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5312,%dummy}, %rd1488;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5313}, %rd1488;
	}
	shf.r.wrap.b32 	%r5314, %r5313, %r5312, 2;
	shf.r.wrap.b32 	%r5315, %r5312, %r5313, 2;
	mov.b64 	%rd1525, {%r5315, %r5314};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5316}, %rd1478;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5317,%dummy}, %rd1478;
	}
	shf.l.wrap.b32 	%r5318, %r5317, %r5316, 18;
	shf.l.wrap.b32 	%r5319, %r5316, %r5317, 18;
	mov.b64 	%rd1526, {%r5319, %r5318};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5320,%dummy}, %rd1504;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5321}, %rd1504;
	}
	shf.r.wrap.b32 	%r5322, %r5321, %r5320, 25;
	shf.r.wrap.b32 	%r5323, %r5320, %r5321, 25;
	mov.b64 	%rd1527, {%r5323, %r5322};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5324,%dummy}, %rd1492;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5325}, %rd1492;
	}
	shf.r.wrap.b32 	%r5326, %r5325, %r5324, 3;
	shf.r.wrap.b32 	%r5327, %r5324, %r5325, 3;
	mov.b64 	%rd1528, {%r5327, %r5326};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5328}, %rd1503;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5329,%dummy}, %rd1503;
	}
	shf.l.wrap.b32 	%r5330, %r5329, %r5328, 20;
	shf.l.wrap.b32 	%r5331, %r5328, %r5329, 20;
	mov.b64 	%rd1529, {%r5331, %r5330};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5332,%dummy}, %rd1482;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5333}, %rd1482;
	}
	shf.r.wrap.b32 	%r5334, %r5333, %r5332, 20;
	shf.r.wrap.b32 	%r5335, %r5332, %r5333, 20;
	mov.b64 	%rd1530, {%r5335, %r5334};
	not.b64 	%rd1531, %rd1530;
	and.b64  	%rd1532, %rd1524, %rd1531;
	xor.b64  	%rd1533, %rd1532, %rd1474;
	not.b64 	%rd1534, %rd1524;
	and.b64  	%rd1535, %rd1512, %rd1534;
	xor.b64  	%rd1536, %rd1535, %rd1530;
	not.b64 	%rd1537, %rd1512;
	and.b64  	%rd1538, %rd1518, %rd1537;
	xor.b64  	%rd1539, %rd1538, %rd1524;
	not.b64 	%rd1540, %rd1518;
	and.b64  	%rd1541, %rd1474, %rd1540;
	xor.b64  	%rd1542, %rd1541, %rd1512;
	not.b64 	%rd1543, %rd1474;
	and.b64  	%rd1544, %rd1530, %rd1543;
	xor.b64  	%rd1545, %rd1518, %rd1544;
	not.b64 	%rd1546, %rd1529;
	and.b64  	%rd1547, %rd1508, %rd1546;
	xor.b64  	%rd1548, %rd1547, %rd1513;
	not.b64 	%rd1549, %rd1508;
	and.b64  	%rd1550, %rd1515, %rd1549;
	xor.b64  	%rd1551, %rd1550, %rd1529;
	not.b64 	%rd1552, %rd1515;
	and.b64  	%rd1553, %rd1528, %rd1552;
	xor.b64  	%rd1554, %rd1553, %rd1508;
	not.b64 	%rd1555, %rd1528;
	and.b64  	%rd1556, %rd1513, %rd1555;
	xor.b64  	%rd1557, %rd1556, %rd1515;
	not.b64 	%rd1558, %rd1513;
	and.b64  	%rd1559, %rd1529, %rd1558;
	xor.b64  	%rd1560, %rd1528, %rd1559;
	not.b64 	%rd1561, %rd1509;
	and.b64  	%rd1562, %rd1523, %rd1561;
	xor.b64  	%rd1563, %rd1562, %rd1507;
	not.b64 	%rd1564, %rd1523;
	and.b64  	%rd1565, %rd1522, %rd1564;
	xor.b64  	%rd1566, %rd1565, %rd1509;
	not.b64 	%rd1567, %rd1522;
	and.b64  	%rd1568, %rd1526, %rd1567;
	xor.b64  	%rd1569, %rd1568, %rd1523;
	not.b64 	%rd1570, %rd1526;
	and.b64  	%rd1571, %rd1507, %rd1570;
	xor.b64  	%rd1572, %rd1571, %rd1522;
	not.b64 	%rd1573, %rd1507;
	and.b64  	%rd1574, %rd1509, %rd1573;
	xor.b64  	%rd1575, %rd1526, %rd1574;
	not.b64 	%rd1576, %rd1514;
	and.b64  	%rd1577, %rd1510, %rd1576;
	xor.b64  	%rd1578, %rd1577, %rd1519;
	not.b64 	%rd1579, %rd1510;
	and.b64  	%rd1580, %rd1511, %rd1579;
	xor.b64  	%rd1581, %rd1580, %rd1514;
	not.b64 	%rd1582, %rd1511;
	and.b64  	%rd1583, %rd1521, %rd1582;
	xor.b64  	%rd1584, %rd1583, %rd1510;
	not.b64 	%rd1585, %rd1521;
	and.b64  	%rd1586, %rd1519, %rd1585;
	xor.b64  	%rd1587, %rd1586, %rd1511;
	not.b64 	%rd1588, %rd1519;
	and.b64  	%rd1589, %rd1514, %rd1588;
	xor.b64  	%rd1590, %rd1521, %rd1589;
	not.b64 	%rd1591, %rd1516;
	and.b64  	%rd1592, %rd1527, %rd1591;
	xor.b64  	%rd1593, %rd1592, %rd1525;
	not.b64 	%rd1594, %rd1527;
	and.b64  	%rd1595, %rd1520, %rd1594;
	xor.b64  	%rd1596, %rd1595, %rd1516;
	not.b64 	%rd1597, %rd1520;
	and.b64  	%rd1598, %rd1517, %rd1597;
	xor.b64  	%rd1599, %rd1598, %rd1527;
	not.b64 	%rd1600, %rd1517;
	and.b64  	%rd1601, %rd1525, %rd1600;
	xor.b64  	%rd1602, %rd1601, %rd1520;
	not.b64 	%rd1603, %rd1525;
	and.b64  	%rd1604, %rd1516, %rd1603;
	xor.b64  	%rd1605, %rd1517, %rd1604;
	ld.global.nc.u64 	%rd1606, [%rd2238+8];
	xor.b64  	%rd1607, %rd1533, %rd1606;
	xor.b64  	%rd1608, %rd1548, %rd1607;
	xor.b64  	%rd1609, %rd1608, %rd1563;
	xor.b64  	%rd1610, %rd1609, %rd1578;
	xor.b64  	%rd1611, %rd1610, %rd1593;
	xor.b64  	%rd1612, %rd1551, %rd1536;
	xor.b64  	%rd1613, %rd1612, %rd1566;
	xor.b64  	%rd1614, %rd1613, %rd1581;
	xor.b64  	%rd1615, %rd1614, %rd1596;
	xor.b64  	%rd1616, %rd1554, %rd1539;
	xor.b64  	%rd1617, %rd1616, %rd1569;
	xor.b64  	%rd1618, %rd1617, %rd1584;
	xor.b64  	%rd1619, %rd1618, %rd1599;
	xor.b64  	%rd1620, %rd1557, %rd1542;
	xor.b64  	%rd1621, %rd1620, %rd1572;
	xor.b64  	%rd1622, %rd1621, %rd1587;
	xor.b64  	%rd1623, %rd1622, %rd1602;
	xor.b64  	%rd1624, %rd1560, %rd1545;
	xor.b64  	%rd1625, %rd1624, %rd1575;
	xor.b64  	%rd1626, %rd1625, %rd1590;
	xor.b64  	%rd1627, %rd1626, %rd1605;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5336}, %rd1615;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5337,%dummy}, %rd1615;
	}
	shf.l.wrap.b32 	%r5338, %r5337, %r5336, 1;
	shf.l.wrap.b32 	%r5339, %r5336, %r5337, 1;
	mov.b64 	%rd1628, {%r5339, %r5338};
	xor.b64  	%rd1629, %rd1627, %rd1628;
	xor.b64  	%rd1630, %rd1629, %rd1607;
	xor.b64  	%rd1631, %rd1548, %rd1629;
	xor.b64  	%rd1632, %rd1563, %rd1629;
	xor.b64  	%rd1633, %rd1578, %rd1629;
	xor.b64  	%rd1634, %rd1593, %rd1629;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5340}, %rd1619;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5341,%dummy}, %rd1619;
	}
	shf.l.wrap.b32 	%r5342, %r5341, %r5340, 1;
	shf.l.wrap.b32 	%r5343, %r5340, %r5341, 1;
	mov.b64 	%rd1635, {%r5343, %r5342};
	xor.b64  	%rd1636, %rd1635, %rd1611;
	xor.b64  	%rd1637, %rd1536, %rd1636;
	xor.b64  	%rd1638, %rd1551, %rd1636;
	xor.b64  	%rd1639, %rd1566, %rd1636;
	xor.b64  	%rd1640, %rd1581, %rd1636;
	xor.b64  	%rd1641, %rd1596, %rd1636;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5344}, %rd1623;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5345,%dummy}, %rd1623;
	}
	shf.l.wrap.b32 	%r5346, %r5345, %r5344, 1;
	shf.l.wrap.b32 	%r5347, %r5344, %r5345, 1;
	mov.b64 	%rd1642, {%r5347, %r5346};
	xor.b64  	%rd1643, %rd1642, %rd1615;
	xor.b64  	%rd1644, %rd1539, %rd1643;
	xor.b64  	%rd1645, %rd1554, %rd1643;
	xor.b64  	%rd1646, %rd1569, %rd1643;
	xor.b64  	%rd1647, %rd1584, %rd1643;
	xor.b64  	%rd1648, %rd1599, %rd1643;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5348}, %rd1627;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5349,%dummy}, %rd1627;
	}
	shf.l.wrap.b32 	%r5350, %r5349, %r5348, 1;
	shf.l.wrap.b32 	%r5351, %r5348, %r5349, 1;
	mov.b64 	%rd1649, {%r5351, %r5350};
	xor.b64  	%rd1650, %rd1649, %rd1619;
	xor.b64  	%rd1651, %rd1542, %rd1650;
	xor.b64  	%rd1652, %rd1557, %rd1650;
	xor.b64  	%rd1653, %rd1572, %rd1650;
	xor.b64  	%rd1654, %rd1587, %rd1650;
	xor.b64  	%rd1655, %rd1602, %rd1650;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5352}, %rd1611;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5353,%dummy}, %rd1611;
	}
	shf.l.wrap.b32 	%r5354, %r5353, %r5352, 1;
	shf.l.wrap.b32 	%r5355, %r5352, %r5353, 1;
	mov.b64 	%rd1656, {%r5355, %r5354};
	xor.b64  	%rd1657, %rd1623, %rd1656;
	xor.b64  	%rd1658, %rd1545, %rd1657;
	xor.b64  	%rd1659, %rd1560, %rd1657;
	xor.b64  	%rd1660, %rd1575, %rd1657;
	xor.b64  	%rd1661, %rd1590, %rd1657;
	xor.b64  	%rd1662, %rd1605, %rd1657;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5356}, %rd1637;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5357,%dummy}, %rd1637;
	}
	shf.l.wrap.b32 	%r5358, %r5357, %r5356, 1;
	shf.l.wrap.b32 	%r5359, %r5356, %r5357, 1;
	mov.b64 	%rd1663, {%r5359, %r5358};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5360}, %rd1632;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5361,%dummy}, %rd1632;
	}
	shf.l.wrap.b32 	%r5362, %r5361, %r5360, 3;
	shf.l.wrap.b32 	%r5363, %r5360, %r5361, 3;
	mov.b64 	%rd1664, {%r5363, %r5362};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5364}, %rd1645;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5365,%dummy}, %rd1645;
	}
	shf.l.wrap.b32 	%r5366, %r5365, %r5364, 6;
	shf.l.wrap.b32 	%r5367, %r5364, %r5365, 6;
	mov.b64 	%rd1665, {%r5367, %r5366};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5368}, %rd1639;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5369,%dummy}, %rd1639;
	}
	shf.l.wrap.b32 	%r5370, %r5369, %r5368, 10;
	shf.l.wrap.b32 	%r5371, %r5368, %r5369, 10;
	mov.b64 	%rd1666, {%r5371, %r5370};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5372}, %rd1647;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5373,%dummy}, %rd1647;
	}
	shf.l.wrap.b32 	%r5374, %r5373, %r5372, 15;
	shf.l.wrap.b32 	%r5375, %r5372, %r5373, 15;
	mov.b64 	%rd1667, {%r5375, %r5374};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5376}, %rd1654;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5377,%dummy}, %rd1654;
	}
	shf.l.wrap.b32 	%r5378, %r5377, %r5376, 21;
	shf.l.wrap.b32 	%r5379, %r5376, %r5377, 21;
	mov.b64 	%rd1668, {%r5379, %r5378};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5380}, %rd1651;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5381,%dummy}, %rd1651;
	}
	shf.l.wrap.b32 	%r5382, %r5381, %r5380, 28;
	shf.l.wrap.b32 	%r5383, %r5380, %r5381, 28;
	mov.b64 	%rd1669, {%r5383, %r5382};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5384,%dummy}, %rd1631;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5385}, %rd1631;
	}
	shf.r.wrap.b32 	%r5386, %r5385, %r5384, 28;
	shf.r.wrap.b32 	%r5387, %r5384, %r5385, 28;
	mov.b64 	%rd1670, {%r5387, %r5386};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5388,%dummy}, %rd1640;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5389}, %rd1640;
	}
	shf.r.wrap.b32 	%r5390, %r5389, %r5388, 19;
	shf.r.wrap.b32 	%r5391, %r5388, %r5389, 19;
	mov.b64 	%rd1671, {%r5391, %r5390};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5392,%dummy}, %rd1652;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5393}, %rd1652;
	}
	shf.r.wrap.b32 	%r5394, %r5393, %r5392, 9;
	shf.r.wrap.b32 	%r5395, %r5392, %r5393, 9;
	mov.b64 	%rd1672, {%r5395, %r5394};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5396}, %rd1641;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5397,%dummy}, %rd1641;
	}
	shf.l.wrap.b32 	%r5398, %r5397, %r5396, 2;
	shf.l.wrap.b32 	%r5399, %r5396, %r5397, 2;
	mov.b64 	%rd1673, {%r5399, %r5398};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5400}, %rd1662;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5401,%dummy}, %rd1662;
	}
	shf.l.wrap.b32 	%r5402, %r5401, %r5400, 14;
	shf.l.wrap.b32 	%r5403, %r5400, %r5401, 14;
	mov.b64 	%rd1674, {%r5403, %r5402};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5404}, %rd1658;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5405,%dummy}, %rd1658;
	}
	shf.l.wrap.b32 	%r5406, %r5405, %r5404, 27;
	shf.l.wrap.b32 	%r5407, %r5404, %r5405, 27;
	mov.b64 	%rd1675, {%r5407, %r5406};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5408,%dummy}, %rd1633;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5409}, %rd1633;
	}
	shf.r.wrap.b32 	%r5410, %r5409, %r5408, 23;
	shf.r.wrap.b32 	%r5411, %r5408, %r5409, 23;
	mov.b64 	%rd1676, {%r5411, %r5410};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5412,%dummy}, %rd1655;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5413}, %rd1655;
	}
	shf.r.wrap.b32 	%r5414, %r5413, %r5412, 8;
	shf.r.wrap.b32 	%r5415, %r5412, %r5413, 8;
	mov.b64 	%rd1677, {%r5415, %r5414};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5416}, %rd1661;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5417,%dummy}, %rd1661;
	}
	shf.l.wrap.b32 	%r5418, %r5417, %r5416, 8;
	shf.l.wrap.b32 	%r5419, %r5416, %r5417, 8;
	mov.b64 	%rd1678, {%r5419, %r5418};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5420}, %rd1653;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5421,%dummy}, %rd1653;
	}
	shf.l.wrap.b32 	%r5422, %r5421, %r5420, 25;
	shf.l.wrap.b32 	%r5423, %r5420, %r5421, 25;
	mov.b64 	%rd1679, {%r5423, %r5422};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5424,%dummy}, %rd1646;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5425}, %rd1646;
	}
	shf.r.wrap.b32 	%r5426, %r5425, %r5424, 21;
	shf.r.wrap.b32 	%r5427, %r5424, %r5425, 21;
	mov.b64 	%rd1680, {%r5427, %r5426};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5428,%dummy}, %rd1644;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5429}, %rd1644;
	}
	shf.r.wrap.b32 	%r5430, %r5429, %r5428, 2;
	shf.r.wrap.b32 	%r5431, %r5428, %r5429, 2;
	mov.b64 	%rd1681, {%r5431, %r5430};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5432}, %rd1634;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5433,%dummy}, %rd1634;
	}
	shf.l.wrap.b32 	%r5434, %r5433, %r5432, 18;
	shf.l.wrap.b32 	%r5435, %r5432, %r5433, 18;
	mov.b64 	%rd1682, {%r5435, %r5434};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5436,%dummy}, %rd1660;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5437}, %rd1660;
	}
	shf.r.wrap.b32 	%r5438, %r5437, %r5436, 25;
	shf.r.wrap.b32 	%r5439, %r5436, %r5437, 25;
	mov.b64 	%rd1683, {%r5439, %r5438};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5440,%dummy}, %rd1648;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5441}, %rd1648;
	}
	shf.r.wrap.b32 	%r5442, %r5441, %r5440, 3;
	shf.r.wrap.b32 	%r5443, %r5440, %r5441, 3;
	mov.b64 	%rd1684, {%r5443, %r5442};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5444}, %rd1659;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5445,%dummy}, %rd1659;
	}
	shf.l.wrap.b32 	%r5446, %r5445, %r5444, 20;
	shf.l.wrap.b32 	%r5447, %r5444, %r5445, 20;
	mov.b64 	%rd1685, {%r5447, %r5446};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5448,%dummy}, %rd1638;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5449}, %rd1638;
	}
	shf.r.wrap.b32 	%r5450, %r5449, %r5448, 20;
	shf.r.wrap.b32 	%r5451, %r5448, %r5449, 20;
	mov.b64 	%rd1686, {%r5451, %r5450};
	not.b64 	%rd1687, %rd1686;
	and.b64  	%rd1688, %rd1680, %rd1687;
	xor.b64  	%rd1689, %rd1688, %rd1630;
	not.b64 	%rd1690, %rd1680;
	and.b64  	%rd1691, %rd1668, %rd1690;
	xor.b64  	%rd1692, %rd1691, %rd1686;
	not.b64 	%rd1693, %rd1668;
	and.b64  	%rd1694, %rd1674, %rd1693;
	xor.b64  	%rd1695, %rd1694, %rd1680;
	not.b64 	%rd1696, %rd1674;
	and.b64  	%rd1697, %rd1630, %rd1696;
	xor.b64  	%rd1698, %rd1697, %rd1668;
	not.b64 	%rd1699, %rd1630;
	and.b64  	%rd1700, %rd1686, %rd1699;
	xor.b64  	%rd1701, %rd1674, %rd1700;
	not.b64 	%rd1702, %rd1685;
	and.b64  	%rd1703, %rd1664, %rd1702;
	xor.b64  	%rd1704, %rd1703, %rd1669;
	not.b64 	%rd1705, %rd1664;
	and.b64  	%rd1706, %rd1671, %rd1705;
	xor.b64  	%rd1707, %rd1706, %rd1685;
	not.b64 	%rd1708, %rd1671;
	and.b64  	%rd1709, %rd1684, %rd1708;
	xor.b64  	%rd1710, %rd1709, %rd1664;
	not.b64 	%rd1711, %rd1684;
	and.b64  	%rd1712, %rd1669, %rd1711;
	xor.b64  	%rd1713, %rd1712, %rd1671;
	not.b64 	%rd1714, %rd1669;
	and.b64  	%rd1715, %rd1685, %rd1714;
	xor.b64  	%rd1716, %rd1684, %rd1715;
	not.b64 	%rd1717, %rd1665;
	and.b64  	%rd1718, %rd1679, %rd1717;
	xor.b64  	%rd1719, %rd1718, %rd1663;
	not.b64 	%rd1720, %rd1679;
	and.b64  	%rd1721, %rd1678, %rd1720;
	xor.b64  	%rd1722, %rd1721, %rd1665;
	not.b64 	%rd1723, %rd1678;
	and.b64  	%rd1724, %rd1682, %rd1723;
	xor.b64  	%rd1725, %rd1724, %rd1679;
	not.b64 	%rd1726, %rd1682;
	and.b64  	%rd1727, %rd1663, %rd1726;
	xor.b64  	%rd1728, %rd1727, %rd1678;
	not.b64 	%rd1729, %rd1663;
	and.b64  	%rd1730, %rd1665, %rd1729;
	xor.b64  	%rd1731, %rd1682, %rd1730;
	not.b64 	%rd1732, %rd1670;
	and.b64  	%rd1733, %rd1666, %rd1732;
	xor.b64  	%rd1734, %rd1733, %rd1675;
	not.b64 	%rd1735, %rd1666;
	and.b64  	%rd1736, %rd1667, %rd1735;
	xor.b64  	%rd1737, %rd1736, %rd1670;
	not.b64 	%rd1738, %rd1667;
	and.b64  	%rd1739, %rd1677, %rd1738;
	xor.b64  	%rd1740, %rd1739, %rd1666;
	not.b64 	%rd1741, %rd1677;
	and.b64  	%rd1742, %rd1675, %rd1741;
	xor.b64  	%rd1743, %rd1742, %rd1667;
	not.b64 	%rd1744, %rd1675;
	and.b64  	%rd1745, %rd1670, %rd1744;
	xor.b64  	%rd1746, %rd1677, %rd1745;
	not.b64 	%rd1747, %rd1672;
	and.b64  	%rd1748, %rd1683, %rd1747;
	xor.b64  	%rd1749, %rd1748, %rd1681;
	not.b64 	%rd1750, %rd1683;
	and.b64  	%rd1751, %rd1676, %rd1750;
	xor.b64  	%rd1752, %rd1751, %rd1672;
	not.b64 	%rd1753, %rd1676;
	and.b64  	%rd1754, %rd1673, %rd1753;
	xor.b64  	%rd1755, %rd1754, %rd1683;
	not.b64 	%rd1756, %rd1673;
	and.b64  	%rd1757, %rd1681, %rd1756;
	xor.b64  	%rd1758, %rd1757, %rd1676;
	not.b64 	%rd1759, %rd1681;
	and.b64  	%rd1760, %rd1672, %rd1759;
	xor.b64  	%rd1761, %rd1673, %rd1760;
	ld.global.nc.u64 	%rd1762, [%rd2238+16];
	xor.b64  	%rd1763, %rd1689, %rd1762;
	xor.b64  	%rd1764, %rd1704, %rd1763;
	xor.b64  	%rd1765, %rd1764, %rd1719;
	xor.b64  	%rd1766, %rd1765, %rd1734;
	xor.b64  	%rd1767, %rd1766, %rd1749;
	xor.b64  	%rd1768, %rd1707, %rd1692;
	xor.b64  	%rd1769, %rd1768, %rd1722;
	xor.b64  	%rd1770, %rd1769, %rd1737;
	xor.b64  	%rd1771, %rd1770, %rd1752;
	xor.b64  	%rd1772, %rd1710, %rd1695;
	xor.b64  	%rd1773, %rd1772, %rd1725;
	xor.b64  	%rd1774, %rd1773, %rd1740;
	xor.b64  	%rd1775, %rd1774, %rd1755;
	xor.b64  	%rd1776, %rd1713, %rd1698;
	xor.b64  	%rd1777, %rd1776, %rd1728;
	xor.b64  	%rd1778, %rd1777, %rd1743;
	xor.b64  	%rd1779, %rd1778, %rd1758;
	xor.b64  	%rd1780, %rd1716, %rd1701;
	xor.b64  	%rd1781, %rd1780, %rd1731;
	xor.b64  	%rd1782, %rd1781, %rd1746;
	xor.b64  	%rd1783, %rd1782, %rd1761;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5452}, %rd1771;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5453,%dummy}, %rd1771;
	}
	shf.l.wrap.b32 	%r5454, %r5453, %r5452, 1;
	shf.l.wrap.b32 	%r5455, %r5452, %r5453, 1;
	mov.b64 	%rd1784, {%r5455, %r5454};
	xor.b64  	%rd1785, %rd1783, %rd1784;
	xor.b64  	%rd1786, %rd1785, %rd1763;
	xor.b64  	%rd1787, %rd1704, %rd1785;
	xor.b64  	%rd1788, %rd1719, %rd1785;
	xor.b64  	%rd1789, %rd1734, %rd1785;
	xor.b64  	%rd1790, %rd1749, %rd1785;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5456}, %rd1775;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5457,%dummy}, %rd1775;
	}
	shf.l.wrap.b32 	%r5458, %r5457, %r5456, 1;
	shf.l.wrap.b32 	%r5459, %r5456, %r5457, 1;
	mov.b64 	%rd1791, {%r5459, %r5458};
	xor.b64  	%rd1792, %rd1791, %rd1767;
	xor.b64  	%rd1793, %rd1692, %rd1792;
	xor.b64  	%rd1794, %rd1707, %rd1792;
	xor.b64  	%rd1795, %rd1722, %rd1792;
	xor.b64  	%rd1796, %rd1737, %rd1792;
	xor.b64  	%rd1797, %rd1752, %rd1792;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5460}, %rd1779;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5461,%dummy}, %rd1779;
	}
	shf.l.wrap.b32 	%r5462, %r5461, %r5460, 1;
	shf.l.wrap.b32 	%r5463, %r5460, %r5461, 1;
	mov.b64 	%rd1798, {%r5463, %r5462};
	xor.b64  	%rd1799, %rd1798, %rd1771;
	xor.b64  	%rd1800, %rd1695, %rd1799;
	xor.b64  	%rd1801, %rd1710, %rd1799;
	xor.b64  	%rd1802, %rd1725, %rd1799;
	xor.b64  	%rd1803, %rd1740, %rd1799;
	xor.b64  	%rd1804, %rd1755, %rd1799;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5464}, %rd1783;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5465,%dummy}, %rd1783;
	}
	shf.l.wrap.b32 	%r5466, %r5465, %r5464, 1;
	shf.l.wrap.b32 	%r5467, %r5464, %r5465, 1;
	mov.b64 	%rd1805, {%r5467, %r5466};
	xor.b64  	%rd1806, %rd1805, %rd1775;
	xor.b64  	%rd1807, %rd1698, %rd1806;
	xor.b64  	%rd1808, %rd1713, %rd1806;
	xor.b64  	%rd1809, %rd1728, %rd1806;
	xor.b64  	%rd1810, %rd1743, %rd1806;
	xor.b64  	%rd1811, %rd1758, %rd1806;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5468}, %rd1767;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5469,%dummy}, %rd1767;
	}
	shf.l.wrap.b32 	%r5470, %r5469, %r5468, 1;
	shf.l.wrap.b32 	%r5471, %r5468, %r5469, 1;
	mov.b64 	%rd1812, {%r5471, %r5470};
	xor.b64  	%rd1813, %rd1779, %rd1812;
	xor.b64  	%rd1814, %rd1701, %rd1813;
	xor.b64  	%rd1815, %rd1716, %rd1813;
	xor.b64  	%rd1816, %rd1731, %rd1813;
	xor.b64  	%rd1817, %rd1746, %rd1813;
	xor.b64  	%rd1818, %rd1761, %rd1813;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5472}, %rd1793;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5473,%dummy}, %rd1793;
	}
	shf.l.wrap.b32 	%r5474, %r5473, %r5472, 1;
	shf.l.wrap.b32 	%r5475, %r5472, %r5473, 1;
	mov.b64 	%rd1819, {%r5475, %r5474};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5476}, %rd1788;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5477,%dummy}, %rd1788;
	}
	shf.l.wrap.b32 	%r5478, %r5477, %r5476, 3;
	shf.l.wrap.b32 	%r5479, %r5476, %r5477, 3;
	mov.b64 	%rd1820, {%r5479, %r5478};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5480}, %rd1801;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5481,%dummy}, %rd1801;
	}
	shf.l.wrap.b32 	%r5482, %r5481, %r5480, 6;
	shf.l.wrap.b32 	%r5483, %r5480, %r5481, 6;
	mov.b64 	%rd1821, {%r5483, %r5482};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5484}, %rd1795;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5485,%dummy}, %rd1795;
	}
	shf.l.wrap.b32 	%r5486, %r5485, %r5484, 10;
	shf.l.wrap.b32 	%r5487, %r5484, %r5485, 10;
	mov.b64 	%rd1822, {%r5487, %r5486};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5488}, %rd1803;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5489,%dummy}, %rd1803;
	}
	shf.l.wrap.b32 	%r5490, %r5489, %r5488, 15;
	shf.l.wrap.b32 	%r5491, %r5488, %r5489, 15;
	mov.b64 	%rd1823, {%r5491, %r5490};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5492}, %rd1810;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5493,%dummy}, %rd1810;
	}
	shf.l.wrap.b32 	%r5494, %r5493, %r5492, 21;
	shf.l.wrap.b32 	%r5495, %r5492, %r5493, 21;
	mov.b64 	%rd1824, {%r5495, %r5494};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5496}, %rd1807;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5497,%dummy}, %rd1807;
	}
	shf.l.wrap.b32 	%r5498, %r5497, %r5496, 28;
	shf.l.wrap.b32 	%r5499, %r5496, %r5497, 28;
	mov.b64 	%rd1825, {%r5499, %r5498};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5500,%dummy}, %rd1787;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5501}, %rd1787;
	}
	shf.r.wrap.b32 	%r5502, %r5501, %r5500, 28;
	shf.r.wrap.b32 	%r5503, %r5500, %r5501, 28;
	mov.b64 	%rd1826, {%r5503, %r5502};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5504,%dummy}, %rd1796;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5505}, %rd1796;
	}
	shf.r.wrap.b32 	%r5506, %r5505, %r5504, 19;
	shf.r.wrap.b32 	%r5507, %r5504, %r5505, 19;
	mov.b64 	%rd1827, {%r5507, %r5506};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5508,%dummy}, %rd1808;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5509}, %rd1808;
	}
	shf.r.wrap.b32 	%r5510, %r5509, %r5508, 9;
	shf.r.wrap.b32 	%r5511, %r5508, %r5509, 9;
	mov.b64 	%rd1828, {%r5511, %r5510};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5512}, %rd1797;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5513,%dummy}, %rd1797;
	}
	shf.l.wrap.b32 	%r5514, %r5513, %r5512, 2;
	shf.l.wrap.b32 	%r5515, %r5512, %r5513, 2;
	mov.b64 	%rd1829, {%r5515, %r5514};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5516}, %rd1818;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5517,%dummy}, %rd1818;
	}
	shf.l.wrap.b32 	%r5518, %r5517, %r5516, 14;
	shf.l.wrap.b32 	%r5519, %r5516, %r5517, 14;
	mov.b64 	%rd1830, {%r5519, %r5518};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5520}, %rd1814;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5521,%dummy}, %rd1814;
	}
	shf.l.wrap.b32 	%r5522, %r5521, %r5520, 27;
	shf.l.wrap.b32 	%r5523, %r5520, %r5521, 27;
	mov.b64 	%rd1831, {%r5523, %r5522};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5524,%dummy}, %rd1789;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5525}, %rd1789;
	}
	shf.r.wrap.b32 	%r5526, %r5525, %r5524, 23;
	shf.r.wrap.b32 	%r5527, %r5524, %r5525, 23;
	mov.b64 	%rd1832, {%r5527, %r5526};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5528,%dummy}, %rd1811;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5529}, %rd1811;
	}
	shf.r.wrap.b32 	%r5530, %r5529, %r5528, 8;
	shf.r.wrap.b32 	%r5531, %r5528, %r5529, 8;
	mov.b64 	%rd1833, {%r5531, %r5530};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5532}, %rd1817;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5533,%dummy}, %rd1817;
	}
	shf.l.wrap.b32 	%r5534, %r5533, %r5532, 8;
	shf.l.wrap.b32 	%r5535, %r5532, %r5533, 8;
	mov.b64 	%rd1834, {%r5535, %r5534};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5536}, %rd1809;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5537,%dummy}, %rd1809;
	}
	shf.l.wrap.b32 	%r5538, %r5537, %r5536, 25;
	shf.l.wrap.b32 	%r5539, %r5536, %r5537, 25;
	mov.b64 	%rd1835, {%r5539, %r5538};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5540,%dummy}, %rd1802;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5541}, %rd1802;
	}
	shf.r.wrap.b32 	%r5542, %r5541, %r5540, 21;
	shf.r.wrap.b32 	%r5543, %r5540, %r5541, 21;
	mov.b64 	%rd1836, {%r5543, %r5542};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5544,%dummy}, %rd1800;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5545}, %rd1800;
	}
	shf.r.wrap.b32 	%r5546, %r5545, %r5544, 2;
	shf.r.wrap.b32 	%r5547, %r5544, %r5545, 2;
	mov.b64 	%rd1837, {%r5547, %r5546};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5548}, %rd1790;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5549,%dummy}, %rd1790;
	}
	shf.l.wrap.b32 	%r5550, %r5549, %r5548, 18;
	shf.l.wrap.b32 	%r5551, %r5548, %r5549, 18;
	mov.b64 	%rd1838, {%r5551, %r5550};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5552,%dummy}, %rd1816;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5553}, %rd1816;
	}
	shf.r.wrap.b32 	%r5554, %r5553, %r5552, 25;
	shf.r.wrap.b32 	%r5555, %r5552, %r5553, 25;
	mov.b64 	%rd1839, {%r5555, %r5554};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5556,%dummy}, %rd1804;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5557}, %rd1804;
	}
	shf.r.wrap.b32 	%r5558, %r5557, %r5556, 3;
	shf.r.wrap.b32 	%r5559, %r5556, %r5557, 3;
	mov.b64 	%rd1840, {%r5559, %r5558};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5560}, %rd1815;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5561,%dummy}, %rd1815;
	}
	shf.l.wrap.b32 	%r5562, %r5561, %r5560, 20;
	shf.l.wrap.b32 	%r5563, %r5560, %r5561, 20;
	mov.b64 	%rd1841, {%r5563, %r5562};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5564,%dummy}, %rd1794;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5565}, %rd1794;
	}
	shf.r.wrap.b32 	%r5566, %r5565, %r5564, 20;
	shf.r.wrap.b32 	%r5567, %r5564, %r5565, 20;
	mov.b64 	%rd1842, {%r5567, %r5566};
	not.b64 	%rd1843, %rd1842;
	and.b64  	%rd1844, %rd1836, %rd1843;
	xor.b64  	%rd1845, %rd1844, %rd1786;
	not.b64 	%rd1846, %rd1836;
	and.b64  	%rd1847, %rd1824, %rd1846;
	xor.b64  	%rd1848, %rd1847, %rd1842;
	not.b64 	%rd1849, %rd1824;
	and.b64  	%rd1850, %rd1830, %rd1849;
	xor.b64  	%rd1851, %rd1850, %rd1836;
	not.b64 	%rd1852, %rd1830;
	and.b64  	%rd1853, %rd1786, %rd1852;
	xor.b64  	%rd1854, %rd1853, %rd1824;
	not.b64 	%rd1855, %rd1786;
	and.b64  	%rd1856, %rd1842, %rd1855;
	xor.b64  	%rd1857, %rd1830, %rd1856;
	not.b64 	%rd1858, %rd1841;
	and.b64  	%rd1859, %rd1820, %rd1858;
	xor.b64  	%rd1860, %rd1859, %rd1825;
	not.b64 	%rd1861, %rd1820;
	and.b64  	%rd1862, %rd1827, %rd1861;
	xor.b64  	%rd1863, %rd1862, %rd1841;
	not.b64 	%rd1864, %rd1827;
	and.b64  	%rd1865, %rd1840, %rd1864;
	xor.b64  	%rd1866, %rd1865, %rd1820;
	not.b64 	%rd1867, %rd1840;
	and.b64  	%rd1868, %rd1825, %rd1867;
	xor.b64  	%rd1869, %rd1868, %rd1827;
	not.b64 	%rd1870, %rd1825;
	and.b64  	%rd1871, %rd1841, %rd1870;
	xor.b64  	%rd1872, %rd1840, %rd1871;
	not.b64 	%rd1873, %rd1821;
	and.b64  	%rd1874, %rd1835, %rd1873;
	xor.b64  	%rd1875, %rd1874, %rd1819;
	not.b64 	%rd1876, %rd1835;
	and.b64  	%rd1877, %rd1834, %rd1876;
	xor.b64  	%rd1878, %rd1877, %rd1821;
	not.b64 	%rd1879, %rd1834;
	and.b64  	%rd1880, %rd1838, %rd1879;
	xor.b64  	%rd1881, %rd1880, %rd1835;
	not.b64 	%rd1882, %rd1838;
	and.b64  	%rd1883, %rd1819, %rd1882;
	xor.b64  	%rd1884, %rd1883, %rd1834;
	not.b64 	%rd1885, %rd1819;
	and.b64  	%rd1886, %rd1821, %rd1885;
	xor.b64  	%rd1887, %rd1838, %rd1886;
	not.b64 	%rd1888, %rd1826;
	and.b64  	%rd1889, %rd1822, %rd1888;
	xor.b64  	%rd1890, %rd1889, %rd1831;
	not.b64 	%rd1891, %rd1822;
	and.b64  	%rd1892, %rd1823, %rd1891;
	xor.b64  	%rd1893, %rd1892, %rd1826;
	not.b64 	%rd1894, %rd1823;
	and.b64  	%rd1895, %rd1833, %rd1894;
	xor.b64  	%rd1896, %rd1895, %rd1822;
	not.b64 	%rd1897, %rd1833;
	and.b64  	%rd1898, %rd1831, %rd1897;
	xor.b64  	%rd1899, %rd1898, %rd1823;
	not.b64 	%rd1900, %rd1831;
	and.b64  	%rd1901, %rd1826, %rd1900;
	xor.b64  	%rd1902, %rd1833, %rd1901;
	not.b64 	%rd1903, %rd1828;
	and.b64  	%rd1904, %rd1839, %rd1903;
	xor.b64  	%rd1905, %rd1904, %rd1837;
	not.b64 	%rd1906, %rd1839;
	and.b64  	%rd1907, %rd1832, %rd1906;
	xor.b64  	%rd1908, %rd1907, %rd1828;
	not.b64 	%rd1909, %rd1832;
	and.b64  	%rd1910, %rd1829, %rd1909;
	xor.b64  	%rd1911, %rd1910, %rd1839;
	not.b64 	%rd1912, %rd1829;
	and.b64  	%rd1913, %rd1837, %rd1912;
	xor.b64  	%rd1914, %rd1913, %rd1832;
	not.b64 	%rd1915, %rd1837;
	and.b64  	%rd1916, %rd1828, %rd1915;
	xor.b64  	%rd1917, %rd1829, %rd1916;
	ld.global.nc.u64 	%rd1918, [%rd2238+24];
	xor.b64  	%rd1919, %rd1845, %rd1918;
	xor.b64  	%rd1920, %rd1860, %rd1919;
	xor.b64  	%rd1921, %rd1920, %rd1875;
	xor.b64  	%rd1922, %rd1921, %rd1890;
	xor.b64  	%rd1923, %rd1922, %rd1905;
	xor.b64  	%rd1924, %rd1863, %rd1848;
	xor.b64  	%rd1925, %rd1924, %rd1878;
	xor.b64  	%rd1926, %rd1925, %rd1893;
	xor.b64  	%rd1927, %rd1926, %rd1908;
	xor.b64  	%rd1928, %rd1866, %rd1851;
	xor.b64  	%rd1929, %rd1928, %rd1881;
	xor.b64  	%rd1930, %rd1929, %rd1896;
	xor.b64  	%rd1931, %rd1930, %rd1911;
	xor.b64  	%rd1932, %rd1869, %rd1854;
	xor.b64  	%rd1933, %rd1932, %rd1884;
	xor.b64  	%rd1934, %rd1933, %rd1899;
	xor.b64  	%rd1935, %rd1934, %rd1914;
	xor.b64  	%rd1936, %rd1872, %rd1857;
	xor.b64  	%rd1937, %rd1936, %rd1887;
	xor.b64  	%rd1938, %rd1937, %rd1902;
	xor.b64  	%rd1939, %rd1938, %rd1917;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5568}, %rd1927;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5569,%dummy}, %rd1927;
	}
	shf.l.wrap.b32 	%r5570, %r5569, %r5568, 1;
	shf.l.wrap.b32 	%r5571, %r5568, %r5569, 1;
	mov.b64 	%rd1940, {%r5571, %r5570};
	xor.b64  	%rd1941, %rd1939, %rd1940;
	xor.b64  	%rd1942, %rd1941, %rd1919;
	xor.b64  	%rd1943, %rd1860, %rd1941;
	xor.b64  	%rd1944, %rd1875, %rd1941;
	xor.b64  	%rd1945, %rd1890, %rd1941;
	xor.b64  	%rd1946, %rd1905, %rd1941;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5572}, %rd1931;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5573,%dummy}, %rd1931;
	}
	shf.l.wrap.b32 	%r5574, %r5573, %r5572, 1;
	shf.l.wrap.b32 	%r5575, %r5572, %r5573, 1;
	mov.b64 	%rd1947, {%r5575, %r5574};
	xor.b64  	%rd1948, %rd1947, %rd1923;
	xor.b64  	%rd1949, %rd1848, %rd1948;
	xor.b64  	%rd1950, %rd1863, %rd1948;
	xor.b64  	%rd1951, %rd1878, %rd1948;
	xor.b64  	%rd1952, %rd1893, %rd1948;
	xor.b64  	%rd1953, %rd1908, %rd1948;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5576}, %rd1935;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5577,%dummy}, %rd1935;
	}
	shf.l.wrap.b32 	%r5578, %r5577, %r5576, 1;
	shf.l.wrap.b32 	%r5579, %r5576, %r5577, 1;
	mov.b64 	%rd1954, {%r5579, %r5578};
	xor.b64  	%rd1955, %rd1954, %rd1927;
	xor.b64  	%rd1956, %rd1851, %rd1955;
	xor.b64  	%rd1957, %rd1866, %rd1955;
	xor.b64  	%rd1958, %rd1881, %rd1955;
	xor.b64  	%rd1959, %rd1896, %rd1955;
	xor.b64  	%rd1960, %rd1911, %rd1955;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5580}, %rd1939;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5581,%dummy}, %rd1939;
	}
	shf.l.wrap.b32 	%r5582, %r5581, %r5580, 1;
	shf.l.wrap.b32 	%r5583, %r5580, %r5581, 1;
	mov.b64 	%rd1961, {%r5583, %r5582};
	xor.b64  	%rd1962, %rd1961, %rd1931;
	xor.b64  	%rd1963, %rd1854, %rd1962;
	xor.b64  	%rd1964, %rd1869, %rd1962;
	xor.b64  	%rd1965, %rd1884, %rd1962;
	xor.b64  	%rd1966, %rd1899, %rd1962;
	xor.b64  	%rd1967, %rd1914, %rd1962;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5584}, %rd1923;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5585,%dummy}, %rd1923;
	}
	shf.l.wrap.b32 	%r5586, %r5585, %r5584, 1;
	shf.l.wrap.b32 	%r5587, %r5584, %r5585, 1;
	mov.b64 	%rd1968, {%r5587, %r5586};
	xor.b64  	%rd1969, %rd1935, %rd1968;
	xor.b64  	%rd1970, %rd1857, %rd1969;
	xor.b64  	%rd1971, %rd1872, %rd1969;
	xor.b64  	%rd1972, %rd1887, %rd1969;
	xor.b64  	%rd1973, %rd1902, %rd1969;
	xor.b64  	%rd1974, %rd1917, %rd1969;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5588}, %rd1949;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5589,%dummy}, %rd1949;
	}
	shf.l.wrap.b32 	%r5590, %r5589, %r5588, 1;
	shf.l.wrap.b32 	%r5591, %r5588, %r5589, 1;
	mov.b64 	%rd1975, {%r5591, %r5590};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5592}, %rd1944;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5593,%dummy}, %rd1944;
	}
	shf.l.wrap.b32 	%r5594, %r5593, %r5592, 3;
	shf.l.wrap.b32 	%r5595, %r5592, %r5593, 3;
	mov.b64 	%rd1976, {%r5595, %r5594};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5596}, %rd1957;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5597,%dummy}, %rd1957;
	}
	shf.l.wrap.b32 	%r5598, %r5597, %r5596, 6;
	shf.l.wrap.b32 	%r5599, %r5596, %r5597, 6;
	mov.b64 	%rd1977, {%r5599, %r5598};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5600}, %rd1951;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5601,%dummy}, %rd1951;
	}
	shf.l.wrap.b32 	%r5602, %r5601, %r5600, 10;
	shf.l.wrap.b32 	%r5603, %r5600, %r5601, 10;
	mov.b64 	%rd1978, {%r5603, %r5602};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5604}, %rd1959;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5605,%dummy}, %rd1959;
	}
	shf.l.wrap.b32 	%r5606, %r5605, %r5604, 15;
	shf.l.wrap.b32 	%r5607, %r5604, %r5605, 15;
	mov.b64 	%rd1979, {%r5607, %r5606};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5608}, %rd1966;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5609,%dummy}, %rd1966;
	}
	shf.l.wrap.b32 	%r5610, %r5609, %r5608, 21;
	shf.l.wrap.b32 	%r5611, %r5608, %r5609, 21;
	mov.b64 	%rd1980, {%r5611, %r5610};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5612}, %rd1963;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5613,%dummy}, %rd1963;
	}
	shf.l.wrap.b32 	%r5614, %r5613, %r5612, 28;
	shf.l.wrap.b32 	%r5615, %r5612, %r5613, 28;
	mov.b64 	%rd1981, {%r5615, %r5614};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5616,%dummy}, %rd1943;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5617}, %rd1943;
	}
	shf.r.wrap.b32 	%r5618, %r5617, %r5616, 28;
	shf.r.wrap.b32 	%r5619, %r5616, %r5617, 28;
	mov.b64 	%rd1982, {%r5619, %r5618};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5620,%dummy}, %rd1952;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5621}, %rd1952;
	}
	shf.r.wrap.b32 	%r5622, %r5621, %r5620, 19;
	shf.r.wrap.b32 	%r5623, %r5620, %r5621, 19;
	mov.b64 	%rd1983, {%r5623, %r5622};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5624,%dummy}, %rd1964;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5625}, %rd1964;
	}
	shf.r.wrap.b32 	%r5626, %r5625, %r5624, 9;
	shf.r.wrap.b32 	%r5627, %r5624, %r5625, 9;
	mov.b64 	%rd1984, {%r5627, %r5626};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5628}, %rd1953;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5629,%dummy}, %rd1953;
	}
	shf.l.wrap.b32 	%r5630, %r5629, %r5628, 2;
	shf.l.wrap.b32 	%r5631, %r5628, %r5629, 2;
	mov.b64 	%rd1985, {%r5631, %r5630};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5632}, %rd1974;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5633,%dummy}, %rd1974;
	}
	shf.l.wrap.b32 	%r5634, %r5633, %r5632, 14;
	shf.l.wrap.b32 	%r5635, %r5632, %r5633, 14;
	mov.b64 	%rd1986, {%r5635, %r5634};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5636}, %rd1970;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5637,%dummy}, %rd1970;
	}
	shf.l.wrap.b32 	%r5638, %r5637, %r5636, 27;
	shf.l.wrap.b32 	%r5639, %r5636, %r5637, 27;
	mov.b64 	%rd1987, {%r5639, %r5638};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5640,%dummy}, %rd1945;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5641}, %rd1945;
	}
	shf.r.wrap.b32 	%r5642, %r5641, %r5640, 23;
	shf.r.wrap.b32 	%r5643, %r5640, %r5641, 23;
	mov.b64 	%rd1988, {%r5643, %r5642};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5644,%dummy}, %rd1967;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5645}, %rd1967;
	}
	shf.r.wrap.b32 	%r5646, %r5645, %r5644, 8;
	shf.r.wrap.b32 	%r5647, %r5644, %r5645, 8;
	mov.b64 	%rd1989, {%r5647, %r5646};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5648}, %rd1973;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5649,%dummy}, %rd1973;
	}
	shf.l.wrap.b32 	%r5650, %r5649, %r5648, 8;
	shf.l.wrap.b32 	%r5651, %r5648, %r5649, 8;
	mov.b64 	%rd1990, {%r5651, %r5650};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5652}, %rd1965;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5653,%dummy}, %rd1965;
	}
	shf.l.wrap.b32 	%r5654, %r5653, %r5652, 25;
	shf.l.wrap.b32 	%r5655, %r5652, %r5653, 25;
	mov.b64 	%rd1991, {%r5655, %r5654};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5656,%dummy}, %rd1958;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5657}, %rd1958;
	}
	shf.r.wrap.b32 	%r5658, %r5657, %r5656, 21;
	shf.r.wrap.b32 	%r5659, %r5656, %r5657, 21;
	mov.b64 	%rd1992, {%r5659, %r5658};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5660,%dummy}, %rd1956;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5661}, %rd1956;
	}
	shf.r.wrap.b32 	%r5662, %r5661, %r5660, 2;
	shf.r.wrap.b32 	%r5663, %r5660, %r5661, 2;
	mov.b64 	%rd1993, {%r5663, %r5662};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5664}, %rd1946;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5665,%dummy}, %rd1946;
	}
	shf.l.wrap.b32 	%r5666, %r5665, %r5664, 18;
	shf.l.wrap.b32 	%r5667, %r5664, %r5665, 18;
	mov.b64 	%rd1994, {%r5667, %r5666};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5668,%dummy}, %rd1972;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5669}, %rd1972;
	}
	shf.r.wrap.b32 	%r5670, %r5669, %r5668, 25;
	shf.r.wrap.b32 	%r5671, %r5668, %r5669, 25;
	mov.b64 	%rd1995, {%r5671, %r5670};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5672,%dummy}, %rd1960;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5673}, %rd1960;
	}
	shf.r.wrap.b32 	%r5674, %r5673, %r5672, 3;
	shf.r.wrap.b32 	%r5675, %r5672, %r5673, 3;
	mov.b64 	%rd1996, {%r5675, %r5674};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5676}, %rd1971;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5677,%dummy}, %rd1971;
	}
	shf.l.wrap.b32 	%r5678, %r5677, %r5676, 20;
	shf.l.wrap.b32 	%r5679, %r5676, %r5677, 20;
	mov.b64 	%rd1997, {%r5679, %r5678};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5680,%dummy}, %rd1950;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5681}, %rd1950;
	}
	shf.r.wrap.b32 	%r5682, %r5681, %r5680, 20;
	shf.r.wrap.b32 	%r5683, %r5680, %r5681, 20;
	mov.b64 	%rd1998, {%r5683, %r5682};
	not.b64 	%rd1999, %rd1998;
	and.b64  	%rd2000, %rd1992, %rd1999;
	xor.b64  	%rd2001, %rd2000, %rd1942;
	not.b64 	%rd2002, %rd1992;
	and.b64  	%rd2003, %rd1980, %rd2002;
	xor.b64  	%rd2004, %rd2003, %rd1998;
	not.b64 	%rd2005, %rd1980;
	and.b64  	%rd2006, %rd1986, %rd2005;
	xor.b64  	%rd2007, %rd2006, %rd1992;
	not.b64 	%rd2008, %rd1986;
	and.b64  	%rd2009, %rd1942, %rd2008;
	xor.b64  	%rd2010, %rd2009, %rd1980;
	not.b64 	%rd2011, %rd1942;
	and.b64  	%rd2012, %rd1998, %rd2011;
	xor.b64  	%rd2013, %rd1986, %rd2012;
	not.b64 	%rd2014, %rd1997;
	and.b64  	%rd2015, %rd1976, %rd2014;
	xor.b64  	%rd2016, %rd2015, %rd1981;
	not.b64 	%rd2017, %rd1976;
	and.b64  	%rd2018, %rd1983, %rd2017;
	xor.b64  	%rd2019, %rd2018, %rd1997;
	not.b64 	%rd2020, %rd1983;
	and.b64  	%rd2021, %rd1996, %rd2020;
	xor.b64  	%rd2022, %rd2021, %rd1976;
	not.b64 	%rd2023, %rd1996;
	and.b64  	%rd2024, %rd1981, %rd2023;
	xor.b64  	%rd2025, %rd2024, %rd1983;
	not.b64 	%rd2026, %rd1981;
	and.b64  	%rd2027, %rd1997, %rd2026;
	xor.b64  	%rd2028, %rd1996, %rd2027;
	not.b64 	%rd2029, %rd1977;
	and.b64  	%rd2030, %rd1991, %rd2029;
	xor.b64  	%rd2031, %rd2030, %rd1975;
	not.b64 	%rd2032, %rd1991;
	and.b64  	%rd2033, %rd1990, %rd2032;
	xor.b64  	%rd2034, %rd2033, %rd1977;
	not.b64 	%rd2035, %rd1990;
	and.b64  	%rd2036, %rd1994, %rd2035;
	xor.b64  	%rd2037, %rd2036, %rd1991;
	not.b64 	%rd2038, %rd1994;
	and.b64  	%rd2039, %rd1975, %rd2038;
	xor.b64  	%rd2040, %rd2039, %rd1990;
	not.b64 	%rd2041, %rd1975;
	and.b64  	%rd2042, %rd1977, %rd2041;
	xor.b64  	%rd2043, %rd1994, %rd2042;
	not.b64 	%rd2044, %rd1982;
	and.b64  	%rd2045, %rd1978, %rd2044;
	xor.b64  	%rd2046, %rd2045, %rd1987;
	not.b64 	%rd2047, %rd1978;
	and.b64  	%rd2048, %rd1979, %rd2047;
	xor.b64  	%rd2049, %rd2048, %rd1982;
	not.b64 	%rd2050, %rd1979;
	and.b64  	%rd2051, %rd1989, %rd2050;
	xor.b64  	%rd2052, %rd2051, %rd1978;
	not.b64 	%rd2053, %rd1989;
	and.b64  	%rd2054, %rd1987, %rd2053;
	xor.b64  	%rd2055, %rd2054, %rd1979;
	not.b64 	%rd2056, %rd1987;
	and.b64  	%rd2057, %rd1982, %rd2056;
	xor.b64  	%rd2058, %rd1989, %rd2057;
	not.b64 	%rd2059, %rd1984;
	and.b64  	%rd2060, %rd1995, %rd2059;
	xor.b64  	%rd2061, %rd2060, %rd1993;
	not.b64 	%rd2062, %rd1995;
	and.b64  	%rd2063, %rd1988, %rd2062;
	xor.b64  	%rd2064, %rd2063, %rd1984;
	not.b64 	%rd2065, %rd1988;
	and.b64  	%rd2066, %rd1985, %rd2065;
	xor.b64  	%rd2067, %rd2066, %rd1995;
	not.b64 	%rd2068, %rd1985;
	and.b64  	%rd2069, %rd1993, %rd2068;
	xor.b64  	%rd2070, %rd2069, %rd1988;
	not.b64 	%rd2071, %rd1993;
	and.b64  	%rd2072, %rd1984, %rd2071;
	xor.b64  	%rd2073, %rd1985, %rd2072;
	ld.global.nc.u64 	%rd2074, [%rd2238+32];
	xor.b64  	%rd2075, %rd2001, %rd2074;
	xor.b64  	%rd2076, %rd2016, %rd2075;
	xor.b64  	%rd2077, %rd2076, %rd2031;
	xor.b64  	%rd2078, %rd2077, %rd2046;
	xor.b64  	%rd2079, %rd2078, %rd2061;
	xor.b64  	%rd2080, %rd2019, %rd2004;
	xor.b64  	%rd2081, %rd2080, %rd2034;
	xor.b64  	%rd2082, %rd2081, %rd2049;
	xor.b64  	%rd2083, %rd2082, %rd2064;
	xor.b64  	%rd2084, %rd2022, %rd2007;
	xor.b64  	%rd2085, %rd2084, %rd2037;
	xor.b64  	%rd2086, %rd2085, %rd2052;
	xor.b64  	%rd2087, %rd2086, %rd2067;
	xor.b64  	%rd2088, %rd2025, %rd2010;
	xor.b64  	%rd2089, %rd2088, %rd2040;
	xor.b64  	%rd2090, %rd2089, %rd2055;
	xor.b64  	%rd2091, %rd2090, %rd2070;
	xor.b64  	%rd2092, %rd2028, %rd2013;
	xor.b64  	%rd2093, %rd2092, %rd2043;
	xor.b64  	%rd2094, %rd2093, %rd2058;
	xor.b64  	%rd2095, %rd2094, %rd2073;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5684}, %rd2083;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5685,%dummy}, %rd2083;
	}
	shf.l.wrap.b32 	%r5686, %r5685, %r5684, 1;
	shf.l.wrap.b32 	%r5687, %r5684, %r5685, 1;
	mov.b64 	%rd2096, {%r5687, %r5686};
	xor.b64  	%rd2097, %rd2095, %rd2096;
	xor.b64  	%rd2098, %rd2097, %rd2075;
	xor.b64  	%rd2099, %rd2016, %rd2097;
	xor.b64  	%rd2100, %rd2031, %rd2097;
	xor.b64  	%rd2101, %rd2046, %rd2097;
	xor.b64  	%rd2102, %rd2061, %rd2097;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5688}, %rd2087;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5689,%dummy}, %rd2087;
	}
	shf.l.wrap.b32 	%r5690, %r5689, %r5688, 1;
	shf.l.wrap.b32 	%r5691, %r5688, %r5689, 1;
	mov.b64 	%rd2103, {%r5691, %r5690};
	xor.b64  	%rd2104, %rd2103, %rd2079;
	xor.b64  	%rd2105, %rd2004, %rd2104;
	xor.b64  	%rd2106, %rd2019, %rd2104;
	xor.b64  	%rd2107, %rd2034, %rd2104;
	xor.b64  	%rd2108, %rd2049, %rd2104;
	xor.b64  	%rd2109, %rd2064, %rd2104;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5692}, %rd2091;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5693,%dummy}, %rd2091;
	}
	shf.l.wrap.b32 	%r5694, %r5693, %r5692, 1;
	shf.l.wrap.b32 	%r5695, %r5692, %r5693, 1;
	mov.b64 	%rd2110, {%r5695, %r5694};
	xor.b64  	%rd2111, %rd2110, %rd2083;
	xor.b64  	%rd2112, %rd2007, %rd2111;
	xor.b64  	%rd2113, %rd2022, %rd2111;
	xor.b64  	%rd2114, %rd2037, %rd2111;
	xor.b64  	%rd2115, %rd2052, %rd2111;
	xor.b64  	%rd2116, %rd2067, %rd2111;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5696}, %rd2095;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5697,%dummy}, %rd2095;
	}
	shf.l.wrap.b32 	%r5698, %r5697, %r5696, 1;
	shf.l.wrap.b32 	%r5699, %r5696, %r5697, 1;
	mov.b64 	%rd2117, {%r5699, %r5698};
	xor.b64  	%rd2118, %rd2117, %rd2087;
	xor.b64  	%rd2119, %rd2010, %rd2118;
	xor.b64  	%rd2120, %rd2025, %rd2118;
	xor.b64  	%rd2121, %rd2040, %rd2118;
	xor.b64  	%rd2122, %rd2055, %rd2118;
	xor.b64  	%rd2123, %rd2070, %rd2118;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5700}, %rd2079;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5701,%dummy}, %rd2079;
	}
	shf.l.wrap.b32 	%r5702, %r5701, %r5700, 1;
	shf.l.wrap.b32 	%r5703, %r5700, %r5701, 1;
	mov.b64 	%rd2124, {%r5703, %r5702};
	xor.b64  	%rd2125, %rd2091, %rd2124;
	xor.b64  	%rd2126, %rd2013, %rd2125;
	xor.b64  	%rd2127, %rd2028, %rd2125;
	xor.b64  	%rd2128, %rd2043, %rd2125;
	xor.b64  	%rd2129, %rd2058, %rd2125;
	xor.b64  	%rd2130, %rd2073, %rd2125;
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5704}, %rd2105;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5705,%dummy}, %rd2105;
	}
	shf.l.wrap.b32 	%r5706, %r5705, %r5704, 1;
	shf.l.wrap.b32 	%r5707, %r5704, %r5705, 1;
	mov.b64 	%rd2131, {%r5707, %r5706};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5708}, %rd2100;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5709,%dummy}, %rd2100;
	}
	shf.l.wrap.b32 	%r5710, %r5709, %r5708, 3;
	shf.l.wrap.b32 	%r5711, %r5708, %r5709, 3;
	mov.b64 	%rd2132, {%r5711, %r5710};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5712}, %rd2113;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5713,%dummy}, %rd2113;
	}
	shf.l.wrap.b32 	%r5714, %r5713, %r5712, 6;
	shf.l.wrap.b32 	%r5715, %r5712, %r5713, 6;
	mov.b64 	%rd2133, {%r5715, %r5714};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5716}, %rd2107;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5717,%dummy}, %rd2107;
	}
	shf.l.wrap.b32 	%r5718, %r5717, %r5716, 10;
	shf.l.wrap.b32 	%r5719, %r5716, %r5717, 10;
	mov.b64 	%rd2134, {%r5719, %r5718};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5720}, %rd2115;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5721,%dummy}, %rd2115;
	}
	shf.l.wrap.b32 	%r5722, %r5721, %r5720, 15;
	shf.l.wrap.b32 	%r5723, %r5720, %r5721, 15;
	mov.b64 	%rd2135, {%r5723, %r5722};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5724}, %rd2122;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5725,%dummy}, %rd2122;
	}
	shf.l.wrap.b32 	%r5726, %r5725, %r5724, 21;
	shf.l.wrap.b32 	%r5727, %r5724, %r5725, 21;
	mov.b64 	%rd2136, {%r5727, %r5726};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5728}, %rd2119;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5729,%dummy}, %rd2119;
	}
	shf.l.wrap.b32 	%r5730, %r5729, %r5728, 28;
	shf.l.wrap.b32 	%r5731, %r5728, %r5729, 28;
	mov.b64 	%rd2137, {%r5731, %r5730};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5732,%dummy}, %rd2099;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5733}, %rd2099;
	}
	shf.r.wrap.b32 	%r5734, %r5733, %r5732, 28;
	shf.r.wrap.b32 	%r5735, %r5732, %r5733, 28;
	mov.b64 	%rd2138, {%r5735, %r5734};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5736,%dummy}, %rd2108;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5737}, %rd2108;
	}
	shf.r.wrap.b32 	%r5738, %r5737, %r5736, 19;
	shf.r.wrap.b32 	%r5739, %r5736, %r5737, 19;
	mov.b64 	%rd2139, {%r5739, %r5738};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5740,%dummy}, %rd2120;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5741}, %rd2120;
	}
	shf.r.wrap.b32 	%r5742, %r5741, %r5740, 9;
	shf.r.wrap.b32 	%r5743, %r5740, %r5741, 9;
	mov.b64 	%rd2140, {%r5743, %r5742};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5744}, %rd2109;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5745,%dummy}, %rd2109;
	}
	shf.l.wrap.b32 	%r5746, %r5745, %r5744, 2;
	shf.l.wrap.b32 	%r5747, %r5744, %r5745, 2;
	mov.b64 	%rd2141, {%r5747, %r5746};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5748}, %rd2130;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5749,%dummy}, %rd2130;
	}
	shf.l.wrap.b32 	%r5750, %r5749, %r5748, 14;
	shf.l.wrap.b32 	%r5751, %r5748, %r5749, 14;
	mov.b64 	%rd2142, {%r5751, %r5750};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5752}, %rd2126;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5753,%dummy}, %rd2126;
	}
	shf.l.wrap.b32 	%r5754, %r5753, %r5752, 27;
	shf.l.wrap.b32 	%r5755, %r5752, %r5753, 27;
	mov.b64 	%rd2143, {%r5755, %r5754};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5756,%dummy}, %rd2101;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5757}, %rd2101;
	}
	shf.r.wrap.b32 	%r5758, %r5757, %r5756, 23;
	shf.r.wrap.b32 	%r5759, %r5756, %r5757, 23;
	mov.b64 	%rd2144, {%r5759, %r5758};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5760,%dummy}, %rd2123;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5761}, %rd2123;
	}
	shf.r.wrap.b32 	%r5762, %r5761, %r5760, 8;
	shf.r.wrap.b32 	%r5763, %r5760, %r5761, 8;
	mov.b64 	%rd2145, {%r5763, %r5762};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5764}, %rd2129;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5765,%dummy}, %rd2129;
	}
	shf.l.wrap.b32 	%r5766, %r5765, %r5764, 8;
	shf.l.wrap.b32 	%r5767, %r5764, %r5765, 8;
	mov.b64 	%rd2146, {%r5767, %r5766};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5768}, %rd2121;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5769,%dummy}, %rd2121;
	}
	shf.l.wrap.b32 	%r5770, %r5769, %r5768, 25;
	shf.l.wrap.b32 	%r5771, %r5768, %r5769, 25;
	mov.b64 	%rd2147, {%r5771, %r5770};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5772,%dummy}, %rd2114;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5773}, %rd2114;
	}
	shf.r.wrap.b32 	%r5774, %r5773, %r5772, 21;
	shf.r.wrap.b32 	%r5775, %r5772, %r5773, 21;
	mov.b64 	%rd2148, {%r5775, %r5774};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5776,%dummy}, %rd2112;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5777}, %rd2112;
	}
	shf.r.wrap.b32 	%r5778, %r5777, %r5776, 2;
	shf.r.wrap.b32 	%r5779, %r5776, %r5777, 2;
	mov.b64 	%rd2149, {%r5779, %r5778};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5780}, %rd2102;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5781,%dummy}, %rd2102;
	}
	shf.l.wrap.b32 	%r5782, %r5781, %r5780, 18;
	shf.l.wrap.b32 	%r5783, %r5780, %r5781, 18;
	mov.b64 	%rd2150, {%r5783, %r5782};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5784,%dummy}, %rd2128;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5785}, %rd2128;
	}
	shf.r.wrap.b32 	%r5786, %r5785, %r5784, 25;
	shf.r.wrap.b32 	%r5787, %r5784, %r5785, 25;
	mov.b64 	%rd2151, {%r5787, %r5786};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5788,%dummy}, %rd2116;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5789}, %rd2116;
	}
	shf.r.wrap.b32 	%r5790, %r5789, %r5788, 3;
	shf.r.wrap.b32 	%r5791, %r5788, %r5789, 3;
	mov.b64 	%rd2152, {%r5791, %r5790};
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5792}, %rd2127;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5793,%dummy}, %rd2127;
	}
	shf.l.wrap.b32 	%r5794, %r5793, %r5792, 20;
	shf.l.wrap.b32 	%r5795, %r5792, %r5793, 20;
	mov.b64 	%rd2153, {%r5795, %r5794};
	{
	.reg .b32 %dummy;
	mov.b64 	{%r5796,%dummy}, %rd2106;
	}
	{
	.reg .b32 %dummy;
	mov.b64 	{%dummy,%r5797}, %rd2106;
	}
	shf.r.wrap.b32 	%r5798, %r5797, %r5796, 20;
	shf.r.wrap.b32 	%r5799, %r5796, %r5797, 20;
	mov.b64 	%rd2154, {%r5799, %r5798};
	not.b64 	%rd2155, %rd2154;
	and.b64  	%rd2156, %rd2148, %rd2155;
	xor.b64  	%rd2157, %rd2156, %rd2098;
	not.b64 	%rd2158, %rd2148;
	and.b64  	%rd2159, %rd2136, %rd2158;
	xor.b64  	%rd2258, %rd2159, %rd2154;
	not.b64 	%rd2160, %rd2136;
	and.b64  	%rd2161, %rd2142, %rd2160;
	xor.b64  	%rd2253, %rd2161, %rd2148;
	not.b64 	%rd2162, %rd2142;
	and.b64  	%rd2163, %rd2098, %rd2162;
	xor.b64  	%rd2248, %rd2163, %rd2136;
	not.b64 	%rd2164, %rd2098;
	and.b64  	%rd2165, %rd2154, %rd2164;
	xor.b64  	%rd2243, %rd2142, %rd2165;
	not.b64 	%rd2166, %rd2153;
	and.b64  	%rd2167, %rd2132, %rd2166;
	xor.b64  	%rd2262, %rd2167, %rd2137;
	not.b64 	%rd2168, %rd2132;
	and.b64  	%rd2169, %rd2139, %rd2168;
	xor.b64  	%rd2257, %rd2169, %rd2153;
	not.b64 	%rd2170, %rd2139;
	and.b64  	%rd2171, %rd2152, %rd2170;
	xor.b64  	%rd2252, %rd2171, %rd2132;
	not.b64 	%rd2172, %rd2152;
	and.b64  	%rd2173, %rd2137, %rd2172;
	xor.b64  	%rd2247, %rd2173, %rd2139;
	not.b64 	%rd2174, %rd2137;
	and.b64  	%rd2175, %rd2153, %rd2174;
	xor.b64  	%rd2242, %rd2152, %rd2175;
	not.b64 	%rd2176, %rd2133;
	and.b64  	%rd2177, %rd2147, %rd2176;
	xor.b64  	%rd2261, %rd2177, %rd2131;
	not.b64 	%rd2178, %rd2147;
	and.b64  	%rd2179, %rd2146, %rd2178;
	xor.b64  	%rd2256, %rd2179, %rd2133;
	not.b64 	%rd2180, %rd2146;
	and.b64  	%rd2181, %rd2150, %rd2180;
	xor.b64  	%rd2251, %rd2181, %rd2147;
	not.b64 	%rd2182, %rd2150;
	and.b64  	%rd2183, %rd2131, %rd2182;
	xor.b64  	%rd2246, %rd2183, %rd2146;
	not.b64 	%rd2184, %rd2131;
	and.b64  	%rd2185, %rd2133, %rd2184;
	xor.b64  	%rd2241, %rd2150, %rd2185;
	not.b64 	%rd2186, %rd2138;
	and.b64  	%rd2187, %rd2134, %rd2186;
	xor.b64  	%rd2260, %rd2187, %rd2143;
	not.b64 	%rd2188, %rd2134;
	and.b64  	%rd2189, %rd2135, %rd2188;
	xor.b64  	%rd2255, %rd2189, %rd2138;
	not.b64 	%rd2190, %rd2135;
	and.b64  	%rd2191, %rd2145, %rd2190;
	xor.b64  	%rd2250, %rd2191, %rd2134;
	not.b64 	%rd2192, %rd2145;
	and.b64  	%rd2193, %rd2143, %rd2192;
	xor.b64  	%rd2245, %rd2193, %rd2135;
	not.b64 	%rd2194, %rd2143;
	and.b64  	%rd2195, %rd2138, %rd2194;
	xor.b64  	%rd2240, %rd2145, %rd2195;
	not.b64 	%rd2196, %rd2140;
	and.b64  	%rd2197, %rd2151, %rd2196;
	xor.b64  	%rd2259, %rd2197, %rd2149;
	not.b64 	%rd2198, %rd2151;
	and.b64  	%rd2199, %rd2144, %rd2198;
	xor.b64  	%rd2254, %rd2199, %rd2140;
	not.b64 	%rd2200, %rd2144;
	and.b64  	%rd2201, %rd2141, %rd2200;
	xor.b64  	%rd2249, %rd2201, %rd2151;
	not.b64 	%rd2202, %rd2141;
	and.b64  	%rd2203, %rd2149, %rd2202;
	xor.b64  	%rd2244, %rd2203, %rd2144;
	not.b64 	%rd2204, %rd2149;
	and.b64  	%rd2205, %rd2140, %rd2204;
	xor.b64  	%rd2239, %rd2141, %rd2205;
	ld.global.nc.u64 	%rd2206, [%rd2238+40];
	xor.b64  	%rd120, %rd2157, %rd2206;
	add.s64 	%rd2238, %rd2238, 48;
	add.s32 	%r5801, %r5801, 6;
	setp.ne.s32 	%p9, %r5801, 24;
	@%p9 bra 	$L__BB0_6;

	ld.const.u64 	%rd122, [target+24];
	setp.eq.s64 	%p10, %rd2248, %rd122;
	@%p10 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_8;

$L__BB0_9:
	ld.const.u64 	%rd123, [target+16];
	setp.eq.s64 	%p11, %rd2253, %rd123;
	@%p11 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	ld.const.u64 	%rd124, [target+8];
	setp.eq.s64 	%p12, %rd2258, %rd124;
	@%p12 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;

$L__BB0_13:
	ld.const.u64 	%rd2207, [target];
	setp.lt.u64 	%p14, %rd120, %rd2207;
	bra.uni 	$L__BB0_14;

$L__BB0_8:
	setp.lt.u64 	%p14, %rd2248, %rd122;
	bra.uni 	$L__BB0_14;

$L__BB0_10:
	setp.lt.u64 	%p14, %rd2253, %rd123;
	bra.uni 	$L__BB0_14;

$L__BB0_12:
	setp.lt.u64 	%p14, %rd2258, %rd124;

$L__BB0_14:
	not.pred 	%p13, %p14;
	@%p13 bra 	$L__BB0_16;

	ld.param.u64 	%rd2211, [heavy_hash_param_2];
	cvta.to.global.u64 	%rd2210, %rd2211;
	mov.u64 	%rd2208, 0;
	atom.global.cas.b64 	%rd2209, [%rd2210], %rd2208, %rd3;

$L__BB0_16:
	ret;

}

